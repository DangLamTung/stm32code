
register_coding.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000430  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800053c  0800053c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800053c  0800053c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800053c  0800053c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800053c  0800053c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800053c  0800053c  0001053c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000540  08000540  00010540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000548  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000548  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000137a  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000057f  00000000  00000000  000213a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f8  00000000  00000000  00021928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00021b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010ce3  00000000  00000000  00021cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001818  00000000  00000000  000329b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005949f  00000000  00000000  000341cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008d66a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000690  00000000  00000000  0008d6e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000524 	.word	0x08000524

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000524 	.word	0x08000524

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000194:	b480      	push	{r7}
 8000196:	b085      	sub	sp, #20
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800019c:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800019e:	69da      	ldr	r2, [r3, #28]
 80001a0:	4907      	ldr	r1, [pc, #28]	; (80001c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	4313      	orrs	r3, r2
 80001a6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80001aa:	69da      	ldr	r2, [r3, #28]
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	4013      	ands	r3, r2
 80001b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001b2:	68fb      	ldr	r3, [r7, #12]
}
 80001b4:	bf00      	nop
 80001b6:	3714      	adds	r7, #20
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr
 80001be:	bf00      	nop
 80001c0:	40021000 	.word	0x40021000

080001c4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001ce:	699a      	ldr	r2, [r3, #24]
 80001d0:	4907      	ldr	r1, [pc, #28]	; (80001f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4313      	orrs	r3, r2
 80001d6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80001da:	699a      	ldr	r2, [r3, #24]
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4013      	ands	r3, r2
 80001e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e2:	68fb      	ldr	r3, [r7, #12]
}
 80001e4:	bf00      	nop
 80001e6:	3714      	adds	r7, #20
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40021000 	.word	0x40021000

080001f4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 80001f8:	4b07      	ldr	r3, [pc, #28]	; (8000218 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	4a06      	ldr	r2, [pc, #24]	; (8000218 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 80001fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000202:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	4a03      	ldr	r2, [pc, #12]	; (8000218 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x24>)
 800020a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800020e:	6053      	str	r3, [r2, #4]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	40010000 	.word	0x40010000

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000220:	2001      	movs	r0, #1
 8000222:	f7ff ffcf 	bl	80001c4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000226:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800022a:	f7ff ffb3 	bl	8000194 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022e:	2003      	movs	r0, #3
 8000230:	f7ff ff8c 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000234:	f7ff ffde 	bl	80001f4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f81a 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f000 f85a 	bl	80002f4 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 GPIOC->ODR |= GPIO_ODR_ODR13;
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <main+0x50>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4a09      	ldr	r2, [pc, #36]	; (800026c <main+0x50>)
 8000246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800024a:	60d3      	str	r3, [r2, #12]
	 LL_mDelay(500);
 800024c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000250:	f000 f912 	bl	8000478 <LL_mDelay>

	 GPIOC->ODR &= ~GPIO_ODR_ODR13;
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <main+0x50>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a04      	ldr	r2, [pc, #16]	; (800026c <main+0x50>)
 800025a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800025e:	60d3      	str	r3, [r2, #12]
	 LL_mDelay(500);
 8000260:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000264:	f000 f908 	bl	8000478 <LL_mDelay>
	 GPIOC->ODR |= GPIO_ODR_ODR13;
 8000268:	e7ea      	b.n	8000240 <main+0x24>
 800026a:	bf00      	nop
 800026c:	40011000 	.word	0x40011000

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

  FLASH->ACR = (FLASH->ACR) | LL_FLASH_LATENCY_2;
 8000274:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <SystemClock_Config+0x74>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a1a      	ldr	r2, [pc, #104]	; (80002e4 <SystemClock_Config+0x74>)
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	6013      	str	r3, [r2, #0]
  RCC->CR |= RCC_CR_HSEON;
 8000280:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <SystemClock_Config+0x78>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <SystemClock_Config+0x78>)
 8000286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800028a:	6013      	str	r3, [r2, #0]
  RCC->CFGR |= (RCC_CFGR_PLLSRC | 0x00000000U);// Setup PLL source without prescale
 800028c:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <SystemClock_Config+0x78>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	4a15      	ldr	r2, [pc, #84]	; (80002e8 <SystemClock_Config+0x78>)
 8000292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000296:	6053      	str	r3, [r2, #4]
  RCC->CFGR |=	RCC_CFGR_PLLMULL9;             // Setup PLL multiplication factor
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <SystemClock_Config+0x78>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a12      	ldr	r2, [pc, #72]	; (80002e8 <SystemClock_Config+0x78>)
 800029e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80002a2:	6053      	str	r3, [r2, #4]
  RCC->CR |= RCC_CR_PLLON;
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <SystemClock_Config+0x78>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0f      	ldr	r2, [pc, #60]	; (80002e8 <SystemClock_Config+0x78>)
 80002aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ae:	6013      	str	r3, [r2, #0]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <SystemClock_Config+0x78>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a0c      	ldr	r2, [pc, #48]	; (80002e8 <SystemClock_Config+0x78>)
 80002b6:	f043 0302 	orr.w	r3, r3, #2
 80002ba:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2 | RCC_CFGR_PPRE2_DIV1;
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <SystemClock_Config+0x78>)
 80002be:	685b      	ldr	r3, [r3, #4]
 80002c0:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <SystemClock_Config+0x78>)
 80002c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002c6:	6053      	str	r3, [r2, #4]
  LL_Init1msTick(72000000);
 80002c8:	4808      	ldr	r0, [pc, #32]	; (80002ec <SystemClock_Config+0x7c>)
 80002ca:	f000 f8c7 	bl	800045c <LL_Init1msTick>
  SysTick->CTRL |= LL_SYSTICK_CLKSOURCE_HCLK;
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <SystemClock_Config+0x80>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <SystemClock_Config+0x80>)
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	6013      	str	r3, [r2, #0]
  LL_SetSystemCoreClock(72000000);
 80002da:	4804      	ldr	r0, [pc, #16]	; (80002ec <SystemClock_Config+0x7c>)
 80002dc:	f000 f8f0 	bl	80004c0 <LL_SetSystemCoreClock>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40022000 	.word	0x40022000
 80002e8:	40021000 	.word	0x40021000
 80002ec:	044aa200 	.word	0x044aa200
 80002f0:	e000e010 	.word	0xe000e010

080002f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <MX_GPIO_Init+0x24>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a06      	ldr	r2, [pc, #24]	; (8000318 <MX_GPIO_Init+0x24>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
  GPIOC->CRH |= GPIO_CRH_MODE13_0;
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <MX_GPIO_Init+0x28>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <MX_GPIO_Init+0x28>)
 800030a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800030e:	6053      	str	r3, [r2, #4]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	40021000 	.word	0x40021000
 800031c:	40011000 	.word	0x40011000

08000320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000330:	e7fe      	b.n	8000330 <HardFault_Handler+0x4>

08000332 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <MemManage_Handler+0x4>

08000338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <BusFault_Handler+0x4>

0800033e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <UsageFault_Handler+0x4>

08000344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000378:	4b15      	ldr	r3, [pc, #84]	; (80003d0 <SystemInit+0x5c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <SystemInit+0x5c>)
 800037e:	f043 0301 	orr.w	r3, r3, #1
 8000382:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <SystemInit+0x5c>)
 8000386:	685a      	ldr	r2, [r3, #4]
 8000388:	4911      	ldr	r1, [pc, #68]	; (80003d0 <SystemInit+0x5c>)
 800038a:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <SystemInit+0x60>)
 800038c:	4013      	ands	r3, r2
 800038e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <SystemInit+0x5c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <SystemInit+0x5c>)
 8000396:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800039a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800039e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003a0:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <SystemInit+0x5c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <SystemInit+0x5c>)
 80003a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003aa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003ac:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <SystemInit+0x5c>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <SystemInit+0x5c>)
 80003b2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003b6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003b8:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <SystemInit+0x5c>)
 80003ba:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003be:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <SystemInit+0x64>)
 80003c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000
 80003d4:	f8ff0000 	.word	0xf8ff0000
 80003d8:	e000ed00 	.word	0xe000ed00

080003dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80003dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80003de:	e003      	b.n	80003e8 <LoopCopyDataInit>

080003e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003e0:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80003e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003e6:	3104      	adds	r1, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80003e8:	480a      	ldr	r0, [pc, #40]	; (8000414 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80003ea:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80003ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80003ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80003f0:	d3f6      	bcc.n	80003e0 <CopyDataInit>
  ldr r2, =_sbss
 80003f2:	4a0a      	ldr	r2, [pc, #40]	; (800041c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80003f4:	e002      	b.n	80003fc <LoopFillZerobss>

080003f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80003f8:	f842 3b04 	str.w	r3, [r2], #4

080003fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80003fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000400:	d3f9      	bcc.n	80003f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000402:	f7ff ffb7 	bl	8000374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000406:	f000 f869 	bl	80004dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040a:	f7ff ff07 	bl	800021c <main>
  bx lr
 800040e:	4770      	bx	lr
  ldr r3, =_sidata
 8000410:	08000544 	.word	0x08000544
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000418:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 800041c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8000420:	20000020 	.word	0x20000020

08000424 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC1_2_IRQHandler>
	...

08000428 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	fbb2 f3f3 	udiv	r3, r2, r3
 800043a:	4a07      	ldr	r2, [pc, #28]	; (8000458 <LL_InitTick+0x30>)
 800043c:	3b01      	subs	r3, #1
 800043e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <LL_InitTick+0x30>)
 8000442:	2200      	movs	r2, #0
 8000444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <LL_InitTick+0x30>)
 8000448:	2205      	movs	r2, #5
 800044a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e000e010 	.word	0xe000e010

0800045c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000464:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f7ff ffdd 	bl	8000428 <LL_InitTick>
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000480:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <LL_mDelay+0x44>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000486:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800048e:	d00c      	beq.n	80004aa <LL_mDelay+0x32>
  {
    Delay++;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3301      	adds	r3, #1
 8000494:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000496:	e008      	b.n	80004aa <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <LL_mDelay+0x44>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d002      	beq.n	80004aa <LL_mDelay+0x32>
    {
      Delay--;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	607b      	str	r3, [r7, #4]
  while (Delay)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d1f3      	bne.n	8000498 <LL_mDelay+0x20>
    }
  }
}
 80004b0:	bf00      	nop
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000e010 	.word	0xe000e010

080004c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80004c8:	4a03      	ldr	r2, [pc, #12]	; (80004d8 <LL_SetSystemCoreClock+0x18>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6013      	str	r3, [r2, #0]
}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000000 	.word	0x20000000

080004dc <__libc_init_array>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	2500      	movs	r5, #0
 80004e0:	4e0c      	ldr	r6, [pc, #48]	; (8000514 <__libc_init_array+0x38>)
 80004e2:	4c0d      	ldr	r4, [pc, #52]	; (8000518 <__libc_init_array+0x3c>)
 80004e4:	1ba4      	subs	r4, r4, r6
 80004e6:	10a4      	asrs	r4, r4, #2
 80004e8:	42a5      	cmp	r5, r4
 80004ea:	d109      	bne.n	8000500 <__libc_init_array+0x24>
 80004ec:	f000 f81a 	bl	8000524 <_init>
 80004f0:	2500      	movs	r5, #0
 80004f2:	4e0a      	ldr	r6, [pc, #40]	; (800051c <__libc_init_array+0x40>)
 80004f4:	4c0a      	ldr	r4, [pc, #40]	; (8000520 <__libc_init_array+0x44>)
 80004f6:	1ba4      	subs	r4, r4, r6
 80004f8:	10a4      	asrs	r4, r4, #2
 80004fa:	42a5      	cmp	r5, r4
 80004fc:	d105      	bne.n	800050a <__libc_init_array+0x2e>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000504:	4798      	blx	r3
 8000506:	3501      	adds	r5, #1
 8000508:	e7ee      	b.n	80004e8 <__libc_init_array+0xc>
 800050a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800050e:	4798      	blx	r3
 8000510:	3501      	adds	r5, #1
 8000512:	e7f2      	b.n	80004fa <__libc_init_array+0x1e>
 8000514:	0800053c 	.word	0x0800053c
 8000518:	0800053c 	.word	0x0800053c
 800051c:	0800053c 	.word	0x0800053c
 8000520:	08000540 	.word	0x08000540

08000524 <_init>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr

08000530 <_fini>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr
