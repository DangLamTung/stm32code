
drone_board_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d48  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08008ed0  08008ed0  00018ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc4  08008fc4  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fcc  08008fcc  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08008fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000069c  200000a8  08009078  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08009078  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138a4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027da  00000000  00000000  00033978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001228  00000000  00000000  00036158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001100  00000000  00000000  00037380  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f0d9  00000000  00000000  00038480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd8e  00000000  00000000  00057559  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3694  00000000  00000000  000652e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012897b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005150  00000000  00000000  001289f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a8 	.word	0x200000a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008eb8 	.word	0x08008eb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ac 	.word	0x200000ac
 80001c4:	08008eb8 	.word	0x08008eb8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b972 	b.w	8000edc <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9e08      	ldr	r6, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	4688      	mov	r8, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14b      	bne.n	8000cb6 <__udivmoddi4+0xa6>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4615      	mov	r5, r2
 8000c22:	d967      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b14a      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2a:	f1c2 0720 	rsb	r7, r2, #32
 8000c2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c32:	fa20 f707 	lsr.w	r7, r0, r7
 8000c36:	4095      	lsls	r5, r2
 8000c38:	ea47 0803 	orr.w	r8, r7, r3
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c48:	fa1f fc85 	uxth.w	ip, r5
 8000c4c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c50:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c54:	fb07 f10c 	mul.w	r1, r7, ip
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18eb      	adds	r3, r5, r3
 8000c5e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c62:	f080 811b 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8118 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c6c:	3f02      	subs	r7, #2
 8000c6e:	442b      	add	r3, r5
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c84:	45a4      	cmp	ip, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8107 	bcs.w	8000ea0 <__udivmoddi4+0x290>
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	f240 8104 	bls.w	8000ea0 <__udivmoddi4+0x290>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	442c      	add	r4, r5
 8000c9c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca0:	eba4 040c 	sub.w	r4, r4, ip
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	b11e      	cbz	r6, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d909      	bls.n	8000cce <__udivmoddi4+0xbe>
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	f000 80eb 	beq.w	8000e96 <__udivmoddi4+0x286>
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc6:	4638      	mov	r0, r7
 8000cc8:	4639      	mov	r1, r7
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	fab3 f783 	clz	r7, r3
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d147      	bne.n	8000d66 <__udivmoddi4+0x156>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xd0>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 80fa 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4698      	mov	r8, r3
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d0e0      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000cee:	e9c6 4800 	strd	r4, r8, [r6]
 8000cf2:	e7dd      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000cf4:	b902      	cbnz	r2, 8000cf8 <__udivmoddi4+0xe8>
 8000cf6:	deff      	udf	#255	; 0xff
 8000cf8:	fab2 f282 	clz	r2, r2
 8000cfc:	2a00      	cmp	r2, #0
 8000cfe:	f040 808f 	bne.w	8000e20 <__udivmoddi4+0x210>
 8000d02:	1b49      	subs	r1, r1, r5
 8000d04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d08:	fa1f f885 	uxth.w	r8, r5
 8000d0c:	2701      	movs	r7, #1
 8000d0e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d12:	0c23      	lsrs	r3, r4, #16
 8000d14:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x124>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x122>
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d32:	4684      	mov	ip, r0
 8000d34:	1a59      	subs	r1, r3, r1
 8000d36:	b2a3      	uxth	r3, r4
 8000d38:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d40:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d44:	fb08 f800 	mul.w	r8, r8, r0
 8000d48:	45a0      	cmp	r8, r4
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x14c>
 8000d4c:	192c      	adds	r4, r5, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x14a>
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	f200 80b6 	bhi.w	8000ec6 <__udivmoddi4+0x2b6>
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	eba4 0408 	sub.w	r4, r4, r8
 8000d60:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d64:	e79f      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d66:	f1c7 0c20 	rsb	ip, r7, #32
 8000d6a:	40bb      	lsls	r3, r7
 8000d6c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d70:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d74:	fa01 f407 	lsl.w	r4, r1, r7
 8000d78:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d7c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d80:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d84:	4325      	orrs	r5, r4
 8000d86:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d8a:	0c2c      	lsrs	r4, r5, #16
 8000d8c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d90:	fa1f fa8e 	uxth.w	sl, lr
 8000d94:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d98:	fb09 f40a 	mul.w	r4, r9, sl
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	fa02 f207 	lsl.w	r2, r2, r7
 8000da2:	fa00 f107 	lsl.w	r1, r0, r7
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b0>
 8000da8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db0:	f080 8087 	bcs.w	8000ec2 <__udivmoddi4+0x2b2>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f240 8084 	bls.w	8000ec2 <__udivmoddi4+0x2b2>
 8000dba:	f1a9 0902 	sub.w	r9, r9, #2
 8000dbe:	4473      	add	r3, lr
 8000dc0:	1b1b      	subs	r3, r3, r4
 8000dc2:	b2ad      	uxth	r5, r5
 8000dc4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dcc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd4:	45a2      	cmp	sl, r4
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1da>
 8000dd8:	eb1e 0404 	adds.w	r4, lr, r4
 8000ddc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de0:	d26b      	bcs.n	8000eba <__udivmoddi4+0x2aa>
 8000de2:	45a2      	cmp	sl, r4
 8000de4:	d969      	bls.n	8000eba <__udivmoddi4+0x2aa>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4474      	add	r4, lr
 8000dea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	eba4 040a 	sub.w	r4, r4, sl
 8000df6:	454c      	cmp	r4, r9
 8000df8:	46c2      	mov	sl, r8
 8000dfa:	464b      	mov	r3, r9
 8000dfc:	d354      	bcc.n	8000ea8 <__udivmoddi4+0x298>
 8000dfe:	d051      	beq.n	8000ea4 <__udivmoddi4+0x294>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d069      	beq.n	8000ed8 <__udivmoddi4+0x2c8>
 8000e04:	ebb1 050a 	subs.w	r5, r1, sl
 8000e08:	eb64 0403 	sbc.w	r4, r4, r3
 8000e0c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e10:	40fd      	lsrs	r5, r7
 8000e12:	40fc      	lsrs	r4, r7
 8000e14:	ea4c 0505 	orr.w	r5, ip, r5
 8000e18:	e9c6 5400 	strd	r5, r4, [r6]
 8000e1c:	2700      	movs	r7, #0
 8000e1e:	e747      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e20:	f1c2 0320 	rsb	r3, r2, #32
 8000e24:	fa20 f703 	lsr.w	r7, r0, r3
 8000e28:	4095      	lsls	r5, r2
 8000e2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e32:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e36:	4338      	orrs	r0, r7
 8000e38:	0c01      	lsrs	r1, r0, #16
 8000e3a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3e:	fa1f f885 	uxth.w	r8, r5
 8000e42:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4a:	fb07 f308 	mul.w	r3, r7, r8
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x256>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e5c:	d22f      	bcs.n	8000ebe <__udivmoddi4+0x2ae>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d92d      	bls.n	8000ebe <__udivmoddi4+0x2ae>
 8000e62:	3f02      	subs	r7, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1acb      	subs	r3, r1, r3
 8000e68:	b281      	uxth	r1, r0
 8000e6a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e76:	fb00 f308 	mul.w	r3, r0, r8
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x27e>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e84:	d217      	bcs.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d915      	bls.n	8000eb6 <__udivmoddi4+0x2a6>
 8000e8a:	3802      	subs	r0, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1ac9      	subs	r1, r1, r3
 8000e90:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e94:	e73b      	b.n	8000d0e <__udivmoddi4+0xfe>
 8000e96:	4637      	mov	r7, r6
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e709      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e9c:	4607      	mov	r7, r0
 8000e9e:	e6e7      	b.n	8000c70 <__udivmoddi4+0x60>
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	e6fb      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea4:	4541      	cmp	r1, r8
 8000ea6:	d2ab      	bcs.n	8000e00 <__udivmoddi4+0x1f0>
 8000ea8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eac:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb0:	3801      	subs	r0, #1
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	e7a4      	b.n	8000e00 <__udivmoddi4+0x1f0>
 8000eb6:	4660      	mov	r0, ip
 8000eb8:	e7e9      	b.n	8000e8e <__udivmoddi4+0x27e>
 8000eba:	4618      	mov	r0, r3
 8000ebc:	e795      	b.n	8000dea <__udivmoddi4+0x1da>
 8000ebe:	4667      	mov	r7, ip
 8000ec0:	e7d1      	b.n	8000e66 <__udivmoddi4+0x256>
 8000ec2:	4681      	mov	r9, r0
 8000ec4:	e77c      	b.n	8000dc0 <__udivmoddi4+0x1b0>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	442c      	add	r4, r5
 8000eca:	e747      	b.n	8000d5c <__udivmoddi4+0x14c>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	442b      	add	r3, r5
 8000ed2:	e72f      	b.n	8000d34 <__udivmoddi4+0x124>
 8000ed4:	4638      	mov	r0, r7
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xda>
 8000ed8:	4637      	mov	r7, r6
 8000eda:	e6e9      	b.n	8000cb0 <__udivmoddi4+0xa0>

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <quaternion_rot>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

void quaternion_rot(float gx, float gy, float gz, float ax, float ay, float az,float dt){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	ed87 0a07 	vstr	s0, [r7, #28]
 8000eea:	edc7 0a06 	vstr	s1, [r7, #24]
 8000eee:	ed87 1a05 	vstr	s2, [r7, #20]
 8000ef2:	edc7 1a04 	vstr	s3, [r7, #16]
 8000ef6:	ed87 2a03 	vstr	s4, [r7, #12]
 8000efa:	edc7 2a02 	vstr	s5, [r7, #8]
 8000efe:	ed87 3a01 	vstr	s6, [r7, #4]

	qd0 = 0.5f * (-qr1 * gx - qr2 * gy - qr3 * gz)*dt;
 8000f02:	4b75      	ldr	r3, [pc, #468]	; (80010d8 <quaternion_rot+0x1f8>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	eeb1 7a67 	vneg.f32	s14, s15
 8000f0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f14:	4b71      	ldr	r3, [pc, #452]	; (80010dc <quaternion_rot+0x1fc>)
 8000f16:	edd3 6a00 	vldr	s13, [r3]
 8000f1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f26:	4b6e      	ldr	r3, [pc, #440]	; (80010e0 <quaternion_rot+0x200>)
 8000f28:	edd3 6a00 	vldr	s13, [r3]
 8000f2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f48:	4b66      	ldr	r3, [pc, #408]	; (80010e4 <quaternion_rot+0x204>)
 8000f4a:	edc3 7a00 	vstr	s15, [r3]
	qd1 = 0.5f * (qr0 * gx + qr2 * gz - qr3 * gy)*dt;
 8000f4e:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <quaternion_rot+0x208>)
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f5c:	4b5f      	ldr	r3, [pc, #380]	; (80010dc <quaternion_rot+0x1fc>)
 8000f5e:	edd3 6a00 	vldr	s13, [r3]
 8000f62:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f6e:	4b5c      	ldr	r3, [pc, #368]	; (80010e0 <quaternion_rot+0x200>)
 8000f70:	edd3 6a00 	vldr	s13, [r3]
 8000f74:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f90:	4b56      	ldr	r3, [pc, #344]	; (80010ec <quaternion_rot+0x20c>)
 8000f92:	edc3 7a00 	vstr	s15, [r3]
	qd2 = 0.5f * (qr0 * gy - qr1 * gz + qr3 * gx)*dt;
 8000f96:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <quaternion_rot+0x208>)
 8000f98:	ed93 7a00 	vldr	s14, [r3]
 8000f9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <quaternion_rot+0x1f8>)
 8000fa6:	edd3 6a00 	vldr	s13, [r3]
 8000faa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fb6:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <quaternion_rot+0x200>)
 8000fb8:	edd3 6a00 	vldr	s13, [r3]
 8000fbc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000fcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <quaternion_rot+0x210>)
 8000fda:	edc3 7a00 	vstr	s15, [r3]
	qd3 = 0.5f * (qr0 * gz + qr1 * gy - qr2 * gx)*dt;
 8000fde:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <quaternion_rot+0x208>)
 8000fe0:	ed93 7a00 	vldr	s14, [r3]
 8000fe4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fec:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <quaternion_rot+0x1f8>)
 8000fee:	edd3 6a00 	vldr	s13, [r3]
 8000ff2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ffa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ffe:	4b37      	ldr	r3, [pc, #220]	; (80010dc <quaternion_rot+0x1fc>)
 8001000:	edd3 6a00 	vldr	s13, [r3]
 8001004:	edd7 7a07 	vldr	s15, [r7, #28]
 8001008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800100c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001010:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001018:	edd7 7a01 	vldr	s15, [r7, #4]
 800101c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001020:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <quaternion_rot+0x214>)
 8001022:	edc3 7a00 	vstr	s15, [r3]
//		qr1 += qDot2 * (1.0f / sampleFreq);
//		qr2 += qDot3 * (1.0f / sampleFreq);
//		qr3 += qDot4 * (1.0f / sampleFreq);

//			// Normalise quaternion
			recipNorm = invSqrt(qr0 * qr0 + qr1 * qr1 + qr2 * qr2 + qr3 * qr3);
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <quaternion_rot+0x208>)
 8001028:	ed93 7a00 	vldr	s14, [r3]
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <quaternion_rot+0x208>)
 800102e:	edd3 7a00 	vldr	s15, [r3]
 8001032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001036:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <quaternion_rot+0x1f8>)
 8001038:	edd3 6a00 	vldr	s13, [r3]
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <quaternion_rot+0x1f8>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001046:	ee37 7a27 	vadd.f32	s14, s14, s15
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <quaternion_rot+0x1fc>)
 800104c:	edd3 6a00 	vldr	s13, [r3]
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <quaternion_rot+0x1fc>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800105a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <quaternion_rot+0x200>)
 8001060:	edd3 6a00 	vldr	s13, [r3]
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <quaternion_rot+0x200>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800106e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	f000 f83f 	bl	80010f8 <invSqrt>
 800107a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
			qr0 *= recipNorm;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <quaternion_rot+0x208>)
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <quaternion_rot+0x208>)
 800108e:	edc3 7a00 	vstr	s15, [r3]
			qr1 *= recipNorm;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <quaternion_rot+0x1f8>)
 8001094:	ed93 7a00 	vldr	s14, [r3]
 8001098:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800109c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <quaternion_rot+0x1f8>)
 80010a2:	edc3 7a00 	vstr	s15, [r3]
			qr2 *= recipNorm;
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <quaternion_rot+0x1fc>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <quaternion_rot+0x1fc>)
 80010b6:	edc3 7a00 	vstr	s15, [r3]
			qr3 *= recipNorm;
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <quaternion_rot+0x200>)
 80010bc:	ed93 7a00 	vldr	s14, [r3]
 80010c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <quaternion_rot+0x200>)
 80010ca:	edc3 7a00 	vstr	s15, [r3]
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	; 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200000ec 	.word	0x200000ec
 80010dc:	200000d4 	.word	0x200000d4
 80010e0:	200000c8 	.word	0x200000c8
 80010e4:	200000e8 	.word	0x200000e8
 80010e8:	200000e0 	.word	0x200000e0
 80010ec:	200000d0 	.word	0x200000d0
 80010f0:	200000d8 	.word	0x200000d8
 80010f4:	200000dc 	.word	0x200000dc

080010f8 <invSqrt>:

float invSqrt(float x) {
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001102:	edd7 7a01 	vldr	s15, [r7, #4]
 8001106:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800110a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800110e:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	105a      	asrs	r2, r3, #1
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <invSqrt+0x74>)
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001130:	ed97 7a04 	vldr	s14, [r7, #16]
 8001134:	edd7 7a05 	vldr	s15, [r7, #20]
 8001138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001144:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001148:	ee37 7a67 	vsub.f32	s14, s14, s15
 800114c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001154:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	ee07 3a90 	vmov	s15, r3
}
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	371c      	adds	r7, #28
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	5f3759df 	.word	0x5f3759df

08001170 <init_ESC>:

      /* Infinite loop */


}
void init_ESC(){
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start(&htim4);
 8001174:	481f      	ldr	r0, [pc, #124]	; (80011f4 <init_ESC+0x84>)
 8001176:	f005 f9dc 	bl	8006532 <HAL_TIM_Base_Start>
	  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800117a:	2100      	movs	r1, #0
 800117c:	481e      	ldr	r0, [pc, #120]	; (80011f8 <init_ESC+0x88>)
 800117e:	f005 fa4b 	bl	8006618 <HAL_TIM_PWM_Start>
	  HAL_TIM_Base_Start_IT(&htim3);
 8001182:	481e      	ldr	r0, [pc, #120]	; (80011fc <init_ESC+0x8c>)
 8001184:	f005 f9f9 	bl	800657a <HAL_TIM_Base_Start_IT>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001188:	2104      	movs	r1, #4
 800118a:	481b      	ldr	r0, [pc, #108]	; (80011f8 <init_ESC+0x88>)
 800118c:	f005 fa44 	bl	8006618 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001190:	2108      	movs	r1, #8
 8001192:	4819      	ldr	r0, [pc, #100]	; (80011f8 <init_ESC+0x88>)
 8001194:	f005 fa40 	bl	8006618 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001198:	210c      	movs	r1, #12
 800119a:	4817      	ldr	r0, [pc, #92]	; (80011f8 <init_ESC+0x88>)
 800119c:	f005 fa3c 	bl	8006618 <HAL_TIM_PWM_Start>
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <init_ESC+0x88>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 1000);
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <init_ESC+0x88>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011b2:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 1000);
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <init_ESC+0x88>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011bc:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 1000);
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <init_ESC+0x88>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40
	    esc_value1 = 1000;
 80011c8:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <init_ESC+0x90>)
 80011ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011ce:	801a      	strh	r2, [r3, #0]
	    esc_value2 = 1000;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <init_ESC+0x94>)
 80011d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011d6:	801a      	strh	r2, [r3, #0]
	    esc_value3 = 1000;
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <init_ESC+0x98>)
 80011da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011de:	801a      	strh	r2, [r3, #0]
	    esc_value4 = 1000;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <init_ESC+0x9c>)
 80011e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e6:	801a      	strh	r2, [r3, #0]

	    HAL_Delay(3000);
 80011e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011ec:	f003 f8e0 	bl	80043b0 <HAL_Delay>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000218 	.word	0x20000218
 80011f8:	20000334 	.word	0x20000334
 80011fc:	200002ac 	.word	0x200002ac
 8001200:	20000108 	.word	0x20000108
 8001204:	200000f0 	.word	0x200000f0
 8001208:	20000144 	.word	0x20000144
 800120c:	2000015c 	.word	0x2000015c

08001210 <set_ESC>:

void set_ESC(){
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,esc_value1);
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <set_ESC+0x38>)
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <set_ESC+0x3c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, esc_value2);
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <set_ESC+0x40>)
 8001220:	881a      	ldrh	r2, [r3, #0]
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <set_ESC+0x3c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,esc_value3);
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <set_ESC+0x44>)
 800122a:	881a      	ldrh	r2, [r3, #0]
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <set_ESC+0x3c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	63da      	str	r2, [r3, #60]	; 0x3c
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,esc_value4);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <set_ESC+0x48>)
 8001234:	881a      	ldrh	r2, [r3, #0]
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <set_ESC+0x3c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000108 	.word	0x20000108
 800124c:	20000334 	.word	0x20000334
 8001250:	200000f0 	.word	0x200000f0
 8001254:	20000144 	.word	0x20000144
 8001258:	2000015c 	.word	0x2000015c

0800125c <main>:
/**
  * @brief  The app9lication entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001262:	f003 f833 	bl	80042cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001266:	f000 f849 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126a:	f000 faed 	bl	8001848 <MX_GPIO_Init>
  MX_TIM1_Init();
 800126e:	f000 f927 	bl	80014c0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001272:	f000 f8c1 	bl	80013f8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001276:	f000 fabd 	bl	80017f4 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 800127a:	f000 fa17 	bl	80016ac <MX_TIM4_Init>
  MX_SPI1_Init();
 800127e:	f000 f8e9 	bl	8001454 <MX_SPI1_Init>
  MX_UART4_Init();
 8001282:	f000 fa61 	bl	8001748 <MX_UART4_Init>
  MX_CRC_Init();
 8001286:	f000 f8a3 	bl	80013d0 <MX_CRC_Init>
  MX_TIM3_Init();
 800128a:	f000 f9c1 	bl	8001610 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800128e:	f000 fa87 	bl	80017a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart3, &Rx_data, 1);
 8001292:	2201      	movs	r2, #1
 8001294:	4913      	ldr	r1, [pc, #76]	; (80012e4 <main+0x88>)
 8001296:	4814      	ldr	r0, [pc, #80]	; (80012e8 <main+0x8c>)
 8001298:	f006 f982 	bl	80075a0 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	4911      	ldr	r1, [pc, #68]	; (80012e4 <main+0x88>)
 80012a0:	4812      	ldr	r0, [pc, #72]	; (80012ec <main+0x90>)
 80012a2:	f006 f97d 	bl	80075a0 <HAL_UART_Receive_IT>
  init_MPU();
 80012a6:	f000 fd37 	bl	8001d18 <init_MPU>
//   initBMP();
   HAL_Delay(100);
 80012aa:	2064      	movs	r0, #100	; 0x64
 80012ac:	f003 f880 	bl	80043b0 <HAL_Delay>

//

   calibration_IMU();
 80012b0:	f002 f962 	bl	8003578 <calibration_IMU>
   init_ESC();
 80012b4:	f7ff ff5c 	bl	8001170 <init_ESC>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  start = htim4.Instance->CNT;
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <main+0x94>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	461a      	mov	r2, r3
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <main+0x98>)
 80012c2:	601a      	str	r2, [r3, #0]
      uint8_t temp;
	  temp = process_MPU();
 80012c4:	f000 ff3c 	bl	8002140 <process_MPU>
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
	  set_ESC();
 80012cc:	f7ff ffa0 	bl	8001210 <set_ESC>

	  end = htim4.Instance->CNT;
 80012d0:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <main+0x94>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <main+0x9c>)
 80012da:	601a      	str	r2, [r3, #0]
////      a = get_alt_bmp();
	  HAL_Delay(1);
 80012dc:	2001      	movs	r0, #1
 80012de:	f003 f867 	bl	80043b0 <HAL_Delay>
  {
 80012e2:	e7e9      	b.n	80012b8 <main+0x5c>
 80012e4:	200002a8 	.word	0x200002a8
 80012e8:	20000258 	.word	0x20000258
 80012ec:	200002f4 	.word	0x200002f4
 80012f0:	20000218 	.word	0x20000218
 80012f4:	20000414 	.word	0x20000414
 80012f8:	200002ec 	.word	0x200002ec

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0320 	add.w	r3, r7, #32
 8001306:	2230      	movs	r2, #48	; 0x30
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f006 ffc4 	bl	8008298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <SystemClock_Config+0xcc>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	4a27      	ldr	r2, [pc, #156]	; (80013c8 <SystemClock_Config+0xcc>)
 800132a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132e:	6413      	str	r3, [r2, #64]	; 0x40
 8001330:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <SystemClock_Config+0xcc>)
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133c:	2300      	movs	r3, #0
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <SystemClock_Config+0xd0>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <SystemClock_Config+0xd0>)
 8001346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <SystemClock_Config+0xd0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800135c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2302      	movs	r3, #2
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800136a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800136c:	2306      	movs	r3, #6
 800136e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001370:	23a8      	movs	r3, #168	; 0xa8
 8001372:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001378:	2307      	movs	r3, #7
 800137a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	4618      	mov	r0, r3
 8001382:	f004 fc0b 	bl	8005b9c <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800138c:	f000 fb82 	bl	8001a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001390:	230f      	movs	r3, #15
 8001392:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001394:	2302      	movs	r3, #2
 8001396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800139c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2105      	movs	r1, #5
 80013ae:	4618      	mov	r0, r3
 80013b0:	f004 fe64 	bl	800607c <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013ba:	f000 fb6b 	bl	8001a94 <Error_Handler>
  }
}
 80013be:	bf00      	nop
 80013c0:	3750      	adds	r7, #80	; 0x50
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40007000 	.word	0x40007000

080013d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_CRC_Init+0x20>)
 80013d6:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <MX_CRC_Init+0x24>)
 80013d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_CRC_Init+0x20>)
 80013dc:	f003 f91b 	bl	8004616 <HAL_CRC_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80013e6:	f000 fb55 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200002a0 	.word	0x200002a0
 80013f4:	40023000 	.word	0x40023000

080013f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_I2C1_Init+0x50>)
 80013fe:	4a13      	ldr	r2, [pc, #76]	; (800144c <MX_I2C1_Init+0x54>)
 8001400:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <MX_I2C1_Init+0x50>)
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_I2C1_Init+0x58>)
 8001406:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_I2C1_Init+0x50>)
 8001416:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800141a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_I2C1_Init+0x50>)
 8001436:	f003 fafb 	bl	8004a30 <HAL_I2C_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001440:	f000 fb28 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000168 	.word	0x20000168
 800144c:	40005400 	.word	0x40005400
 8001450:	00061a80 	.word	0x00061a80

08001454 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_SPI1_Init+0x64>)
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <MX_SPI1_Init+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001484:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_SPI1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_SPI1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_SPI1_Init+0x64>)
 80014a0:	220a      	movs	r2, #10
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_SPI1_Init+0x64>)
 80014a6:	f004 ffb5 	bl	8006414 <HAL_SPI_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014b0:	f000 faf0 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	200003b4 	.word	0x200003b4
 80014bc:	40013000 	.word	0x40013000

080014c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b092      	sub	sp, #72	; 0x48
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
 80014e0:	615a      	str	r2, [r3, #20]
 80014e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2220      	movs	r2, #32
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 fed4 	bl	8008298 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <MX_TIM1_Init+0x148>)
 80014f2:	4a46      	ldr	r2, [pc, #280]	; (800160c <MX_TIM1_Init+0x14c>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80014f6:	4b44      	ldr	r3, [pc, #272]	; (8001608 <MX_TIM1_Init+0x148>)
 80014f8:	22a7      	movs	r2, #167	; 0xa7
 80014fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b42      	ldr	r3, [pc, #264]	; (8001608 <MX_TIM1_Init+0x148>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8001502:	4b41      	ldr	r3, [pc, #260]	; (8001608 <MX_TIM1_Init+0x148>)
 8001504:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001508:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <MX_TIM1_Init+0x148>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001510:	4b3d      	ldr	r3, [pc, #244]	; (8001608 <MX_TIM1_Init+0x148>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <MX_TIM1_Init+0x148>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800151c:	483a      	ldr	r0, [pc, #232]	; (8001608 <MX_TIM1_Init+0x148>)
 800151e:	f005 f850 	bl	80065c2 <HAL_TIM_PWM_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001528:	f000 fab4 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001534:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001538:	4619      	mov	r1, r3
 800153a:	4833      	ldr	r0, [pc, #204]	; (8001608 <MX_TIM1_Init+0x148>)
 800153c:	f005 fe68 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001546:	f000 faa5 	bl	8001a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800154a:	2360      	movs	r3, #96	; 0x60
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001552:	2300      	movs	r3, #0
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001556:	2300      	movs	r3, #0
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	4826      	ldr	r0, [pc, #152]	; (8001608 <MX_TIM1_Init+0x148>)
 8001570:	f005 f998 	bl	80068a4 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800157a:	f000 fa8b 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	2204      	movs	r2, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4820      	ldr	r0, [pc, #128]	; (8001608 <MX_TIM1_Init+0x148>)
 8001588:	f005 f98c 	bl	80068a4 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001592:	f000 fa7f 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	2208      	movs	r2, #8
 800159c:	4619      	mov	r1, r3
 800159e:	481a      	ldr	r0, [pc, #104]	; (8001608 <MX_TIM1_Init+0x148>)
 80015a0:	f005 f980 	bl	80068a4 <HAL_TIM_PWM_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80015aa:	f000 fa73 	bl	8001a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b2:	220c      	movs	r2, #12
 80015b4:	4619      	mov	r1, r3
 80015b6:	4814      	ldr	r0, [pc, #80]	; (8001608 <MX_TIM1_Init+0x148>)
 80015b8:	f005 f974 	bl	80068a4 <HAL_TIM_PWM_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80015c2:	f000 fa67 	bl	8001a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4807      	ldr	r0, [pc, #28]	; (8001608 <MX_TIM1_Init+0x148>)
 80015ea:	f005 fe8d 	bl	8007308 <HAL_TIMEx_ConfigBreakDeadTime>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80015f4:	f000 fa4e 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015f8:	4803      	ldr	r0, [pc, #12]	; (8001608 <MX_TIM1_Init+0x148>)
 80015fa:	f002 fcad 	bl	8003f58 <HAL_TIM_MspPostInit>

}
 80015fe:	bf00      	nop
 8001600:	3748      	adds	r7, #72	; 0x48
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000334 	.word	0x20000334
 800160c:	40010000 	.word	0x40010000

08001610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <MX_TIM3_Init+0x94>)
 800162e:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <MX_TIM3_Init+0x98>)
 8001630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_TIM3_Init+0x94>)
 8001634:	22a7      	movs	r2, #167	; 0xa7
 8001636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM3_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_TIM3_Init+0x94>)
 8001640:	f242 720f 	movw	r2, #9999	; 0x270f
 8001644:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_TIM3_Init+0x94>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_TIM3_Init+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_TIM3_Init+0x94>)
 8001654:	f004 ff42 	bl	80064dc <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800165e:	f000 fa19 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_TIM3_Init+0x94>)
 8001670:	f005 f9de 	bl	8006a30 <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800167a:	f000 fa0b 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_TIM3_Init+0x94>)
 800168c:	f005 fdc0 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001696:	f000 f9fd 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200002ac 	.word	0x200002ac
 80016a8:	40000400 	.word	0x40000400

080016ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM4_Init+0x94>)
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <MX_TIM4_Init+0x98>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_TIM4_Init+0x94>)
 80016d0:	22a7      	movs	r2, #167	; 0xa7
 80016d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM4_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_TIM4_Init+0x94>)
 80016dc:	f242 7210 	movw	r2, #10000	; 0x2710
 80016e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_TIM4_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <MX_TIM4_Init+0x94>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016ee:	4814      	ldr	r0, [pc, #80]	; (8001740 <MX_TIM4_Init+0x94>)
 80016f0:	f004 fef4 	bl	80064dc <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80016fa:	f000 f9cb 	bl	8001a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	4619      	mov	r1, r3
 800170a:	480d      	ldr	r0, [pc, #52]	; (8001740 <MX_TIM4_Init+0x94>)
 800170c:	f005 f990 	bl	8006a30 <HAL_TIM_ConfigClockSource>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001716:	f000 f9bd 	bl	8001a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001722:	463b      	mov	r3, r7
 8001724:	4619      	mov	r1, r3
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <MX_TIM4_Init+0x94>)
 8001728:	f005 fd72 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001732:	f000 f9af 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000218 	.word	0x20000218
 8001744:	40000800 	.word	0x40000800

08001748 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_UART4_Init+0x4c>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <MX_UART4_Init+0x50>)
 8001750:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 100000;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <MX_UART4_Init+0x4c>)
 8001754:	4a11      	ldr	r2, [pc, #68]	; (800179c <MX_UART4_Init+0x54>)
 8001756:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_UART4_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <MX_UART4_Init+0x4c>)
 8001760:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001764:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_UART4_Init+0x4c>)
 8001768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_UART4_Init+0x4c>)
 8001770:	220c      	movs	r2, #12
 8001772:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001774:	4b07      	ldr	r3, [pc, #28]	; (8001794 <MX_UART4_Init+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_UART4_Init+0x4c>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001780:	4804      	ldr	r0, [pc, #16]	; (8001794 <MX_UART4_Init+0x4c>)
 8001782:	f005 fe27 	bl	80073d4 <HAL_UART_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_UART4_Init+0x48>
  {
    Error_Handler();
 800178c:	f000 f982 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000374 	.word	0x20000374
 8001798:	40004c00 	.word	0x40004c00
 800179c:	000186a0 	.word	0x000186a0

080017a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_USART1_UART_Init+0x50>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART1_UART_Init+0x4c>)
 80017d8:	f005 fdfc 	bl	80073d4 <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017e2:	f000 f957 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200002f4 	.word	0x200002f4
 80017f0:	40011000 	.word	0x40011000

080017f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_USART3_UART_Init+0x4c>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <MX_USART3_UART_Init+0x50>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <MX_USART3_UART_Init+0x4c>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_USART3_UART_Init+0x4c>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_USART3_UART_Init+0x4c>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <MX_USART3_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_USART3_UART_Init+0x4c>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b08      	ldr	r3, [pc, #32]	; (8001840 <MX_USART3_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_USART3_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_USART3_UART_Init+0x4c>)
 800182c:	f005 fdd2 	bl	80073d4 <HAL_UART_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001836:	f000 f92d 	bl	8001a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000258 	.word	0x20000258
 8001844:	40004800 	.word	0x40004800

08001848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b3a      	ldr	r3, [pc, #232]	; (800194c <MX_GPIO_Init+0x104>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a39      	ldr	r2, [pc, #228]	; (800194c <MX_GPIO_Init+0x104>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <MX_GPIO_Init+0x104>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b33      	ldr	r3, [pc, #204]	; (800194c <MX_GPIO_Init+0x104>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a32      	ldr	r2, [pc, #200]	; (800194c <MX_GPIO_Init+0x104>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b30      	ldr	r3, [pc, #192]	; (800194c <MX_GPIO_Init+0x104>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b2c      	ldr	r3, [pc, #176]	; (800194c <MX_GPIO_Init+0x104>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a2b      	ldr	r2, [pc, #172]	; (800194c <MX_GPIO_Init+0x104>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <MX_GPIO_Init+0x104>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <MX_GPIO_Init+0x104>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a24      	ldr	r2, [pc, #144]	; (800194c <MX_GPIO_Init+0x104>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <MX_GPIO_Init+0x104>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IRQ_GPIO_Port, IRQ_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2110      	movs	r1, #16
 80018d2:	481f      	ldr	r0, [pc, #124]	; (8001950 <MX_GPIO_Init+0x108>)
 80018d4:	f003 f878 	bl	80049c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2130      	movs	r1, #48	; 0x30
 80018dc:	481d      	ldr	r0, [pc, #116]	; (8001954 <MX_GPIO_Init+0x10c>)
 80018de:	f003 f873 	bl	80049c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f243 0104 	movw	r1, #12292	; 0x3004
 80018e8:	481b      	ldr	r0, [pc, #108]	; (8001958 <MX_GPIO_Init+0x110>)
 80018ea:	f003 f86d 	bl	80049c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80018ee:	2310      	movs	r3, #16
 80018f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fa:	2302      	movs	r3, #2
 80018fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4812      	ldr	r0, [pc, #72]	; (8001950 <MX_GPIO_Init+0x108>)
 8001906:	f002 fec5 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 800190a:	2330      	movs	r3, #48	; 0x30
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001916:	2302      	movs	r3, #2
 8001918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	480c      	ldr	r0, [pc, #48]	; (8001954 <MX_GPIO_Init+0x10c>)
 8001922:	f002 feb7 	bl	8004694 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 8001926:	f243 0304 	movw	r3, #12292	; 0x3004
 800192a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <MX_GPIO_Init+0x110>)
 8001940:	f002 fea8 	bl	8004694 <HAL_GPIO_Init>

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020800 	.word	0x40020800
 8001958:	40020400 	.word	0x40020400

0800195c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001968:	4839      	ldr	r0, [pc, #228]	; (8001a50 <HAL_UART_RxCpltCallback+0xf4>)
 800196a:	f003 f846 	bl	80049fa <HAL_GPIO_TogglePin>
	if (huart->Instance == USART3)  //current UART
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a38      	ldr	r2, [pc, #224]	; (8001a54 <HAL_UART_RxCpltCallback+0xf8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d12b      	bne.n	80019d0 <HAL_UART_RxCpltCallback+0x74>
	{
		if(Rx_data[0] == 's'){
 8001978:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b73      	cmp	r3, #115	; 0x73
 800197e:	d111      	bne.n	80019a4 <HAL_UART_RxCpltCallback+0x48>
			i = 0;
 8001980:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_UART_RxCpltCallback+0x100>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e007      	b.n	800199c <HAL_UART_RxCpltCallback+0x40>
            	 Rx_buffer[count] = 0x00;
 800198c:	4a34      	ldr	r2, [pc, #208]	; (8001a60 <HAL_UART_RxCpltCallback+0x104>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4413      	add	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3301      	adds	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b05      	cmp	r3, #5
 80019a0:	ddf4      	ble.n	800198c <HAL_UART_RxCpltCallback+0x30>
 80019a2:	e015      	b.n	80019d0 <HAL_UART_RxCpltCallback+0x74>
		}
		else{
			if(Rx_data[0] != 'e'){
 80019a4:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b65      	cmp	r3, #101	; 0x65
 80019aa:	d00b      	beq.n	80019c4 <HAL_UART_RxCpltCallback+0x68>
			 Rx_buffer[i] = Rx_data[0];
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <HAL_UART_RxCpltCallback+0x100>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a29      	ldr	r2, [pc, #164]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 80019b2:	7811      	ldrb	r1, [r2, #0]
 80019b4:	4a2a      	ldr	r2, [pc, #168]	; (8001a60 <HAL_UART_RxCpltCallback+0x104>)
 80019b6:	54d1      	strb	r1, [r2, r3]
			 i++;
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_UART_RxCpltCallback+0x100>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	4a27      	ldr	r2, [pc, #156]	; (8001a5c <HAL_UART_RxCpltCallback+0x100>)
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e005      	b.n	80019d0 <HAL_UART_RxCpltCallback+0x74>
//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

			}
			else{
				sbus_decode(Rx_buffer);
 80019c4:	4826      	ldr	r0, [pc, #152]	; (8001a60 <HAL_UART_RxCpltCallback+0x104>)
 80019c6:	f002 f92b 	bl	8003c20 <sbus_decode>
                Rx_data[0] = 0;
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
//				HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
			}
		}
	}
	if (huart->Instance == USART1)  //current UART
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <HAL_UART_RxCpltCallback+0x108>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d12b      	bne.n	8001a32 <HAL_UART_RxCpltCallback+0xd6>
	{
		if(Rx_data[0] == 's'){
 80019da:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b73      	cmp	r3, #115	; 0x73
 80019e0:	d111      	bne.n	8001a06 <HAL_UART_RxCpltCallback+0xaa>
			i = 0;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_UART_RxCpltCallback+0x100>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	e007      	b.n	80019fe <HAL_UART_RxCpltCallback+0xa2>
            	 Rx_buffer[count] = 0x00;
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <HAL_UART_RxCpltCallback+0x104>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4413      	add	r3, r2
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
             for(int count =0; count< 6; count++)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	3301      	adds	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	ddf4      	ble.n	80019ee <HAL_UART_RxCpltCallback+0x92>
 8001a04:	e015      	b.n	8001a32 <HAL_UART_RxCpltCallback+0xd6>
		}
		else{
			if(Rx_data[0] != 'e'){
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b65      	cmp	r3, #101	; 0x65
 8001a0c:	d00b      	beq.n	8001a26 <HAL_UART_RxCpltCallback+0xca>
			 Rx_buffer[i] = Rx_data[0];
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <HAL_UART_RxCpltCallback+0x100>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 8001a14:	7811      	ldrb	r1, [r2, #0]
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <HAL_UART_RxCpltCallback+0x104>)
 8001a18:	54d1      	strb	r1, [r2, r3]
			 i++;
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_UART_RxCpltCallback+0x100>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <HAL_UART_RxCpltCallback+0x100>)
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e005      	b.n	8001a32 <HAL_UART_RxCpltCallback+0xd6>
//			 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);

			}
			else{
				sbus_decode(Rx_buffer);
 8001a26:	480e      	ldr	r0, [pc, #56]	; (8001a60 <HAL_UART_RxCpltCallback+0x104>)
 8001a28:	f002 f8fa 	bl	8003c20 <sbus_decode>
                Rx_data[0] = 0;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
//				HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
			}
		}
	}
	 HAL_UART_Receive_IT(&huart1, (uint8_t *) Rx_data, 1);
 8001a32:	2201      	movs	r2, #1
 8001a34:	4908      	ldr	r1, [pc, #32]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 8001a36:	480c      	ldr	r0, [pc, #48]	; (8001a68 <HAL_UART_RxCpltCallback+0x10c>)
 8001a38:	f005 fdb2 	bl	80075a0 <HAL_UART_Receive_IT>
	 HAL_UART_Receive_IT(&huart3, (uint8_t *) Rx_data, 1);
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4906      	ldr	r1, [pc, #24]	; (8001a58 <HAL_UART_RxCpltCallback+0xfc>)
 8001a40:	480a      	ldr	r0, [pc, #40]	; (8001a6c <HAL_UART_RxCpltCallback+0x110>)
 8001a42:	f005 fdad 	bl	80075a0 <HAL_UART_Receive_IT>
}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40004800 	.word	0x40004800
 8001a58:	200002a8 	.word	0x200002a8
 8001a5c:	200002f0 	.word	0x200002f0
 8001a60:	2000040c 	.word	0x2000040c
 8001a64:	40011000 	.word	0x40011000
 8001a68:	200002f4 	.word	0x200002f4
 8001a6c:	20000258 	.word	0x20000258

08001a70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d102      	bne.n	8001a88 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		print_raw(0);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f001 ff92 	bl	80039ac <print_raw>
	}
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40000400 	.word	0x40000400

08001a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	0000      	movs	r0, r0
 8001aa4:	0000      	movs	r0, r0
	...

08001aa8 <ftoa>:
union float_con{
	float number;
	uint8_t byte_array[4];
};
char * ftoa(double f, char * buf, int precision)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b08b      	sub	sp, #44	; 0x2c
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0b02 	vstr	d0, [r7, #8]
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
	char * ptr = buf;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b0a      	cmp	r3, #10
 8001ac2:	dd01      	ble.n	8001ac8 <ftoa+0x20>
		precision = MAX_PRECISION;
 8001ac4:	230a      	movs	r3, #10
 8001ac6:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ad4:	f7fe ffae 	bl	8000a34 <__aeabi_dcmplt>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00a      	beq.n	8001af4 <ftoa+0x4c>
	{
		f = -f;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ae8:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	627a      	str	r2, [r7, #36]	; 0x24
 8001af0:	222d      	movs	r2, #45	; 0x2d
 8001af2:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da4f      	bge.n	8001b9a <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4b80      	ldr	r3, [pc, #512]	; (8001d00 <ftoa+0x258>)
 8001b00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b04:	f7fe ff96 	bl	8000a34 <__aeabi_dcmplt>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <ftoa+0x6c>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	e042      	b.n	8001b9a <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <ftoa+0x25c>)
 8001b1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b1e:	f7fe ff89 	bl	8000a34 <__aeabi_dcmplt>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <ftoa+0x86>
 8001b28:	2305      	movs	r3, #5
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	e035      	b.n	8001b9a <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <ftoa+0x260>)
 8001b34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b38:	f7fe ff7c 	bl	8000a34 <__aeabi_dcmplt>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d002      	beq.n	8001b48 <ftoa+0xa0>
 8001b42:	2304      	movs	r3, #4
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	e028      	b.n	8001b9a <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4b6f      	ldr	r3, [pc, #444]	; (8001d0c <ftoa+0x264>)
 8001b4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b52:	f7fe ff6f 	bl	8000a34 <__aeabi_dcmplt>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <ftoa+0xba>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	e01b      	b.n	8001b9a <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 8001b62:	a363      	add	r3, pc, #396	; (adr r3, 8001cf0 <ftoa+0x248>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b6c:	f7fe ff62 	bl	8000a34 <__aeabi_dcmplt>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <ftoa+0xd4>
 8001b76:	2302      	movs	r3, #2
 8001b78:	603b      	str	r3, [r7, #0]
 8001b7a:	e00e      	b.n	8001b9a <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8001b7c:	a35e      	add	r3, pc, #376	; (adr r3, 8001cf8 <ftoa+0x250>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b86:	f7fe ff55 	bl	8000a34 <__aeabi_dcmplt>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <ftoa+0xee>
 8001b90:	2301      	movs	r3, #1
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	e001      	b.n	8001b9a <ftoa+0xf2>
		else precision = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00f      	beq.n	8001bc0 <ftoa+0x118>
		f += rounders[precision];
 8001ba0:	4a5b      	ldr	r2, [pc, #364]	; (8001d10 <ftoa+0x268>)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bb4:	f7fe fb16 	bl	80001e4 <__adddf3>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	460c      	mov	r4, r1
 8001bbc:	e9c7 3402 	strd	r3, r4, [r7, #8]

	// integer part...
	intPart = f;
 8001bc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bc4:	f7fe ff74 	bl	8000ab0 <__aeabi_d2iz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8001bcc:	69f8      	ldr	r0, [r7, #28]
 8001bce:	f7fe fc55 	bl	800047c <__aeabi_i2d>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4623      	mov	r3, r4
 8001bda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bde:	f7fe faff 	bl	80001e0 <__aeabi_dsub>
 8001be2:	4603      	mov	r3, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	if (!intPart)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d105      	bne.n	8001bfc <ftoa+0x154>
		*ptr++ = '0';
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	627a      	str	r2, [r7, #36]	; 0x24
 8001bf6:	2230      	movs	r2, #48	; 0x30
 8001bf8:	701a      	strb	r2, [r3, #0]
 8001bfa:	e038      	b.n	8001c6e <ftoa+0x1c6>
	else
	{
		// save start pointer
		p = ptr;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 8001c00:	e01a      	b.n	8001c38 <ftoa+0x190>
		{
			*p++ = '0' + intPart % 10;
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <ftoa+0x26c>)
 8001c06:	fb83 1302 	smull	r1, r3, r3, r2
 8001c0a:	1099      	asrs	r1, r3, #2
 8001c0c:	17d3      	asrs	r3, r2, #31
 8001c0e:	1ac9      	subs	r1, r1, r3
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	1ad1      	subs	r1, r2, r3
 8001c1a:	b2ca      	uxtb	r2, r1
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	1c59      	adds	r1, r3, #1
 8001c20:	6239      	str	r1, [r7, #32]
 8001c22:	3230      	adds	r2, #48	; 0x30
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	4a3a      	ldr	r2, [pc, #232]	; (8001d14 <ftoa+0x26c>)
 8001c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c30:	1092      	asrs	r2, r2, #2
 8001c32:	17db      	asrs	r3, r3, #31
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	61fb      	str	r3, [r7, #28]
		while (intPart)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1e1      	bne.n	8001c02 <ftoa+0x15a>
		}

		// save end pos
		p1 = p;
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8001c42:	e00e      	b.n	8001c62 <ftoa+0x1ba>
		{
			c = *--p;
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	623b      	str	r3, [r7, #32]
 8001c4a:	6a3b      	ldr	r3, [r7, #32]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	781a      	ldrb	r2, [r3, #0]
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8001c5e:	7dfa      	ldrb	r2, [r7, #23]
 8001c60:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8001c62:	6a3a      	ldr	r2, [r7, #32]
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d8ec      	bhi.n	8001c44 <ftoa+0x19c>
		}

		// restore end pos
		ptr = p1;
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d032      	beq.n	8001cda <ftoa+0x232>
	{
		// place decimal point
		*ptr++ = '.';
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	627a      	str	r2, [r7, #36]	; 0x24
 8001c7a:	222e      	movs	r2, #46	; 0x2e
 8001c7c:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8001c7e:	e027      	b.n	8001cd0 <ftoa+0x228>
		{
			f *= 10.0;
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <ftoa+0x25c>)
 8001c86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c8a:	f7fe fc61 	bl	8000550 <__aeabi_dmul>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	e9c7 3402 	strd	r3, r4, [r7, #8]
			c = f;
 8001c96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c9a:	f7fe ff31 	bl	8000b00 <__aeabi_d2uiz>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	627a      	str	r2, [r7, #36]	; 0x24
 8001ca8:	7dfa      	ldrb	r2, [r7, #23]
 8001caa:	3230      	adds	r2, #48	; 0x30
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	701a      	strb	r2, [r3, #0]
			f -= c;
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fbe2 	bl	800047c <__aeabi_i2d>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	460c      	mov	r4, r1
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cc4:	f7fe fa8c 	bl	80001e0 <__aeabi_dsub>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	460c      	mov	r4, r1
 8001ccc:	e9c7 3402 	strd	r3, r4, [r7, #8]
		while (precision--)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	603a      	str	r2, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1d2      	bne.n	8001c80 <ftoa+0x1d8>
		}
	}

	// terminating zero
	*ptr = 0;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]

	return buf;
 8001ce0:	687b      	ldr	r3, [r7, #4]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	372c      	adds	r7, #44	; 0x2c
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd90      	pop	{r4, r7, pc}
 8001cea:	bf00      	nop
 8001cec:	f3af 8000 	nop.w
 8001cf0:	00000000 	.word	0x00000000
 8001cf4:	40c38800 	.word	0x40c38800
 8001cf8:	00000000 	.word	0x00000000
 8001cfc:	40f86a00 	.word	0x40f86a00
 8001d00:	3ff00000 	.word	0x3ff00000
 8001d04:	40240000 	.word	0x40240000
 8001d08:	40590000 	.word	0x40590000
 8001d0c:	408f4000 	.word	0x408f4000
 8001d10:	08008f08 	.word	0x08008f08
 8001d14:	66666667 	.word	0x66666667

08001d18 <init_MPU>:
  memcpy(bytes_temp, thing.bytes, 4);
}



char init_MPU(){
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b091      	sub	sp, #68	; 0x44
 8001d1c:	af02      	add	r7, sp, #8
    char status = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 8001d24:	23d0      	movs	r3, #208	; 0xd0
 8001d26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t magnet_address = MAG_ADRRESS;
 8001d2a:	2318      	movs	r3, #24
 8001d2c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

    qr0 = 1.0;
 8001d30:	4b89      	ldr	r3, [pc, #548]	; (8001f58 <init_MPU+0x240>)
 8001d32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d36:	601a      	str	r2, [r3, #0]

  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001d38:	e00f      	b.n	8001d5a <init_MPU+0x42>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d40:	4886      	ldr	r0, [pc, #536]	; (8001f5c <init_MPU+0x244>)
 8001d42:	f002 fe41 	bl	80049c8 <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 8001d46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4a:	f002 fb31 	bl	80043b0 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d54:	4881      	ldr	r0, [pc, #516]	; (8001f5c <init_MPU+0x244>)
 8001d56:	f002 fe37 	bl	80049c8 <HAL_GPIO_WritePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001d5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d5e:	b299      	uxth	r1, r3
 8001d60:	2302      	movs	r3, #2
 8001d62:	2203      	movs	r2, #3
 8001d64:	487e      	ldr	r0, [pc, #504]	; (8001f60 <init_MPU+0x248>)
 8001d66:	f003 fabf 	bl	80052e8 <HAL_I2C_IsDeviceReady>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1e4      	bne.n	8001d3a <init_MPU+0x22>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8001d70:	2201      	movs	r2, #1
 8001d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d76:	4879      	ldr	r0, [pc, #484]	; (8001f5c <init_MPU+0x244>)
 8001d78:	f002 fe26 	bl	80049c8 <HAL_GPIO_WritePin>


//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 8001d7c:	236b      	movs	r3, #107	; 0x6b
 8001d7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = 0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001d88:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	4871      	ldr	r0, [pc, #452]	; (8001f60 <init_MPU+0x248>)
 8001d9c:	f002 ff80 	bl	8004ca0 <HAL_I2C_Master_Transmit>
	{

	}

	/* Set data sample rate */
	d[0] = SAMPLE_RATE;
 8001da0:	2319      	movs	r3, #25
 8001da2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = sample_1khz;
 8001da6:	2307      	movs	r3, #7
 8001da8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001dac:	bf00      	nop
 8001dae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001db2:	b299      	uxth	r1, r3
 8001db4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	4867      	ldr	r0, [pc, #412]	; (8001f60 <init_MPU+0x248>)
 8001dc2:	f002 ff6d 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <init_MPU+0x96>

	d[0] = GYRO_CONFIG;
 8001dcc:	231b      	movs	r3, #27
 8001dce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = gyro_con;
 8001dd2:	2318      	movs	r3, #24
 8001dd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001dd8:	bf00      	nop
 8001dda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001dde:	b299      	uxth	r1, r3
 8001de0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2302      	movs	r3, #2
 8001dec:	485c      	ldr	r0, [pc, #368]	; (8001f60 <init_MPU+0x248>)
 8001dee:	f002 ff57 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <init_MPU+0xc2>

	d[0] = ACCEL_CONFIG;
 8001df8:	231c      	movs	r3, #28
 8001dfa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x00;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001e04:	bf00      	nop
 8001e06:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e0a:	b299      	uxth	r1, r3
 8001e0c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2302      	movs	r3, #2
 8001e18:	4851      	ldr	r0, [pc, #324]	; (8001f60 <init_MPU+0x248>)
 8001e1a:	f002 ff41 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <init_MPU+0xee>

	d[0] = ACCEL_CONFIG2;
 8001e24:	231d      	movs	r3, #29
 8001e26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x0A;
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001e30:	bf00      	nop
 8001e32:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e36:	b299      	uxth	r1, r3
 8001e38:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2302      	movs	r3, #2
 8001e44:	4846      	ldr	r0, [pc, #280]	; (8001f60 <init_MPU+0x248>)
 8001e46:	f002 ff2b 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f0      	bne.n	8001e32 <init_MPU+0x11a>


	d[0] = INIT_ENB;
 8001e50:	2338      	movs	r3, #56	; 0x38
 8001e52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = inter;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001e5c:	bf00      	nop
 8001e5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e62:	b299      	uxth	r1, r3
 8001e64:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	483b      	ldr	r0, [pc, #236]	; (8001f60 <init_MPU+0x248>)
 8001e72:	f002 ff15 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <init_MPU+0x146>

	d[0] = USER_CTRL;
 8001e7c:	236a      	movs	r3, #106	; 0x6a
 8001e7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = zero;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001e88:	bf00      	nop
 8001e8a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001e8e:	b299      	uxth	r1, r3
 8001e90:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	4830      	ldr	r0, [pc, #192]	; (8001f60 <init_MPU+0x248>)
 8001e9e:	f002 feff 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <init_MPU+0x172>

	d[0] = INT_BYPASS;
 8001ea8:	2337      	movs	r3, #55	; 0x37
 8001eaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = stop_i2c_master;
 8001eae:	2322      	movs	r3, #34	; 0x22
 8001eb0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001eb4:	bf00      	nop
 8001eb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001eba:	b299      	uxth	r1, r3
 8001ebc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	4825      	ldr	r0, [pc, #148]	; (8001f60 <init_MPU+0x248>)
 8001eca:	f002 fee9 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <init_MPU+0x19e>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8001ed4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	23c8      	movs	r3, #200	; 0xc8
 8001edc:	2203      	movs	r2, #3
 8001ede:	4820      	ldr	r0, [pc, #128]	; (8001f60 <init_MPU+0x248>)
 8001ee0:	f003 fa02 	bl	80052e8 <HAL_I2C_IsDeviceReady>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01e      	beq.n	8001f28 <init_MPU+0x210>
	    	strcpy( rx_data, "No Device \r \n");
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <init_MPU+0x24c>)
 8001ef0:	461c      	mov	r4, r3
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ef6:	c407      	stmia	r4!, {r0, r1, r2}
 8001ef8:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f00:	4816      	ldr	r0, [pc, #88]	; (8001f5c <init_MPU+0x244>)
 8001f02:	f002 fd61 	bl	80049c8 <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f0c:	4813      	ldr	r0, [pc, #76]	; (8001f5c <init_MPU+0x244>)
 8001f0e:	f002 fd5b 	bl	80049c8 <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 8001f12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f16:	f002 fa4b 	bl	80043b0 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f20:	480e      	ldr	r0, [pc, #56]	; (8001f5c <init_MPU+0x244>)
 8001f22:	f002 fd51 	bl	80049c8 <HAL_GPIO_WritePin>
 8001f26:	e0f4      	b.n	8002112 <init_MPU+0x3fa>
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 8001f28:	230a      	movs	r3, #10
 8001f2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	  	d[1] = ROM_MODE;
 8001f2e:	231f      	movs	r3, #31
 8001f30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 8001f34:	bf00      	nop
 8001f36:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f3a:	b299      	uxth	r1, r3
 8001f3c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001f40:	2302      	movs	r3, #2
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	2302      	movs	r3, #2
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <init_MPU+0x248>)
 8001f48:	f002 feaa 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f1      	bne.n	8001f36 <init_MPU+0x21e>

	    	  //	HAL_Delay(100);
	    	  	 for(long i = 1000000; i>0 ;i--){
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <init_MPU+0x250>)
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
 8001f56:	e00c      	b.n	8001f72 <init_MPU+0x25a>
 8001f58:	200000e0 	.word	0x200000e0
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	20000168 	.word	0x20000168
 8001f64:	08008ed0 	.word	0x08008ed0
 8001f68:	000f4240 	.word	0x000f4240
 8001f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	637b      	str	r3, [r7, #52]	; 0x34
 8001f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	dcf9      	bgt.n	8001f6c <init_MPU+0x254>

	    	  		    	      }

	    	  	uint8_t sensitive = ASAX_AD;
 8001f78:	2310      	movs	r3, #16
 8001f7a:	71fb      	strb	r3, [r7, #7]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 8001f7c:	bf00      	nop
 8001f7e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001f82:	b299      	uxth	r1, r3
 8001f84:	1dfa      	adds	r2, r7, #7
 8001f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	4864      	ldr	r0, [pc, #400]	; (8002120 <init_MPU+0x408>)
 8001f90:	f002 fe86 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f1      	bne.n	8001f7e <init_MPU+0x266>
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &asa,3, 1000) != HAL_OK);
 8001f9a:	bf00      	nop
 8001f9c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001fa0:	b299      	uxth	r1, r3
 8001fa2:	1d3a      	adds	r2, r7, #4
 8001fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2303      	movs	r3, #3
 8001fac:	485c      	ldr	r0, [pc, #368]	; (8002120 <init_MPU+0x408>)
 8001fae:	f002 ff75 	bl	8004e9c <HAL_I2C_Master_Receive>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f1      	bne.n	8001f9c <init_MPU+0x284>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8001fb8:	793b      	ldrb	r3, [r7, #4]
 8001fba:	3b80      	subs	r3, #128	; 0x80
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fa5d 	bl	800047c <__aeabi_i2d>
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	4b57      	ldr	r3, [pc, #348]	; (8002124 <init_MPU+0x40c>)
 8001fc8:	f7fe fac2 	bl	8000550 <__aeabi_dmul>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	460c      	mov	r4, r1
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	4621      	mov	r1, r4
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <init_MPU+0x410>)
 8001fda:	f7fe fbe3 	bl	80007a4 <__aeabi_ddiv>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b50      	ldr	r3, [pc, #320]	; (800212c <init_MPU+0x414>)
 8001fec:	f7fe f8fa 	bl	80001e4 <__adddf3>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	f7fe fda2 	bl	8000b40 <__aeabi_d2f>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <init_MPU+0x418>)
 8002000:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 8002002:	797b      	ldrb	r3, [r7, #5]
 8002004:	3b80      	subs	r3, #128	; 0x80
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fa38 	bl	800047c <__aeabi_i2d>
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b44      	ldr	r3, [pc, #272]	; (8002124 <init_MPU+0x40c>)
 8002012:	f7fe fa9d 	bl	8000550 <__aeabi_dmul>
 8002016:	4603      	mov	r3, r0
 8002018:	460c      	mov	r4, r1
 800201a:	4618      	mov	r0, r3
 800201c:	4621      	mov	r1, r4
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <init_MPU+0x410>)
 8002024:	f7fe fbbe 	bl	80007a4 <__aeabi_ddiv>
 8002028:	4603      	mov	r3, r0
 800202a:	460c      	mov	r4, r1
 800202c:	4618      	mov	r0, r3
 800202e:	4621      	mov	r1, r4
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	4b3d      	ldr	r3, [pc, #244]	; (800212c <init_MPU+0x414>)
 8002036:	f7fe f8d5 	bl	80001e4 <__adddf3>
 800203a:	4603      	mov	r3, r0
 800203c:	460c      	mov	r4, r1
 800203e:	4618      	mov	r0, r3
 8002040:	4621      	mov	r1, r4
 8002042:	f7fe fd7d 	bl	8000b40 <__aeabi_d2f>
 8002046:	4602      	mov	r2, r0
 8002048:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <init_MPU+0x41c>)
 800204a:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 800204c:	79bb      	ldrb	r3, [r7, #6]
 800204e:	3b80      	subs	r3, #128	; 0x80
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa13 	bl	800047c <__aeabi_i2d>
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	4b32      	ldr	r3, [pc, #200]	; (8002124 <init_MPU+0x40c>)
 800205c:	f7fe fa78 	bl	8000550 <__aeabi_dmul>
 8002060:	4603      	mov	r3, r0
 8002062:	460c      	mov	r4, r1
 8002064:	4618      	mov	r0, r3
 8002066:	4621      	mov	r1, r4
 8002068:	f04f 0200 	mov.w	r2, #0
 800206c:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <init_MPU+0x410>)
 800206e:	f7fe fb99 	bl	80007a4 <__aeabi_ddiv>
 8002072:	4603      	mov	r3, r0
 8002074:	460c      	mov	r4, r1
 8002076:	4618      	mov	r0, r3
 8002078:	4621      	mov	r1, r4
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b2b      	ldr	r3, [pc, #172]	; (800212c <init_MPU+0x414>)
 8002080:	f7fe f8b0 	bl	80001e4 <__adddf3>
 8002084:	4603      	mov	r3, r0
 8002086:	460c      	mov	r4, r1
 8002088:	4618      	mov	r0, r3
 800208a:	4621      	mov	r1, r4
 800208c:	f7fe fd58 	bl	8000b40 <__aeabi_d2f>
 8002090:	4602      	mov	r2, r0
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <init_MPU+0x420>)
 8002094:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 8002096:	230a      	movs	r3, #10
 8002098:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = zero;
 800209c:	2300      	movs	r3, #0
 800209e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80020a2:	bf00      	nop
 80020a4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80020a8:	b299      	uxth	r1, r3
 80020aa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80020ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2302      	movs	r3, #2
 80020b6:	481a      	ldr	r0, [pc, #104]	; (8002120 <init_MPU+0x408>)
 80020b8:	f002 fdf2 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <init_MPU+0x38c>

	    	      for(long i = 1000000; i>0 ;i--){
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <init_MPU+0x424>)
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
 80020c6:	e002      	b.n	80020ce <init_MPU+0x3b6>
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	3b01      	subs	r3, #1
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	dcf9      	bgt.n	80020c8 <init_MPU+0x3b0>

	    	      }

	    	      d[0] = CNTL1_AD;
 80020d4:	230a      	movs	r3, #10
 80020d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = 0x16;
 80020da:	2316      	movs	r3, #22
 80020dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80020e0:	bf00      	nop
 80020e2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80020e6:	b299      	uxth	r1, r3
 80020e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80020ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2302      	movs	r3, #2
 80020f4:	480a      	ldr	r0, [pc, #40]	; (8002120 <init_MPU+0x408>)
 80020f6:	f002 fdd3 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <init_MPU+0x3ca>
	    	      for(long i = 1000000; i>0 ;i--){
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <init_MPU+0x424>)
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002104:	e002      	b.n	800210c <init_MPU+0x3f4>
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	3b01      	subs	r3, #1
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210e:	2b00      	cmp	r3, #0
 8002110:	dcf9      	bgt.n	8002106 <init_MPU+0x3ee>

	    	    }
	    	      //HAL_Delay(100);
	      }
  return status;
 8002112:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002116:	4618      	mov	r0, r3
 8002118:	373c      	adds	r7, #60	; 0x3c
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop
 8002120:	20000168 	.word	0x20000168
 8002124:	3fe00000 	.word	0x3fe00000
 8002128:	40600000 	.word	0x40600000
 800212c:	3ff00000 	.word	0x3ff00000
 8002130:	20000730 	.word	0x20000730
 8002134:	200004fc 	.word	0x200004fc
 8002138:	20000728 	.word	0x20000728
 800213c:	000f4240 	.word	0x000f4240

08002140 <process_MPU>:


uint8_t process_MPU(){
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	b0a1      	sub	sp, #132	; 0x84
 8002144:	af02      	add	r7, sp, #8
	uint8_t mag_ava = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	uint8_t data[13];
	uint8_t mag_data[7];

	uint8_t status;
	uint8_t reg = ACCEL_XOUT_H;
 800214c:	233b      	movs	r3, #59	; 0x3b
 800214e:	77bb      	strb	r3, [r7, #30]
	uint8_t device_address = MPU_ADDRESS;
 8002150:	23d0      	movs	r3, #208	; 0xd0
 8002152:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	uint8_t magnet_address = MAG_ADRRESS;
 8002156:	2318      	movs	r3, #24
 8002158:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	start = htim4.Instance->CNT;
 800215c:	4bc4      	ldr	r3, [pc, #784]	; (8002470 <process_MPU+0x330>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	461a      	mov	r2, r3
 8002164:	4bc3      	ldr	r3, [pc, #780]	; (8002474 <process_MPU+0x334>)
 8002166:	601a      	str	r2, [r3, #0]
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8002168:	bf00      	nop
 800216a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800216e:	b299      	uxth	r1, r3
 8002170:	f107 021e 	add.w	r2, r7, #30
 8002174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2301      	movs	r3, #1
 800217c:	48be      	ldr	r0, [pc, #760]	; (8002478 <process_MPU+0x338>)
 800217e:	f002 fd8f 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <process_MPU+0x2a>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8002188:	bf00      	nop
 800218a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800218e:	b299      	uxth	r1, r3
 8002190:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	230e      	movs	r3, #14
 800219c:	48b6      	ldr	r0, [pc, #728]	; (8002478 <process_MPU+0x338>)
 800219e:	f002 fe7d 	bl	8004e9c <HAL_I2C_Master_Receive>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <process_MPU+0x4a>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 80021a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80021ac:	021b      	lsls	r3, r3, #8
 80021ae:	b21a      	sxth	r2, r3
 80021b0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c2:	4bae      	ldr	r3, [pc, #696]	; (800247c <process_MPU+0x33c>)
 80021c4:	edc3 7a00 	vstr	s15, [r3]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 80021c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e2:	4ba7      	ldr	r3, [pc, #668]	; (8002480 <process_MPU+0x340>)
 80021e4:	edc3 7a00 	vstr	s15, [r3]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 80021e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	b21a      	sxth	r2, r3
 80021f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002202:	4ba0      	ldr	r3, [pc, #640]	; (8002484 <process_MPU+0x344>)
 8002204:	edc3 7a00 	vstr	s15, [r3]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8002208:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b21a      	sxth	r2, r3
 8002210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002214:	b21b      	sxth	r3, r3
 8002216:	4313      	orrs	r3, r2
 8002218:	b21b      	sxth	r3, r3
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002222:	4b99      	ldr	r3, [pc, #612]	; (8002488 <process_MPU+0x348>)
 8002224:	edc3 7a00 	vstr	s15, [r3]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8002228:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800222c:	021b      	lsls	r3, r3, #8
 800222e:	b21a      	sxth	r2, r3
 8002230:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21b      	sxth	r3, r3
 800223a:	ee07 3a90 	vmov	s15, r3
 800223e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002242:	4b92      	ldr	r3, [pc, #584]	; (800248c <process_MPU+0x34c>)
 8002244:	edc3 7a00 	vstr	s15, [r3]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8002248:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	b21a      	sxth	r2, r3
 8002250:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002254:	b21b      	sxth	r3, r3
 8002256:	4313      	orrs	r3, r2
 8002258:	b21b      	sxth	r3, r3
 800225a:	ee07 3a90 	vmov	s15, r3
 800225e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <process_MPU+0x350>)
 8002264:	edc3 7a00 	vstr	s15, [r3]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8002268:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	b21a      	sxth	r2, r3
 8002270:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002274:	b21b      	sxth	r3, r3
 8002276:	4313      	orrs	r3, r2
 8002278:	b21b      	sxth	r3, r3
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002282:	4b84      	ldr	r3, [pc, #528]	; (8002494 <process_MPU+0x354>)
 8002284:	edc3 7a00 	vstr	s15, [r3]

	Acc_x = (Acc_x - bAx )/16384.0;
 8002288:	4b7c      	ldr	r3, [pc, #496]	; (800247c <process_MPU+0x33c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f907 	bl	80004a0 <__aeabi_f2d>
 8002292:	4b81      	ldr	r3, [pc, #516]	; (8002498 <process_MPU+0x358>)
 8002294:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002298:	461a      	mov	r2, r3
 800229a:	4623      	mov	r3, r4
 800229c:	f7fd ffa0 	bl	80001e0 <__aeabi_dsub>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	4618      	mov	r0, r3
 80022a6:	4621      	mov	r1, r4
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	4b7b      	ldr	r3, [pc, #492]	; (800249c <process_MPU+0x35c>)
 80022ae:	f7fe fa79 	bl	80007a4 <__aeabi_ddiv>
 80022b2:	4603      	mov	r3, r0
 80022b4:	460c      	mov	r4, r1
 80022b6:	4618      	mov	r0, r3
 80022b8:	4621      	mov	r1, r4
 80022ba:	f7fe fc41 	bl	8000b40 <__aeabi_d2f>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b6e      	ldr	r3, [pc, #440]	; (800247c <process_MPU+0x33c>)
 80022c2:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y - bAy)/16384.0;
 80022c4:	4b6e      	ldr	r3, [pc, #440]	; (8002480 <process_MPU+0x340>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f8e9 	bl	80004a0 <__aeabi_f2d>
 80022ce:	4b74      	ldr	r3, [pc, #464]	; (80024a0 <process_MPU+0x360>)
 80022d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4623      	mov	r3, r4
 80022d8:	f7fd ff82 	bl	80001e0 <__aeabi_dsub>
 80022dc:	4603      	mov	r3, r0
 80022de:	460c      	mov	r4, r1
 80022e0:	4618      	mov	r0, r3
 80022e2:	4621      	mov	r1, r4
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	4b6c      	ldr	r3, [pc, #432]	; (800249c <process_MPU+0x35c>)
 80022ea:	f7fe fa5b 	bl	80007a4 <__aeabi_ddiv>
 80022ee:	4603      	mov	r3, r0
 80022f0:	460c      	mov	r4, r1
 80022f2:	4618      	mov	r0, r3
 80022f4:	4621      	mov	r1, r4
 80022f6:	f7fe fc23 	bl	8000b40 <__aeabi_d2f>
 80022fa:	4602      	mov	r2, r0
 80022fc:	4b60      	ldr	r3, [pc, #384]	; (8002480 <process_MPU+0x340>)
 80022fe:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z - bAz)/16384.0;
 8002300:	4b60      	ldr	r3, [pc, #384]	; (8002484 <process_MPU+0x344>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f8cb 	bl	80004a0 <__aeabi_f2d>
 800230a:	4b66      	ldr	r3, [pc, #408]	; (80024a4 <process_MPU+0x364>)
 800230c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002310:	461a      	mov	r2, r3
 8002312:	4623      	mov	r3, r4
 8002314:	f7fd ff64 	bl	80001e0 <__aeabi_dsub>
 8002318:	4603      	mov	r3, r0
 800231a:	460c      	mov	r4, r1
 800231c:	4618      	mov	r0, r3
 800231e:	4621      	mov	r1, r4
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	4b5d      	ldr	r3, [pc, #372]	; (800249c <process_MPU+0x35c>)
 8002326:	f7fe fa3d 	bl	80007a4 <__aeabi_ddiv>
 800232a:	4603      	mov	r3, r0
 800232c:	460c      	mov	r4, r1
 800232e:	4618      	mov	r0, r3
 8002330:	4621      	mov	r1, r4
 8002332:	f7fe fc05 	bl	8000b40 <__aeabi_d2f>
 8002336:	4602      	mov	r2, r0
 8002338:	4b52      	ldr	r3, [pc, #328]	; (8002484 <process_MPU+0x344>)
 800233a:	601a      	str	r2, [r3, #0]

	Gyro_x = (Gyro_x - bGx)/16.4;
 800233c:	4b53      	ldr	r3, [pc, #332]	; (800248c <process_MPU+0x34c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f8ad 	bl	80004a0 <__aeabi_f2d>
 8002346:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <process_MPU+0x368>)
 8002348:	e9d3 3400 	ldrd	r3, r4, [r3]
 800234c:	461a      	mov	r2, r3
 800234e:	4623      	mov	r3, r4
 8002350:	f7fd ff46 	bl	80001e0 <__aeabi_dsub>
 8002354:	4603      	mov	r3, r0
 8002356:	460c      	mov	r4, r1
 8002358:	4618      	mov	r0, r3
 800235a:	4621      	mov	r1, r4
 800235c:	a33e      	add	r3, pc, #248	; (adr r3, 8002458 <process_MPU+0x318>)
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	f7fe fa1f 	bl	80007a4 <__aeabi_ddiv>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	4618      	mov	r0, r3
 800236c:	4621      	mov	r1, r4
 800236e:	f7fe fbe7 	bl	8000b40 <__aeabi_d2f>
 8002372:	4602      	mov	r2, r0
 8002374:	4b45      	ldr	r3, [pc, #276]	; (800248c <process_MPU+0x34c>)
 8002376:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y - bGy)/16.4;
 8002378:	4b45      	ldr	r3, [pc, #276]	; (8002490 <process_MPU+0x350>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f88f 	bl	80004a0 <__aeabi_f2d>
 8002382:	4b4a      	ldr	r3, [pc, #296]	; (80024ac <process_MPU+0x36c>)
 8002384:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002388:	461a      	mov	r2, r3
 800238a:	4623      	mov	r3, r4
 800238c:	f7fd ff28 	bl	80001e0 <__aeabi_dsub>
 8002390:	4603      	mov	r3, r0
 8002392:	460c      	mov	r4, r1
 8002394:	4618      	mov	r0, r3
 8002396:	4621      	mov	r1, r4
 8002398:	a32f      	add	r3, pc, #188	; (adr r3, 8002458 <process_MPU+0x318>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f7fe fa01 	bl	80007a4 <__aeabi_ddiv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	460c      	mov	r4, r1
 80023a6:	4618      	mov	r0, r3
 80023a8:	4621      	mov	r1, r4
 80023aa:	f7fe fbc9 	bl	8000b40 <__aeabi_d2f>
 80023ae:	4602      	mov	r2, r0
 80023b0:	4b37      	ldr	r3, [pc, #220]	; (8002490 <process_MPU+0x350>)
 80023b2:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z - bGz)/16.4;
 80023b4:	4b37      	ldr	r3, [pc, #220]	; (8002494 <process_MPU+0x354>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe f871 	bl	80004a0 <__aeabi_f2d>
 80023be:	4b3c      	ldr	r3, [pc, #240]	; (80024b0 <process_MPU+0x370>)
 80023c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4623      	mov	r3, r4
 80023c8:	f7fd ff0a 	bl	80001e0 <__aeabi_dsub>
 80023cc:	4603      	mov	r3, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	4618      	mov	r0, r3
 80023d2:	4621      	mov	r1, r4
 80023d4:	a320      	add	r3, pc, #128	; (adr r3, 8002458 <process_MPU+0x318>)
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	f7fe f9e3 	bl	80007a4 <__aeabi_ddiv>
 80023de:	4603      	mov	r3, r0
 80023e0:	460c      	mov	r4, r1
 80023e2:	4618      	mov	r0, r3
 80023e4:	4621      	mov	r1, r4
 80023e6:	f7fe fbab 	bl	8000b40 <__aeabi_d2f>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <process_MPU+0x354>)
 80023ee:	601a      	str	r2, [r3, #0]


    reg = 0x02;
 80023f0:	2302      	movs	r3, #2
 80023f2:	77bb      	strb	r3, [r7, #30]

	                w = Acc_x - (-1.9502)*w1 - 0.9514*w2;
 80023f4:	4b21      	ldr	r3, [pc, #132]	; (800247c <process_MPU+0x33c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fe f851 	bl	80004a0 <__aeabi_f2d>
 80023fe:	4604      	mov	r4, r0
 8002400:	460d      	mov	r5, r1
 8002402:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <process_MPU+0x374>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f84a 	bl	80004a0 <__aeabi_f2d>
 800240c:	a314      	add	r3, pc, #80	; (adr r3, 8002460 <process_MPU+0x320>)
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	f7fe f89d 	bl	8000550 <__aeabi_dmul>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4620      	mov	r0, r4
 800241c:	4629      	mov	r1, r5
 800241e:	f7fd fee1 	bl	80001e4 <__adddf3>
 8002422:	4603      	mov	r3, r0
 8002424:	460c      	mov	r4, r1
 8002426:	4625      	mov	r5, r4
 8002428:	461c      	mov	r4, r3
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <process_MPU+0x378>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f836 	bl	80004a0 <__aeabi_f2d>
 8002434:	a30c      	add	r3, pc, #48	; (adr r3, 8002468 <process_MPU+0x328>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fe f889 	bl	8000550 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fd fecb 	bl	80001e0 <__aeabi_dsub>
 800244a:	4603      	mov	r3, r0
 800244c:	460c      	mov	r4, r1
 800244e:	4618      	mov	r0, r3
 8002450:	4621      	mov	r1, r4
 8002452:	f7fe fb75 	bl	8000b40 <__aeabi_d2f>
 8002456:	e031      	b.n	80024bc <process_MPU+0x37c>
 8002458:	66666666 	.word	0x66666666
 800245c:	40306666 	.word	0x40306666
 8002460:	ea4a8c15 	.word	0xea4a8c15
 8002464:	3fff3404 	.word	0x3fff3404
 8002468:	69ad42c4 	.word	0x69ad42c4
 800246c:	3fee71de 	.word	0x3fee71de
 8002470:	20000218 	.word	0x20000218
 8002474:	20000414 	.word	0x20000414
 8002478:	20000168 	.word	0x20000168
 800247c:	200004e0 	.word	0x200004e0
 8002480:	20000488 	.word	0x20000488
 8002484:	20000420 	.word	0x20000420
 8002488:	200004b0 	.word	0x200004b0
 800248c:	20000444 	.word	0x20000444
 8002490:	200006f8 	.word	0x200006f8
 8002494:	200004d0 	.word	0x200004d0
 8002498:	200006d8 	.word	0x200006d8
 800249c:	40d00000 	.word	0x40d00000
 80024a0:	200004e8 	.word	0x200004e8
 80024a4:	20000710 	.word	0x20000710
 80024a8:	20000508 	.word	0x20000508
 80024ac:	20000458 	.word	0x20000458
 80024b0:	20000718 	.word	0x20000718
 80024b4:	20000438 	.word	0x20000438
 80024b8:	20000500 	.word	0x20000500
 80024bc:	4602      	mov	r2, r0
 80024be:	4bc6      	ldr	r3, [pc, #792]	; (80027d8 <process_MPU+0x698>)
 80024c0:	601a      	str	r2, [r3, #0]
	                y1 = (w*1 + w1*1.7994 + 1*w2)*0.0003;
 80024c2:	4bc5      	ldr	r3, [pc, #788]	; (80027d8 <process_MPU+0x698>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fd ffea 	bl	80004a0 <__aeabi_f2d>
 80024cc:	4604      	mov	r4, r0
 80024ce:	460d      	mov	r5, r1
 80024d0:	4bc2      	ldr	r3, [pc, #776]	; (80027dc <process_MPU+0x69c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd ffe3 	bl	80004a0 <__aeabi_f2d>
 80024da:	a3ab      	add	r3, pc, #684	; (adr r3, 8002788 <process_MPU+0x648>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fe f836 	bl	8000550 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4620      	mov	r0, r4
 80024ea:	4629      	mov	r1, r5
 80024ec:	f7fd fe7a 	bl	80001e4 <__adddf3>
 80024f0:	4603      	mov	r3, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	4625      	mov	r5, r4
 80024f6:	461c      	mov	r4, r3
 80024f8:	4bb9      	ldr	r3, [pc, #740]	; (80027e0 <process_MPU+0x6a0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fd ffcf 	bl	80004a0 <__aeabi_f2d>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4620      	mov	r0, r4
 8002508:	4629      	mov	r1, r5
 800250a:	f7fd fe6b 	bl	80001e4 <__adddf3>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	4618      	mov	r0, r3
 8002514:	4621      	mov	r1, r4
 8002516:	a39e      	add	r3, pc, #632	; (adr r3, 8002790 <process_MPU+0x650>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	f7fe f818 	bl	8000550 <__aeabi_dmul>
 8002520:	4603      	mov	r3, r0
 8002522:	460c      	mov	r4, r1
 8002524:	4618      	mov	r0, r3
 8002526:	4621      	mov	r1, r4
 8002528:	f7fe fb0a 	bl	8000b40 <__aeabi_d2f>
 800252c:	4602      	mov	r2, r0
 800252e:	4bad      	ldr	r3, [pc, #692]	; (80027e4 <process_MPU+0x6a4>)
 8002530:	601a      	str	r2, [r3, #0]
	                w2 = w1;
 8002532:	4baa      	ldr	r3, [pc, #680]	; (80027dc <process_MPU+0x69c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4aaa      	ldr	r2, [pc, #680]	; (80027e0 <process_MPU+0x6a0>)
 8002538:	6013      	str	r3, [r2, #0]
	                w1 = w;
 800253a:	4ba7      	ldr	r3, [pc, #668]	; (80027d8 <process_MPU+0x698>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4aa7      	ldr	r2, [pc, #668]	; (80027dc <process_MPU+0x69c>)
 8002540:	6013      	str	r3, [r2, #0]

	                w_ = Acc_y - (-1.9502)*w1_ - 0.9514*w2_;
 8002542:	4ba9      	ldr	r3, [pc, #676]	; (80027e8 <process_MPU+0x6a8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7fd ffaa 	bl	80004a0 <__aeabi_f2d>
 800254c:	4604      	mov	r4, r0
 800254e:	460d      	mov	r5, r1
 8002550:	4ba6      	ldr	r3, [pc, #664]	; (80027ec <process_MPU+0x6ac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ffa3 	bl	80004a0 <__aeabi_f2d>
 800255a:	a38f      	add	r3, pc, #572	; (adr r3, 8002798 <process_MPU+0x658>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fd fff6 	bl	8000550 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4620      	mov	r0, r4
 800256a:	4629      	mov	r1, r5
 800256c:	f7fd fe3a 	bl	80001e4 <__adddf3>
 8002570:	4603      	mov	r3, r0
 8002572:	460c      	mov	r4, r1
 8002574:	4625      	mov	r5, r4
 8002576:	461c      	mov	r4, r3
 8002578:	4b9d      	ldr	r3, [pc, #628]	; (80027f0 <process_MPU+0x6b0>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd ff8f 	bl	80004a0 <__aeabi_f2d>
 8002582:	a387      	add	r3, pc, #540	; (adr r3, 80027a0 <process_MPU+0x660>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f7fd ffe2 	bl	8000550 <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4620      	mov	r0, r4
 8002592:	4629      	mov	r1, r5
 8002594:	f7fd fe24 	bl	80001e0 <__aeabi_dsub>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	4618      	mov	r0, r3
 800259e:	4621      	mov	r1, r4
 80025a0:	f7fe face 	bl	8000b40 <__aeabi_d2f>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b93      	ldr	r3, [pc, #588]	; (80027f4 <process_MPU+0x6b4>)
 80025a8:	601a      	str	r2, [r3, #0]
	                y2 = (w_*1 + w1_*1.7994 + 1*w2_)*0.0003;
 80025aa:	4b92      	ldr	r3, [pc, #584]	; (80027f4 <process_MPU+0x6b4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd ff76 	bl	80004a0 <__aeabi_f2d>
 80025b4:	4604      	mov	r4, r0
 80025b6:	460d      	mov	r5, r1
 80025b8:	4b8c      	ldr	r3, [pc, #560]	; (80027ec <process_MPU+0x6ac>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ff6f 	bl	80004a0 <__aeabi_f2d>
 80025c2:	a371      	add	r3, pc, #452	; (adr r3, 8002788 <process_MPU+0x648>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fd ffc2 	bl	8000550 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fd fe06 	bl	80001e4 <__adddf3>
 80025d8:	4603      	mov	r3, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	4625      	mov	r5, r4
 80025de:	461c      	mov	r4, r3
 80025e0:	4b83      	ldr	r3, [pc, #524]	; (80027f0 <process_MPU+0x6b0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ff5b 	bl	80004a0 <__aeabi_f2d>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4620      	mov	r0, r4
 80025f0:	4629      	mov	r1, r5
 80025f2:	f7fd fdf7 	bl	80001e4 <__adddf3>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	4618      	mov	r0, r3
 80025fc:	4621      	mov	r1, r4
 80025fe:	a364      	add	r3, pc, #400	; (adr r3, 8002790 <process_MPU+0x650>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd ffa4 	bl	8000550 <__aeabi_dmul>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	4618      	mov	r0, r3
 800260e:	4621      	mov	r1, r4
 8002610:	f7fe fa96 	bl	8000b40 <__aeabi_d2f>
 8002614:	4602      	mov	r2, r0
 8002616:	4b78      	ldr	r3, [pc, #480]	; (80027f8 <process_MPU+0x6b8>)
 8002618:	601a      	str	r2, [r3, #0]
	                w2_ = w1_;
 800261a:	4b74      	ldr	r3, [pc, #464]	; (80027ec <process_MPU+0x6ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a74      	ldr	r2, [pc, #464]	; (80027f0 <process_MPU+0x6b0>)
 8002620:	6013      	str	r3, [r2, #0]
	                w1_ = w_;
 8002622:	4b74      	ldr	r3, [pc, #464]	; (80027f4 <process_MPU+0x6b4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a71      	ldr	r2, [pc, #452]	; (80027ec <process_MPU+0x6ac>)
 8002628:	6013      	str	r3, [r2, #0]



	                w01 = Acc_z - (-1.9861)*w11 - 0.98630*w21;
 800262a:	4b74      	ldr	r3, [pc, #464]	; (80027fc <process_MPU+0x6bc>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ff36 	bl	80004a0 <__aeabi_f2d>
 8002634:	4604      	mov	r4, r0
 8002636:	460d      	mov	r5, r1
 8002638:	4b71      	ldr	r3, [pc, #452]	; (8002800 <process_MPU+0x6c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd ff2f 	bl	80004a0 <__aeabi_f2d>
 8002642:	a359      	add	r3, pc, #356	; (adr r3, 80027a8 <process_MPU+0x668>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f7fd ff82 	bl	8000550 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fd fdc6 	bl	80001e4 <__adddf3>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	4625      	mov	r5, r4
 800265e:	461c      	mov	r4, r3
 8002660:	4b68      	ldr	r3, [pc, #416]	; (8002804 <process_MPU+0x6c4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff1b 	bl	80004a0 <__aeabi_f2d>
 800266a:	a351      	add	r3, pc, #324	; (adr r3, 80027b0 <process_MPU+0x670>)
 800266c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002670:	f7fd ff6e 	bl	8000550 <__aeabi_dmul>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd fdb0 	bl	80001e0 <__aeabi_dsub>
 8002680:	4603      	mov	r3, r0
 8002682:	460c      	mov	r4, r1
 8002684:	4618      	mov	r0, r3
 8002686:	4621      	mov	r1, r4
 8002688:	f7fe fa5a 	bl	8000b40 <__aeabi_d2f>
 800268c:	4602      	mov	r2, r0
 800268e:	4b5e      	ldr	r3, [pc, #376]	; (8002808 <process_MPU+0x6c8>)
 8002690:	601a      	str	r2, [r3, #0]
	                y3_ = (w01*1 + w11*(0.0541986007) + 1*w21)*9.5448458e-05;
 8002692:	4b5d      	ldr	r3, [pc, #372]	; (8002808 <process_MPU+0x6c8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff02 	bl	80004a0 <__aeabi_f2d>
 800269c:	4604      	mov	r4, r0
 800269e:	460d      	mov	r5, r1
 80026a0:	4b57      	ldr	r3, [pc, #348]	; (8002800 <process_MPU+0x6c0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd fefb 	bl	80004a0 <__aeabi_f2d>
 80026aa:	a343      	add	r3, pc, #268	; (adr r3, 80027b8 <process_MPU+0x678>)
 80026ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b0:	f7fd ff4e 	bl	8000550 <__aeabi_dmul>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	4620      	mov	r0, r4
 80026ba:	4629      	mov	r1, r5
 80026bc:	f7fd fd92 	bl	80001e4 <__adddf3>
 80026c0:	4603      	mov	r3, r0
 80026c2:	460c      	mov	r4, r1
 80026c4:	4625      	mov	r5, r4
 80026c6:	461c      	mov	r4, r3
 80026c8:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <process_MPU+0x6c4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd fee7 	bl	80004a0 <__aeabi_f2d>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4620      	mov	r0, r4
 80026d8:	4629      	mov	r1, r5
 80026da:	f7fd fd83 	bl	80001e4 <__adddf3>
 80026de:	4603      	mov	r3, r0
 80026e0:	460c      	mov	r4, r1
 80026e2:	4618      	mov	r0, r3
 80026e4:	4621      	mov	r1, r4
 80026e6:	a336      	add	r3, pc, #216	; (adr r3, 80027c0 <process_MPU+0x680>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fd ff30 	bl	8000550 <__aeabi_dmul>
 80026f0:	4603      	mov	r3, r0
 80026f2:	460c      	mov	r4, r1
 80026f4:	4618      	mov	r0, r3
 80026f6:	4621      	mov	r1, r4
 80026f8:	f7fe fa22 	bl	8000b40 <__aeabi_d2f>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <process_MPU+0x6cc>)
 8002700:	601a      	str	r2, [r3, #0]
	                w21 = w11;
 8002702:	4b3f      	ldr	r3, [pc, #252]	; (8002800 <process_MPU+0x6c0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a3f      	ldr	r2, [pc, #252]	; (8002804 <process_MPU+0x6c4>)
 8002708:	6013      	str	r3, [r2, #0]
	                w11 = w01;
 800270a:	4b3f      	ldr	r3, [pc, #252]	; (8002808 <process_MPU+0x6c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a3c      	ldr	r2, [pc, #240]	; (8002800 <process_MPU+0x6c0>)
 8002710:	6013      	str	r3, [r2, #0]
//	                quat2euler(qr0,qr1,qr2,qr3);
//	                end = htim4.Instance->CNT;
	            yaw_mag  +=  Gyro_z*0.001;
 8002712:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <process_MPU+0x6d0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd fec2 	bl	80004a0 <__aeabi_f2d>
 800271c:	4604      	mov	r4, r0
 800271e:	460d      	mov	r5, r1
 8002720:	4b3c      	ldr	r3, [pc, #240]	; (8002814 <process_MPU+0x6d4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd febb 	bl	80004a0 <__aeabi_f2d>
 800272a:	a327      	add	r3, pc, #156	; (adr r3, 80027c8 <process_MPU+0x688>)
 800272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002730:	f7fd ff0e 	bl	8000550 <__aeabi_dmul>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4620      	mov	r0, r4
 800273a:	4629      	mov	r1, r5
 800273c:	f7fd fd52 	bl	80001e4 <__adddf3>
 8002740:	4603      	mov	r3, r0
 8002742:	460c      	mov	r4, r1
 8002744:	4618      	mov	r0, r3
 8002746:	4621      	mov	r1, r4
 8002748:	f7fe f9fa 	bl	8000b40 <__aeabi_d2f>
 800274c:	4602      	mov	r2, r0
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <process_MPU+0x6d0>)
 8002750:	601a      	str	r2, [r3, #0]
	            roll_gyro +=  Gyro_x*0.0013065;
 8002752:	4b31      	ldr	r3, [pc, #196]	; (8002818 <process_MPU+0x6d8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fd fea2 	bl	80004a0 <__aeabi_f2d>
 800275c:	4604      	mov	r4, r0
 800275e:	460d      	mov	r5, r1
 8002760:	4b2e      	ldr	r3, [pc, #184]	; (800281c <process_MPU+0x6dc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fe9b 	bl	80004a0 <__aeabi_f2d>
 800276a:	a319      	add	r3, pc, #100	; (adr r3, 80027d0 <process_MPU+0x690>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	f7fd feee 	bl	8000550 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd32 	bl	80001e4 <__adddf3>
 8002780:	e04e      	b.n	8002820 <process_MPU+0x6e0>
 8002782:	bf00      	nop
 8002784:	f3af 8000 	nop.w
 8002788:	a786c227 	.word	0xa786c227
 800278c:	3ffcca57 	.word	0x3ffcca57
 8002790:	30553261 	.word	0x30553261
 8002794:	3f33a92a 	.word	0x3f33a92a
 8002798:	ea4a8c15 	.word	0xea4a8c15
 800279c:	3fff3404 	.word	0x3fff3404
 80027a0:	69ad42c4 	.word	0x69ad42c4
 80027a4:	3fee71de 	.word	0x3fee71de
 80027a8:	cb295e9e 	.word	0xcb295e9e
 80027ac:	3fffc710 	.word	0x3fffc710
 80027b0:	04816f00 	.word	0x04816f00
 80027b4:	3fef8fc5 	.word	0x3fef8fc5
 80027b8:	42fdad4a 	.word	0x42fdad4a
 80027bc:	3fabbfeb 	.word	0x3fabbfeb
 80027c0:	05b278dc 	.word	0x05b278dc
 80027c4:	3f190570 	.word	0x3f190570
 80027c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80027cc:	3f50624d 	.word	0x3f50624d
 80027d0:	b16c1e36 	.word	0xb16c1e36
 80027d4:	3f5567db 	.word	0x3f5567db
 80027d8:	200004a0 	.word	0x200004a0
 80027dc:	20000438 	.word	0x20000438
 80027e0:	20000500 	.word	0x20000500
 80027e4:	20000734 	.word	0x20000734
 80027e8:	20000488 	.word	0x20000488
 80027ec:	20000708 	.word	0x20000708
 80027f0:	2000041c 	.word	0x2000041c
 80027f4:	200006f4 	.word	0x200006f4
 80027f8:	200004b8 	.word	0x200004b8
 80027fc:	20000420 	.word	0x20000420
 8002800:	2000048c 	.word	0x2000048c
 8002804:	20000418 	.word	0x20000418
 8002808:	20000428 	.word	0x20000428
 800280c:	20000518 	.word	0x20000518
 8002810:	2000051c 	.word	0x2000051c
 8002814:	200004d0 	.word	0x200004d0
 8002818:	2000043c 	.word	0x2000043c
 800281c:	20000444 	.word	0x20000444
 8002820:	4603      	mov	r3, r0
 8002822:	460c      	mov	r4, r1
 8002824:	4618      	mov	r0, r3
 8002826:	4621      	mov	r1, r4
 8002828:	f7fe f98a 	bl	8000b40 <__aeabi_d2f>
 800282c:	4602      	mov	r2, r0
 800282e:	4b8c      	ldr	r3, [pc, #560]	; (8002a60 <process_MPU+0x920>)
 8002830:	601a      	str	r2, [r3, #0]
	            pitch_gyro +=  Gyro_y*0.0013065;
 8002832:	4b8c      	ldr	r3, [pc, #560]	; (8002a64 <process_MPU+0x924>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fe32 	bl	80004a0 <__aeabi_f2d>
 800283c:	4604      	mov	r4, r0
 800283e:	460d      	mov	r5, r1
 8002840:	4b89      	ldr	r3, [pc, #548]	; (8002a68 <process_MPU+0x928>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fe2b 	bl	80004a0 <__aeabi_f2d>
 800284a:	a381      	add	r3, pc, #516	; (adr r3, 8002a50 <process_MPU+0x910>)
 800284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002850:	f7fd fe7e 	bl	8000550 <__aeabi_dmul>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4620      	mov	r0, r4
 800285a:	4629      	mov	r1, r5
 800285c:	f7fd fcc2 	bl	80001e4 <__adddf3>
 8002860:	4603      	mov	r3, r0
 8002862:	460c      	mov	r4, r1
 8002864:	4618      	mov	r0, r3
 8002866:	4621      	mov	r1, r4
 8002868:	f7fe f96a 	bl	8000b40 <__aeabi_d2f>
 800286c:	4602      	mov	r2, r0
 800286e:	4b7d      	ldr	r3, [pc, #500]	; (8002a64 <process_MPU+0x924>)
 8002870:	601a      	str	r2, [r3, #0]
	            end = htim4.Instance->CNT;
 8002872:	4b7e      	ldr	r3, [pc, #504]	; (8002a6c <process_MPU+0x92c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	461a      	mov	r2, r3
 800287a:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <process_MPU+0x930>)
 800287c:	601a      	str	r2, [r3, #0]
	            complementary_filter(Gyro_x,Gyro_y,Gyro_z,y1,y2,y3,302/100000.0);
 800287e:	4b7d      	ldr	r3, [pc, #500]	; (8002a74 <process_MPU+0x934>)
 8002880:	edd3 7a00 	vldr	s15, [r3]
 8002884:	4b78      	ldr	r3, [pc, #480]	; (8002a68 <process_MPU+0x928>)
 8002886:	ed93 7a00 	vldr	s14, [r3]
 800288a:	4b7b      	ldr	r3, [pc, #492]	; (8002a78 <process_MPU+0x938>)
 800288c:	edd3 6a00 	vldr	s13, [r3]
 8002890:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <process_MPU+0x93c>)
 8002892:	ed93 6a00 	vldr	s12, [r3]
 8002896:	4b7a      	ldr	r3, [pc, #488]	; (8002a80 <process_MPU+0x940>)
 8002898:	edd3 5a00 	vldr	s11, [r3]
 800289c:	4b79      	ldr	r3, [pc, #484]	; (8002a84 <process_MPU+0x944>)
 800289e:	ed93 5a00 	vldr	s10, [r3]
 80028a2:	ed9f 3a79 	vldr	s6, [pc, #484]	; 8002a88 <process_MPU+0x948>
 80028a6:	eef0 2a45 	vmov.f32	s5, s10
 80028aa:	eeb0 2a65 	vmov.f32	s4, s11
 80028ae:	eef0 1a46 	vmov.f32	s3, s12
 80028b2:	eeb0 1a66 	vmov.f32	s2, s13
 80028b6:	eef0 0a47 	vmov.f32	s1, s14
 80028ba:	eeb0 0a67 	vmov.f32	s0, s15
 80028be:	f000 fc4f 	bl	8003160 <complementary_filter>
	            quaternion_rot(Gyro_x/180.0*PI, Gyro_y/180.0*PI,Gyro_z/180.0*PI,Acc_x,Acc_y,Acc_z,302/100000.0);
 80028c2:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <process_MPU+0x934>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fdea 	bl	80004a0 <__aeabi_f2d>
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	4b6e      	ldr	r3, [pc, #440]	; (8002a8c <process_MPU+0x94c>)
 80028d2:	f7fd ff67 	bl	80007a4 <__aeabi_ddiv>
 80028d6:	4603      	mov	r3, r0
 80028d8:	460c      	mov	r4, r1
 80028da:	4618      	mov	r0, r3
 80028dc:	4621      	mov	r1, r4
 80028de:	a35e      	add	r3, pc, #376	; (adr r3, 8002a58 <process_MPU+0x918>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fe34 	bl	8000550 <__aeabi_dmul>
 80028e8:	4603      	mov	r3, r0
 80028ea:	460c      	mov	r4, r1
 80028ec:	4618      	mov	r0, r3
 80028ee:	4621      	mov	r1, r4
 80028f0:	f7fe f926 	bl	8000b40 <__aeabi_d2f>
 80028f4:	4605      	mov	r5, r0
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <process_MPU+0x928>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fdd0 	bl	80004a0 <__aeabi_f2d>
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	4b61      	ldr	r3, [pc, #388]	; (8002a8c <process_MPU+0x94c>)
 8002906:	f7fd ff4d 	bl	80007a4 <__aeabi_ddiv>
 800290a:	4603      	mov	r3, r0
 800290c:	460c      	mov	r4, r1
 800290e:	4618      	mov	r0, r3
 8002910:	4621      	mov	r1, r4
 8002912:	a351      	add	r3, pc, #324	; (adr r3, 8002a58 <process_MPU+0x918>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fe1a 	bl	8000550 <__aeabi_dmul>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	4618      	mov	r0, r3
 8002922:	4621      	mov	r1, r4
 8002924:	f7fe f90c 	bl	8000b40 <__aeabi_d2f>
 8002928:	4606      	mov	r6, r0
 800292a:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <process_MPU+0x938>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fdb6 	bl	80004a0 <__aeabi_f2d>
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	4b54      	ldr	r3, [pc, #336]	; (8002a8c <process_MPU+0x94c>)
 800293a:	f7fd ff33 	bl	80007a4 <__aeabi_ddiv>
 800293e:	4603      	mov	r3, r0
 8002940:	460c      	mov	r4, r1
 8002942:	4618      	mov	r0, r3
 8002944:	4621      	mov	r1, r4
 8002946:	a344      	add	r3, pc, #272	; (adr r3, 8002a58 <process_MPU+0x918>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fe00 	bl	8000550 <__aeabi_dmul>
 8002950:	4603      	mov	r3, r0
 8002952:	460c      	mov	r4, r1
 8002954:	4618      	mov	r0, r3
 8002956:	4621      	mov	r1, r4
 8002958:	f7fe f8f2 	bl	8000b40 <__aeabi_d2f>
 800295c:	4602      	mov	r2, r0
 800295e:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <process_MPU+0x950>)
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <process_MPU+0x954>)
 8002966:	ed93 7a00 	vldr	s14, [r3]
 800296a:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <process_MPU+0x958>)
 800296c:	edd3 6a00 	vldr	s13, [r3]
 8002970:	ed9f 3a45 	vldr	s6, [pc, #276]	; 8002a88 <process_MPU+0x948>
 8002974:	eef0 2a66 	vmov.f32	s5, s13
 8002978:	eeb0 2a47 	vmov.f32	s4, s14
 800297c:	eef0 1a67 	vmov.f32	s3, s15
 8002980:	ee01 2a10 	vmov	s2, r2
 8002984:	ee00 6a90 	vmov	s1, r6
 8002988:	ee00 5a10 	vmov	s0, r5
 800298c:	f7fe faa8 	bl	8000ee0 <quaternion_rot>
	            quat2euler(qd0, qd1,qd2, qd3);
 8002990:	4b42      	ldr	r3, [pc, #264]	; (8002a9c <process_MPU+0x95c>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	4b42      	ldr	r3, [pc, #264]	; (8002aa0 <process_MPU+0x960>)
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <process_MPU+0x964>)
 800299e:	edd3 6a00 	vldr	s13, [r3]
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <process_MPU+0x968>)
 80029a4:	ed93 6a00 	vldr	s12, [r3]
 80029a8:	eef0 1a46 	vmov.f32	s3, s12
 80029ac:	eeb0 1a66 	vmov.f32	s2, s13
 80029b0:	eef0 0a47 	vmov.f32	s1, s14
 80029b4:	eeb0 0a67 	vmov.f32	s0, s15
 80029b8:	f000 fcb2 	bl	8003320 <quat2euler>
//	            }

//	            float2Bytes(buffer,roll_acc);
//	            ftoa(pitch_acc, buffer, 2);

	            med_gyroX += Gyro_x;
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <process_MPU+0x96c>)
 80029be:	ed93 7a00 	vldr	s14, [r3]
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <process_MPU+0x934>)
 80029c4:	edd3 7a00 	vldr	s15, [r3]
 80029c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029cc:	4b37      	ldr	r3, [pc, #220]	; (8002aac <process_MPU+0x96c>)
 80029ce:	edc3 7a00 	vstr	s15, [r3]
	            med_gyroY += Gyro_y;
 80029d2:	4b37      	ldr	r3, [pc, #220]	; (8002ab0 <process_MPU+0x970>)
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <process_MPU+0x928>)
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <process_MPU+0x970>)
 80029e4:	edc3 7a00 	vstr	s15, [r3]
	            med_gyroZ += Gyro_z;
 80029e8:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <process_MPU+0x974>)
 80029ea:	ed93 7a00 	vldr	s14, [r3]
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <process_MPU+0x938>)
 80029f0:	edd3 7a00 	vldr	s15, [r3]
 80029f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <process_MPU+0x974>)
 80029fa:	edc3 7a00 	vstr	s15, [r3]
//
	            med_accX += Acc_x;
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <process_MPU+0x978>)
 8002a00:	ed93 7a00 	vldr	s14, [r3]
 8002a04:	4b22      	ldr	r3, [pc, #136]	; (8002a90 <process_MPU+0x950>)
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <process_MPU+0x978>)
 8002a10:	edc3 7a00 	vstr	s15, [r3]
	            med_accY += Acc_y;
 8002a14:	4b29      	ldr	r3, [pc, #164]	; (8002abc <process_MPU+0x97c>)
 8002a16:	ed93 7a00 	vldr	s14, [r3]
 8002a1a:	4b1e      	ldr	r3, [pc, #120]	; (8002a94 <process_MPU+0x954>)
 8002a1c:	edd3 7a00 	vldr	s15, [r3]
 8002a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a24:	4b25      	ldr	r3, [pc, #148]	; (8002abc <process_MPU+0x97c>)
 8002a26:	edc3 7a00 	vstr	s15, [r3]
	            med_accZ += Acc_z;
 8002a2a:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <process_MPU+0x980>)
 8002a2c:	ed93 7a00 	vldr	s14, [r3]
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <process_MPU+0x958>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <process_MPU+0x980>)
 8002a3c:	edc3 7a00 	vstr	s15, [r3]
//	            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
//
//	            ftoa(y2, buffer, 2);
//	            strcat(buffer,"\n");
//	            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
                count++;
 8002a40:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <process_MPU+0x984>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <process_MPU+0x984>)
 8002a48:	6013      	str	r3, [r2, #0]
while(status != 3){
 8002a4a:	e05d      	b.n	8002b08 <process_MPU+0x9c8>
 8002a4c:	f3af 8000 	nop.w
 8002a50:	b16c1e36 	.word	0xb16c1e36
 8002a54:	3f5567db 	.word	0x3f5567db
 8002a58:	54524550 	.word	0x54524550
 8002a5c:	400921fb 	.word	0x400921fb
 8002a60:	2000043c 	.word	0x2000043c
 8002a64:	200006ec 	.word	0x200006ec
 8002a68:	200006f8 	.word	0x200006f8
 8002a6c:	20000218 	.word	0x20000218
 8002a70:	200002ec 	.word	0x200002ec
 8002a74:	20000444 	.word	0x20000444
 8002a78:	200004d0 	.word	0x200004d0
 8002a7c:	20000734 	.word	0x20000734
 8002a80:	200004b8 	.word	0x200004b8
 8002a84:	20000480 	.word	0x20000480
 8002a88:	3b45eb31 	.word	0x3b45eb31
 8002a8c:	40668000 	.word	0x40668000
 8002a90:	200004e0 	.word	0x200004e0
 8002a94:	20000488 	.word	0x20000488
 8002a98:	20000420 	.word	0x20000420
 8002a9c:	200000e8 	.word	0x200000e8
 8002aa0:	200000d0 	.word	0x200000d0
 8002aa4:	200000d8 	.word	0x200000d8
 8002aa8:	200000dc 	.word	0x200000dc
 8002aac:	20000440 	.word	0x20000440
 8002ab0:	200004b4 	.word	0x200004b4
 8002ab4:	20000704 	.word	0x20000704
 8002ab8:	20000548 	.word	0x20000548
 8002abc:	200006e0 	.word	0x200006e0
 8002ac0:	200004c0 	.word	0x200004c0
 8002ac4:	20000544 	.word	0x20000544
while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8002ac8:	bf00      	nop
 8002aca:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002ace:	b299      	uxth	r1, r3
 8002ad0:	f107 021e 	add.w	r2, r7, #30
 8002ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2301      	movs	r3, #1
 8002adc:	48cc      	ldr	r0, [pc, #816]	; (8002e10 <process_MPU+0xcd0>)
 8002ade:	f002 f8df 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1f0      	bne.n	8002aca <process_MPU+0x98a>
while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &status,1, 1000) != HAL_OK);
 8002ae8:	bf00      	nop
 8002aea:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002aee:	b299      	uxth	r1, r3
 8002af0:	f107 021f 	add.w	r2, r7, #31
 8002af4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	2301      	movs	r3, #1
 8002afc:	48c4      	ldr	r0, [pc, #784]	; (8002e10 <process_MPU+0xcd0>)
 8002afe:	f002 f9cd 	bl	8004e9c <HAL_I2C_Master_Receive>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <process_MPU+0x9aa>
while(status != 3){
 8002b08:	7ffb      	ldrb	r3, [r7, #31]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d1dc      	bne.n	8002ac8 <process_MPU+0x988>
}
    if(status == 3){
 8002b0e:	7ffb      	ldrb	r3, [r7, #31]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	f040 82e7 	bne.w	80030e4 <process_MPU+0xfa4>
    	reg = 0x03;
 8002b16:	2303      	movs	r3, #3
 8002b18:	77bb      	strb	r3, [r7, #30]
    	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &reg, 1, 1000) != HAL_OK);
 8002b1a:	bf00      	nop
 8002b1c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002b20:	b299      	uxth	r1, r3
 8002b22:	f107 021e 	add.w	r2, r7, #30
 8002b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	48b8      	ldr	r0, [pc, #736]	; (8002e10 <process_MPU+0xcd0>)
 8002b30:	f002 f8b6 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <process_MPU+0x9dc>
    	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, &mag_data,7, 1000) != HAL_OK);
 8002b3a:	bf00      	nop
 8002b3c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002b40:	b299      	uxth	r1, r3
 8002b42:	f107 0220 	add.w	r2, r7, #32
 8002b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2307      	movs	r3, #7
 8002b4e:	48b0      	ldr	r0, [pc, #704]	; (8002e10 <process_MPU+0xcd0>)
 8002b50:	f002 f9a4 	bl	8004e9c <HAL_I2C_Master_Receive>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <process_MPU+0x9fc>
//    	if(!(mag_data[6]|MAGIC_OVERFLOW_MASK)){
    		Mag_x = (int16_t)(mag_data[0] | (mag_data[1]<<8));
 8002b5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b5e:	b21a      	sxth	r2, r3
 8002b60:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	b21b      	sxth	r3, r3
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	b21b      	sxth	r3, r3
 8002b6c:	ee07 3a90 	vmov	s15, r3
 8002b70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b74:	4ba7      	ldr	r3, [pc, #668]	; (8002e14 <process_MPU+0xcd4>)
 8002b76:	edc3 7a00 	vstr	s15, [r3]
    		Mag_y = (int16_t)(mag_data[2] | (mag_data[3]<<8));
 8002b7a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b21b      	sxth	r3, r3
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b94:	4ba0      	ldr	r3, [pc, #640]	; (8002e18 <process_MPU+0xcd8>)
 8002b96:	edc3 7a00 	vstr	s15, [r3]
    		Mag_z = (int16_t)(mag_data[4] | (mag_data[5]<<8));
 8002b9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b9e:	b21a      	sxth	r2, r3
 8002ba0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	b21b      	sxth	r3, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bb4:	4b99      	ldr	r3, [pc, #612]	; (8002e1c <process_MPU+0xcdc>)
 8002bb6:	edc3 7a00 	vstr	s15, [r3]

            float m[3] = {Mag_x,Mag_y,Mag_z};
 8002bba:	4b96      	ldr	r3, [pc, #600]	; (8002e14 <process_MPU+0xcd4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	4b95      	ldr	r3, [pc, #596]	; (8002e18 <process_MPU+0xcd8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	4b95      	ldr	r3, [pc, #596]	; (8002e1c <process_MPU+0xcdc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	61bb      	str	r3, [r7, #24]
        	float temp[3] ;
            temp[0] = m[0] - b_m[0];
 8002bcc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bd0:	4b93      	ldr	r3, [pc, #588]	; (8002e20 <process_MPU+0xce0>)
 8002bd2:	edd3 7a00 	vldr	s15, [r3]
 8002bd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bda:	edc7 7a01 	vstr	s15, [r7, #4]
            temp[1] = m[1] - b_m[1];
 8002bde:	ed97 7a05 	vldr	s14, [r7, #20]
 8002be2:	4b8f      	ldr	r3, [pc, #572]	; (8002e20 <process_MPU+0xce0>)
 8002be4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bec:	edc7 7a02 	vstr	s15, [r7, #8]
            temp[2] = m[2] - b_m[2];
 8002bf0:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bf4:	4b8a      	ldr	r3, [pc, #552]	; (8002e20 <process_MPU+0xce0>)
 8002bf6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfe:	edc7 7a03 	vstr	s15, [r7, #12]

            magnet_calib[0] = A_m[0]*temp[0] + A_m[1]*temp[1] +A_m[2]*temp[2];
 8002c02:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <process_MPU+0xce4>)
 8002c04:	ed93 7a00 	vldr	s14, [r3]
 8002c08:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c10:	4b84      	ldr	r3, [pc, #528]	; (8002e24 <process_MPU+0xce4>)
 8002c12:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c16:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c22:	4b80      	ldr	r3, [pc, #512]	; (8002e24 <process_MPU+0xce4>)
 8002c24:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c34:	4b7c      	ldr	r3, [pc, #496]	; (8002e28 <process_MPU+0xce8>)
 8002c36:	edc3 7a00 	vstr	s15, [r3]
            magnet_calib[1] = A_m[3]*temp[0] + A_m[4]*temp[1] +A_m[5]*temp[2];
 8002c3a:	4b7a      	ldr	r3, [pc, #488]	; (8002e24 <process_MPU+0xce4>)
 8002c3c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c48:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <process_MPU+0xce4>)
 8002c4a:	edd3 6a04 	vldr	s13, [r3, #16]
 8002c4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c5a:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <process_MPU+0xce4>)
 8002c5c:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6c:	4b6e      	ldr	r3, [pc, #440]	; (8002e28 <process_MPU+0xce8>)
 8002c6e:	edc3 7a01 	vstr	s15, [r3, #4]
            magnet_calib[2] = A_m[6]*temp[0] + A_m[7]*temp[1] +A_m[8]*temp[2];
 8002c72:	4b6c      	ldr	r3, [pc, #432]	; (8002e24 <process_MPU+0xce4>)
 8002c74:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c80:	4b68      	ldr	r3, [pc, #416]	; (8002e24 <process_MPU+0xce4>)
 8002c82:	edd3 6a07 	vldr	s13, [r3, #28]
 8002c86:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c92:	4b64      	ldr	r3, [pc, #400]	; (8002e24 <process_MPU+0xce4>)
 8002c94:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca4:	4b60      	ldr	r3, [pc, #384]	; (8002e28 <process_MPU+0xce8>)
 8002ca6:	edc3 7a02 	vstr	s15, [r3, #8]

            med_gyroX /= count;
 8002caa:	4b60      	ldr	r3, [pc, #384]	; (8002e2c <process_MPU+0xcec>)
 8002cac:	edd3 6a00 	vldr	s13, [r3]
 8002cb0:	4b5f      	ldr	r3, [pc, #380]	; (8002e30 <process_MPU+0xcf0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc0:	4b5a      	ldr	r3, [pc, #360]	; (8002e2c <process_MPU+0xcec>)
 8002cc2:	edc3 7a00 	vstr	s15, [r3]
            med_gyroY /= count;
 8002cc6:	4b5b      	ldr	r3, [pc, #364]	; (8002e34 <process_MPU+0xcf4>)
 8002cc8:	edd3 6a00 	vldr	s13, [r3]
 8002ccc:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <process_MPU+0xcf0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cdc:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <process_MPU+0xcf4>)
 8002cde:	edc3 7a00 	vstr	s15, [r3]
            med_gyroZ /= count;
 8002ce2:	4b55      	ldr	r3, [pc, #340]	; (8002e38 <process_MPU+0xcf8>)
 8002ce4:	edd3 6a00 	vldr	s13, [r3]
 8002ce8:	4b51      	ldr	r3, [pc, #324]	; (8002e30 <process_MPU+0xcf0>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cf8:	4b4f      	ldr	r3, [pc, #316]	; (8002e38 <process_MPU+0xcf8>)
 8002cfa:	edc3 7a00 	vstr	s15, [r3]

            med_accX /= count;
 8002cfe:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <process_MPU+0xcfc>)
 8002d00:	edd3 6a00 	vldr	s13, [r3]
 8002d04:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <process_MPU+0xcf0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	ee07 3a90 	vmov	s15, r3
 8002d0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d14:	4b49      	ldr	r3, [pc, #292]	; (8002e3c <process_MPU+0xcfc>)
 8002d16:	edc3 7a00 	vstr	s15, [r3]
            med_accY /= count;
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <process_MPU+0xd00>)
 8002d1c:	edd3 6a00 	vldr	s13, [r3]
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <process_MPU+0xcf0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d30:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <process_MPU+0xd00>)
 8002d32:	edc3 7a00 	vstr	s15, [r3]
            med_accZ /= count;
 8002d36:	4b43      	ldr	r3, [pc, #268]	; (8002e44 <process_MPU+0xd04>)
 8002d38:	edd3 6a00 	vldr	s13, [r3]
 8002d3c:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <process_MPU+0xcf0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d4c:	4b3d      	ldr	r3, [pc, #244]	; (8002e44 <process_MPU+0xd04>)
 8002d4e:	edc3 7a00 	vstr	s15, [r3]
            w__ = med_accZ - (-1.9502)*w1__ - 0.9514*w2__;
 8002d52:	4b3c      	ldr	r3, [pc, #240]	; (8002e44 <process_MPU+0xd04>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fba2 	bl	80004a0 <__aeabi_f2d>
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	460d      	mov	r5, r1
 8002d60:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <process_MPU+0xd08>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fb9b 	bl	80004a0 <__aeabi_f2d>
 8002d6a:	a323      	add	r3, pc, #140	; (adr r3, 8002df8 <process_MPU+0xcb8>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fbee 	bl	8000550 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4620      	mov	r0, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	f7fd fa32 	bl	80001e4 <__adddf3>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	4625      	mov	r5, r4
 8002d86:	461c      	mov	r4, r3
 8002d88:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <process_MPU+0xd0c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fb87 	bl	80004a0 <__aeabi_f2d>
 8002d92:	a31b      	add	r3, pc, #108	; (adr r3, 8002e00 <process_MPU+0xcc0>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fbda 	bl	8000550 <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4620      	mov	r0, r4
 8002da2:	4629      	mov	r1, r5
 8002da4:	f7fd fa1c 	bl	80001e0 <__aeabi_dsub>
 8002da8:	4603      	mov	r3, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	4618      	mov	r0, r3
 8002dae:	4621      	mov	r1, r4
 8002db0:	f7fd fec6 	bl	8000b40 <__aeabi_d2f>
 8002db4:	4602      	mov	r2, r0
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <process_MPU+0xd10>)
 8002db8:	601a      	str	r2, [r3, #0]
            y3 = (w__*1 + w1__*1.7994 + 1*w2__)*0.0003;
 8002dba:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <process_MPU+0xd10>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fb6e 	bl	80004a0 <__aeabi_f2d>
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	460d      	mov	r5, r1
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <process_MPU+0xd08>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fb67 	bl	80004a0 <__aeabi_f2d>
 8002dd2:	a30d      	add	r3, pc, #52	; (adr r3, 8002e08 <process_MPU+0xcc8>)
 8002dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd8:	f7fd fbba 	bl	8000550 <__aeabi_dmul>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	460b      	mov	r3, r1
 8002de0:	4620      	mov	r0, r4
 8002de2:	4629      	mov	r1, r5
 8002de4:	f7fd f9fe 	bl	80001e4 <__adddf3>
 8002de8:	4603      	mov	r3, r0
 8002dea:	460c      	mov	r4, r1
 8002dec:	4625      	mov	r5, r4
 8002dee:	461c      	mov	r4, r3
 8002df0:	e030      	b.n	8002e54 <process_MPU+0xd14>
 8002df2:	bf00      	nop
 8002df4:	f3af 8000 	nop.w
 8002df8:	ea4a8c15 	.word	0xea4a8c15
 8002dfc:	3fff3404 	.word	0x3fff3404
 8002e00:	69ad42c4 	.word	0x69ad42c4
 8002e04:	3fee71de 	.word	0x3fee71de
 8002e08:	a786c227 	.word	0xa786c227
 8002e0c:	3ffcca57 	.word	0x3ffcca57
 8002e10:	20000168 	.word	0x20000168
 8002e14:	200004dc 	.word	0x200004dc
 8002e18:	20000540 	.word	0x20000540
 8002e1c:	200004bc 	.word	0x200004bc
 8002e20:	20000024 	.word	0x20000024
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000448 	.word	0x20000448
 8002e2c:	20000440 	.word	0x20000440
 8002e30:	20000544 	.word	0x20000544
 8002e34:	200004b4 	.word	0x200004b4
 8002e38:	20000704 	.word	0x20000704
 8002e3c:	20000548 	.word	0x20000548
 8002e40:	200006e0 	.word	0x200006e0
 8002e44:	200004c0 	.word	0x200004c0
 8002e48:	2000072c 	.word	0x2000072c
 8002e4c:	200004f8 	.word	0x200004f8
 8002e50:	200006e8 	.word	0x200006e8
 8002e54:	4bae      	ldr	r3, [pc, #696]	; (8003110 <process_MPU+0xfd0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb21 	bl	80004a0 <__aeabi_f2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4620      	mov	r0, r4
 8002e64:	4629      	mov	r1, r5
 8002e66:	f7fd f9bd 	bl	80001e4 <__adddf3>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	4618      	mov	r0, r3
 8002e70:	4621      	mov	r1, r4
 8002e72:	a39f      	add	r3, pc, #636	; (adr r3, 80030f0 <process_MPU+0xfb0>)
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f7fd fb6a 	bl	8000550 <__aeabi_dmul>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	460c      	mov	r4, r1
 8002e80:	4618      	mov	r0, r3
 8002e82:	4621      	mov	r1, r4
 8002e84:	f7fd fe5c 	bl	8000b40 <__aeabi_d2f>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4ba2      	ldr	r3, [pc, #648]	; (8003114 <process_MPU+0xfd4>)
 8002e8c:	601a      	str	r2, [r3, #0]
            w2__ = w1__;
 8002e8e:	4ba2      	ldr	r3, [pc, #648]	; (8003118 <process_MPU+0xfd8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a9f      	ldr	r2, [pc, #636]	; (8003110 <process_MPU+0xfd0>)
 8002e94:	6013      	str	r3, [r2, #0]
            w1__ = w__;
 8002e96:	4ba1      	ldr	r3, [pc, #644]	; (800311c <process_MPU+0xfdc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a9f      	ldr	r2, [pc, #636]	; (8003118 <process_MPU+0xfd8>)
 8002e9c:	6013      	str	r3, [r2, #0]

            roll_acc = atan2(Acc_y,Acc_z)*RAD2DEC;
 8002e9e:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <process_MPU+0xfe0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fafc 	bl	80004a0 <__aeabi_f2d>
 8002ea8:	4604      	mov	r4, r0
 8002eaa:	460d      	mov	r5, r1
 8002eac:	4b9d      	ldr	r3, [pc, #628]	; (8003124 <process_MPU+0xfe4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd faf5 	bl	80004a0 <__aeabi_f2d>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	ec43 2b11 	vmov	d1, r2, r3
 8002ebe:	ec45 4b10 	vmov	d0, r4, r5
 8002ec2:	f005 fbf3 	bl	80086ac <atan2>
 8002ec6:	ec51 0b10 	vmov	r0, r1, d0
 8002eca:	a38b      	add	r3, pc, #556	; (adr r3, 80030f8 <process_MPU+0xfb8>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd fb3e 	bl	8000550 <__aeabi_dmul>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	4621      	mov	r1, r4
 8002edc:	f7fd fe30 	bl	8000b40 <__aeabi_d2f>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b91      	ldr	r3, [pc, #580]	; (8003128 <process_MPU+0xfe8>)
 8002ee4:	601a      	str	r2, [r3, #0]
            com_angle_r = alpha*(com_angle_r + 0.0003*med_gyroX) + (1-alpha)*roll_acc;
 8002ee6:	4b91      	ldr	r3, [pc, #580]	; (800312c <process_MPU+0xfec>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fad8 	bl	80004a0 <__aeabi_f2d>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	460d      	mov	r5, r1
 8002ef4:	4b8e      	ldr	r3, [pc, #568]	; (8003130 <process_MPU+0xff0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fad1 	bl	80004a0 <__aeabi_f2d>
 8002efe:	a37c      	add	r3, pc, #496	; (adr r3, 80030f0 <process_MPU+0xfb0>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fb24 	bl	8000550 <__aeabi_dmul>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	4629      	mov	r1, r5
 8002f10:	f7fd f968 	bl	80001e4 <__adddf3>
 8002f14:	4603      	mov	r3, r0
 8002f16:	460c      	mov	r4, r1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	a378      	add	r3, pc, #480	; (adr r3, 8003100 <process_MPU+0xfc0>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f7fd fb15 	bl	8000550 <__aeabi_dmul>
 8002f26:	4603      	mov	r3, r0
 8002f28:	460c      	mov	r4, r1
 8002f2a:	4625      	mov	r5, r4
 8002f2c:	461c      	mov	r4, r3
 8002f2e:	4b7e      	ldr	r3, [pc, #504]	; (8003128 <process_MPU+0xfe8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fab4 	bl	80004a0 <__aeabi_f2d>
 8002f38:	a373      	add	r3, pc, #460	; (adr r3, 8003108 <process_MPU+0xfc8>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd fb07 	bl	8000550 <__aeabi_dmul>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4620      	mov	r0, r4
 8002f48:	4629      	mov	r1, r5
 8002f4a:	f7fd f94b 	bl	80001e4 <__adddf3>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	4618      	mov	r0, r3
 8002f54:	4621      	mov	r1, r4
 8002f56:	f7fd fdf3 	bl	8000b40 <__aeabi_d2f>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b73      	ldr	r3, [pc, #460]	; (800312c <process_MPU+0xfec>)
 8002f5e:	601a      	str	r2, [r3, #0]
            roll_acc = atan2(Acc_y,Acc_z)*RAD2DEC;
 8002f60:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <process_MPU+0xfe0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fd fa9b 	bl	80004a0 <__aeabi_f2d>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	460d      	mov	r5, r1
 8002f6e:	4b6d      	ldr	r3, [pc, #436]	; (8003124 <process_MPU+0xfe4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fd fa94 	bl	80004a0 <__aeabi_f2d>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	ec43 2b11 	vmov	d1, r2, r3
 8002f80:	ec45 4b10 	vmov	d0, r4, r5
 8002f84:	f005 fb92 	bl	80086ac <atan2>
 8002f88:	ec51 0b10 	vmov	r0, r1, d0
 8002f8c:	a35a      	add	r3, pc, #360	; (adr r3, 80030f8 <process_MPU+0xfb8>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	f7fd fadd 	bl	8000550 <__aeabi_dmul>
 8002f96:	4603      	mov	r3, r0
 8002f98:	460c      	mov	r4, r1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	f7fd fdcf 	bl	8000b40 <__aeabi_d2f>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b60      	ldr	r3, [pc, #384]	; (8003128 <process_MPU+0xfe8>)
 8002fa6:	601a      	str	r2, [r3, #0]
            com_angle_p = alpha*(com_angle_p + 0.0003*med_gyroY) + (1-alpha)*pitch_acc;
 8002fa8:	4b62      	ldr	r3, [pc, #392]	; (8003134 <process_MPU+0xff4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fa77 	bl	80004a0 <__aeabi_f2d>
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	460d      	mov	r5, r1
 8002fb6:	4b60      	ldr	r3, [pc, #384]	; (8003138 <process_MPU+0xff8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fa70 	bl	80004a0 <__aeabi_f2d>
 8002fc0:	a34b      	add	r3, pc, #300	; (adr r3, 80030f0 <process_MPU+0xfb0>)
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	f7fd fac3 	bl	8000550 <__aeabi_dmul>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4620      	mov	r0, r4
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	f7fd f907 	bl	80001e4 <__adddf3>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	460c      	mov	r4, r1
 8002fda:	4618      	mov	r0, r3
 8002fdc:	4621      	mov	r1, r4
 8002fde:	a348      	add	r3, pc, #288	; (adr r3, 8003100 <process_MPU+0xfc0>)
 8002fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe4:	f7fd fab4 	bl	8000550 <__aeabi_dmul>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	460c      	mov	r4, r1
 8002fec:	4625      	mov	r5, r4
 8002fee:	461c      	mov	r4, r3
 8002ff0:	4b52      	ldr	r3, [pc, #328]	; (800313c <process_MPU+0xffc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fa53 	bl	80004a0 <__aeabi_f2d>
 8002ffa:	a343      	add	r3, pc, #268	; (adr r3, 8003108 <process_MPU+0xfc8>)
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd faa6 	bl	8000550 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4620      	mov	r0, r4
 800300a:	4629      	mov	r1, r5
 800300c:	f7fd f8ea 	bl	80001e4 <__adddf3>
 8003010:	4603      	mov	r3, r0
 8003012:	460c      	mov	r4, r1
 8003014:	4618      	mov	r0, r3
 8003016:	4621      	mov	r1, r4
 8003018:	f7fd fd92 	bl	8000b40 <__aeabi_d2f>
 800301c:	4602      	mov	r2, r0
 800301e:	4b45      	ldr	r3, [pc, #276]	; (8003134 <process_MPU+0xff4>)
 8003020:	601a      	str	r2, [r3, #0]
         	pitch_acc = atan(y1 /sqrt(y2*y2 + y3*y3))*RAD2DEC;
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <process_MPU+0x1000>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fa3a 	bl	80004a0 <__aeabi_f2d>
 800302c:	4604      	mov	r4, r0
 800302e:	460d      	mov	r5, r1
 8003030:	4b44      	ldr	r3, [pc, #272]	; (8003144 <process_MPU+0x1004>)
 8003032:	ed93 7a00 	vldr	s14, [r3]
 8003036:	4b43      	ldr	r3, [pc, #268]	; (8003144 <process_MPU+0x1004>)
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003040:	4b34      	ldr	r3, [pc, #208]	; (8003114 <process_MPU+0xfd4>)
 8003042:	edd3 6a00 	vldr	s13, [r3]
 8003046:	4b33      	ldr	r3, [pc, #204]	; (8003114 <process_MPU+0xfd4>)
 8003048:	edd3 7a00 	vldr	s15, [r3]
 800304c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	ee17 0a90 	vmov	r0, s15
 8003058:	f7fd fa22 	bl	80004a0 <__aeabi_f2d>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	ec43 2b10 	vmov	d0, r2, r3
 8003064:	f005 fb24 	bl	80086b0 <sqrt>
 8003068:	ec53 2b10 	vmov	r2, r3, d0
 800306c:	4620      	mov	r0, r4
 800306e:	4629      	mov	r1, r5
 8003070:	f7fd fb98 	bl	80007a4 <__aeabi_ddiv>
 8003074:	4603      	mov	r3, r0
 8003076:	460c      	mov	r4, r1
 8003078:	ec44 3b17 	vmov	d7, r3, r4
 800307c:	eeb0 0a47 	vmov.f32	s0, s14
 8003080:	eef0 0a67 	vmov.f32	s1, s15
 8003084:	f005 f910 	bl	80082a8 <atan>
 8003088:	ec51 0b10 	vmov	r0, r1, d0
 800308c:	a31a      	add	r3, pc, #104	; (adr r3, 80030f8 <process_MPU+0xfb8>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd fa5d 	bl	8000550 <__aeabi_dmul>
 8003096:	4603      	mov	r3, r0
 8003098:	460c      	mov	r4, r1
 800309a:	4618      	mov	r0, r3
 800309c:	4621      	mov	r1, r4
 800309e:	f7fd fd4f 	bl	8000b40 <__aeabi_d2f>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <process_MPU+0xffc>)
 80030a6:	601a      	str	r2, [r3, #0]
            count = 0;
 80030a8:	4b27      	ldr	r3, [pc, #156]	; (8003148 <process_MPU+0x1008>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
//               	    HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
//
//               	    ftoa(magnet_calib[2], buffer, 2);
//               	    strcat(buffer,"\n");
//               	    HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
                    med_gyroX = 0;
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <process_MPU+0xff0>)
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
                    med_gyroY = 0;
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <process_MPU+0xff8>)
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]
                    med_gyroZ = 0;
 80030be:	4b23      	ldr	r3, [pc, #140]	; (800314c <process_MPU+0x100c>)
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]

                    med_accX = 0;
 80030c6:	4b22      	ldr	r3, [pc, #136]	; (8003150 <process_MPU+0x1010>)
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	601a      	str	r2, [r3, #0]
                    med_accY = 0;
 80030ce:	4b21      	ldr	r3, [pc, #132]	; (8003154 <process_MPU+0x1014>)
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
                    med_accZ = 0;
 80030d6:	4b20      	ldr	r3, [pc, #128]	; (8003158 <process_MPU+0x1018>)
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
                    mag_ava = 1;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    }

    return mag_ava;
 80030e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	377c      	adds	r7, #124	; 0x7c
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030f0:	30553261 	.word	0x30553261
 80030f4:	3f33a92a 	.word	0x3f33a92a
 80030f8:	1a5d2372 	.word	0x1a5d2372
 80030fc:	404ca5dc 	.word	0x404ca5dc
 8003100:	9999999a 	.word	0x9999999a
 8003104:	3fe99999 	.word	0x3fe99999
 8003108:	99999998 	.word	0x99999998
 800310c:	3fc99999 	.word	0x3fc99999
 8003110:	200004f8 	.word	0x200004f8
 8003114:	20000480 	.word	0x20000480
 8003118:	2000072c 	.word	0x2000072c
 800311c:	200006e8 	.word	0x200006e8
 8003120:	20000488 	.word	0x20000488
 8003124:	20000420 	.word	0x20000420
 8003128:	20000720 	.word	0x20000720
 800312c:	200004d8 	.word	0x200004d8
 8003130:	20000440 	.word	0x20000440
 8003134:	200004d4 	.word	0x200004d4
 8003138:	200004b4 	.word	0x200004b4
 800313c:	20000724 	.word	0x20000724
 8003140:	20000734 	.word	0x20000734
 8003144:	200004b8 	.word	0x200004b8
 8003148:	20000544 	.word	0x20000544
 800314c:	20000704 	.word	0x20000704
 8003150:	20000548 	.word	0x20000548
 8003154:	200006e0 	.word	0x200006e0
 8003158:	200004c0 	.word	0x200004c0
 800315c:	00000000 	.word	0x00000000

08003160 <complementary_filter>:

void process_float(uint8_t *data, float num){

}
void complementary_filter(float Gyro_x,float Gyro_y,float Gyro_z,float  Acc_x,float Acc_y,float Acc_z, float dt){
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	ed87 0a07 	vstr	s0, [r7, #28]
 800316a:	edc7 0a06 	vstr	s1, [r7, #24]
 800316e:	ed87 1a05 	vstr	s2, [r7, #20]
 8003172:	edc7 1a04 	vstr	s3, [r7, #16]
 8003176:	ed87 2a03 	vstr	s4, [r7, #12]
 800317a:	edc7 2a02 	vstr	s5, [r7, #8]
 800317e:	ed87 3a01 	vstr	s6, [r7, #4]
	/*Low pass filter*/

	/*Complemetary filter*/

	float roll_acc, pitch_acc,yaw_mag;
    roll_acc = atan2(Acc_y,Acc_z)*RAD2DEC;
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7fd f98c 	bl	80004a0 <__aeabi_f2d>
 8003188:	4604      	mov	r4, r0
 800318a:	460d      	mov	r5, r1
 800318c:	68b8      	ldr	r0, [r7, #8]
 800318e:	f7fd f987 	bl	80004a0 <__aeabi_f2d>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	ec43 2b11 	vmov	d1, r2, r3
 800319a:	ec45 4b10 	vmov	d0, r4, r5
 800319e:	f005 fa85 	bl	80086ac <atan2>
 80031a2:	ec51 0b10 	vmov	r0, r1, d0
 80031a6:	a35c      	add	r3, pc, #368	; (adr r3, 8003318 <complementary_filter+0x1b8>)
 80031a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ac:	f7fd f9d0 	bl	8000550 <__aeabi_dmul>
 80031b0:	4603      	mov	r3, r0
 80031b2:	460c      	mov	r4, r1
 80031b4:	4618      	mov	r0, r3
 80031b6:	4621      	mov	r1, r4
 80031b8:	f7fd fcc2 	bl	8000b40 <__aeabi_d2f>
 80031bc:	4603      	mov	r3, r0
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
    pitch_acc = atan(Acc_x/sqrt(Acc_y*Acc_y + Acc_z*Acc_z))*RAD2DEC;
 80031c0:	6938      	ldr	r0, [r7, #16]
 80031c2:	f7fd f96d 	bl	80004a0 <__aeabi_f2d>
 80031c6:	4604      	mov	r4, r0
 80031c8:	460d      	mov	r5, r1
 80031ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80031ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80031d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80031da:	edd7 7a02 	vldr	s15, [r7, #8]
 80031de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e6:	ee17 0a90 	vmov	r0, s15
 80031ea:	f7fd f959 	bl	80004a0 <__aeabi_f2d>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	ec43 2b10 	vmov	d0, r2, r3
 80031f6:	f005 fa5b 	bl	80086b0 <sqrt>
 80031fa:	ec53 2b10 	vmov	r2, r3, d0
 80031fe:	4620      	mov	r0, r4
 8003200:	4629      	mov	r1, r5
 8003202:	f7fd facf 	bl	80007a4 <__aeabi_ddiv>
 8003206:	4603      	mov	r3, r0
 8003208:	460c      	mov	r4, r1
 800320a:	ec44 3b17 	vmov	d7, r3, r4
 800320e:	eeb0 0a47 	vmov.f32	s0, s14
 8003212:	eef0 0a67 	vmov.f32	s1, s15
 8003216:	f005 f847 	bl	80082a8 <atan>
 800321a:	ec51 0b10 	vmov	r0, r1, d0
 800321e:	a33e      	add	r3, pc, #248	; (adr r3, 8003318 <complementary_filter+0x1b8>)
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	f7fd f994 	bl	8000550 <__aeabi_dmul>
 8003228:	4603      	mov	r3, r0
 800322a:	460c      	mov	r4, r1
 800322c:	4618      	mov	r0, r3
 800322e:	4621      	mov	r1, r4
 8003230:	f7fd fc86 	bl	8000b40 <__aeabi_d2f>
 8003234:	4603      	mov	r3, r0
 8003236:	623b      	str	r3, [r7, #32]
//    yaw_mag = atan2(magnet_calib2,magnet_calib1)*RAD2DEC;
	com_angle_r = alpha*(com_angle_r + dt*Gyro_x) + (1-alpha)*roll_acc;
 8003238:	ed97 7a01 	vldr	s14, [r7, #4]
 800323c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <complementary_filter+0x1b0>)
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324e:	ee17 0a90 	vmov	r0, s15
 8003252:	f7fd f925 	bl	80004a0 <__aeabi_f2d>
 8003256:	a32a      	add	r3, pc, #168	; (adr r3, 8003300 <complementary_filter+0x1a0>)
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f7fd f978 	bl	8000550 <__aeabi_dmul>
 8003260:	4603      	mov	r3, r0
 8003262:	460c      	mov	r4, r1
 8003264:	4625      	mov	r5, r4
 8003266:	461c      	mov	r4, r3
 8003268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800326a:	f7fd f919 	bl	80004a0 <__aeabi_f2d>
 800326e:	a326      	add	r3, pc, #152	; (adr r3, 8003308 <complementary_filter+0x1a8>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f7fd f96c 	bl	8000550 <__aeabi_dmul>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4620      	mov	r0, r4
 800327e:	4629      	mov	r1, r5
 8003280:	f7fc ffb0 	bl	80001e4 <__adddf3>
 8003284:	4603      	mov	r3, r0
 8003286:	460c      	mov	r4, r1
 8003288:	4618      	mov	r0, r3
 800328a:	4621      	mov	r1, r4
 800328c:	f7fd fc58 	bl	8000b40 <__aeabi_d2f>
 8003290:	4602      	mov	r2, r0
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <complementary_filter+0x1b0>)
 8003294:	601a      	str	r2, [r3, #0]
	com_angle_p = alpha*(com_angle_p + dt*Gyro_y) + (1-alpha)*pitch_acc;
 8003296:	ed97 7a01 	vldr	s14, [r7, #4]
 800329a:	edd7 7a06 	vldr	s15, [r7, #24]
 800329e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <complementary_filter+0x1b4>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ac:	ee17 0a90 	vmov	r0, s15
 80032b0:	f7fd f8f6 	bl	80004a0 <__aeabi_f2d>
 80032b4:	a312      	add	r3, pc, #72	; (adr r3, 8003300 <complementary_filter+0x1a0>)
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f7fd f949 	bl	8000550 <__aeabi_dmul>
 80032be:	4603      	mov	r3, r0
 80032c0:	460c      	mov	r4, r1
 80032c2:	4625      	mov	r5, r4
 80032c4:	461c      	mov	r4, r3
 80032c6:	6a38      	ldr	r0, [r7, #32]
 80032c8:	f7fd f8ea 	bl	80004a0 <__aeabi_f2d>
 80032cc:	a30e      	add	r3, pc, #56	; (adr r3, 8003308 <complementary_filter+0x1a8>)
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f7fd f93d 	bl	8000550 <__aeabi_dmul>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4620      	mov	r0, r4
 80032dc:	4629      	mov	r1, r5
 80032de:	f7fc ff81 	bl	80001e4 <__adddf3>
 80032e2:	4603      	mov	r3, r0
 80032e4:	460c      	mov	r4, r1
 80032e6:	4618      	mov	r0, r3
 80032e8:	4621      	mov	r1, r4
 80032ea:	f7fd fc29 	bl	8000b40 <__aeabi_d2f>
 80032ee:	4602      	mov	r2, r0
 80032f0:	4b08      	ldr	r3, [pc, #32]	; (8003314 <complementary_filter+0x1b4>)
 80032f2:	601a      	str	r2, [r3, #0]
//	com_angle_y = alpha*(com_angle_y + dt*Gyro_z) + (1-alpha)*yaw_mag;
}
 80032f4:	bf00      	nop
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bdb0      	pop	{r4, r5, r7, pc}
 80032fc:	f3af 8000 	nop.w
 8003300:	9999999a 	.word	0x9999999a
 8003304:	3fe99999 	.word	0x3fe99999
 8003308:	99999998 	.word	0x99999998
 800330c:	3fc99999 	.word	0x3fc99999
 8003310:	200004d8 	.word	0x200004d8
 8003314:	200004d4 	.word	0x200004d4
 8003318:	1a5d2372 	.word	0x1a5d2372
 800331c:	404ca5dc 	.word	0x404ca5dc

08003320 <quat2euler>:



void quat2euler(float a, float b,float c, float d){
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	ed87 0a03 	vstr	s0, [r7, #12]
 800332a:	edc7 0a02 	vstr	s1, [r7, #8]
 800332e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003332:	edc7 1a00 	vstr	s3, [r7]

	float sinr = 2*(a*b + c * d);
 8003336:	ed97 7a03 	vldr	s14, [r7, #12]
 800333a:	edd7 7a02 	vldr	s15, [r7, #8]
 800333e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003342:	edd7 6a01 	vldr	s13, [r7, #4]
 8003346:	edd7 7a00 	vldr	s15, [r7]
 800334a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003356:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float cosr = 1 - 2*(b*b + c * c);
 800335a:	ed97 7a02 	vldr	s14, [r7, #8]
 800335e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003366:	edd7 6a01 	vldr	s13, [r7, #4]
 800336a:	edd7 7a01 	vldr	s15, [r7, #4]
 800336e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003376:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800337a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800337e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003382:	edc7 7a08 	vstr	s15, [r7, #32]
	roll = atan2(sinr, cosr);
 8003386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003388:	f7fd f88a 	bl	80004a0 <__aeabi_f2d>
 800338c:	4604      	mov	r4, r0
 800338e:	460d      	mov	r5, r1
 8003390:	6a38      	ldr	r0, [r7, #32]
 8003392:	f7fd f885 	bl	80004a0 <__aeabi_f2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	ec43 2b11 	vmov	d1, r2, r3
 800339e:	ec45 4b10 	vmov	d0, r4, r5
 80033a2:	f005 f983 	bl	80086ac <atan2>
 80033a6:	ec54 3b10 	vmov	r3, r4, d0
 80033aa:	4618      	mov	r0, r3
 80033ac:	4621      	mov	r1, r4
 80033ae:	f7fd fbc7 	bl	8000b40 <__aeabi_d2f>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <quat2euler+0x240>)
 80033b6:	601a      	str	r2, [r3, #0]


	float sinp = 2*( a*c - d*b);
 80033b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80033bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033c4:	edd7 6a00 	vldr	s13, [r7]
 80033c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80033cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033d8:	edc7 7a07 	vstr	s15, [r7, #28]
    if (sinp >= 1)
 80033dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80033e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ec:	db03      	blt.n	80033f6 <quat2euler+0xd6>
        pitch = PI/2;
 80033ee:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <quat2euler+0x244>)
 80033f0:	4a5d      	ldr	r2, [pc, #372]	; (8003568 <quat2euler+0x248>)
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e01e      	b.n	8003434 <quat2euler+0x114>
    else{
    	if(sinp <= -1){
 80033f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80033fa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80033fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003406:	d803      	bhi.n	8003410 <quat2euler+0xf0>
        pitch = -PI/2;
 8003408:	4b56      	ldr	r3, [pc, #344]	; (8003564 <quat2euler+0x244>)
 800340a:	4a58      	ldr	r2, [pc, #352]	; (800356c <quat2euler+0x24c>)
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e011      	b.n	8003434 <quat2euler+0x114>
    }
    else{
        pitch = asin(sinp);
 8003410:	69f8      	ldr	r0, [r7, #28]
 8003412:	f7fd f845 	bl	80004a0 <__aeabi_f2d>
 8003416:	4603      	mov	r3, r0
 8003418:	460c      	mov	r4, r1
 800341a:	ec44 3b10 	vmov	d0, r3, r4
 800341e:	f005 f8ed 	bl	80085fc <asin>
 8003422:	ec54 3b10 	vmov	r3, r4, d0
 8003426:	4618      	mov	r0, r3
 8003428:	4621      	mov	r1, r4
 800342a:	f7fd fb89 	bl	8000b40 <__aeabi_d2f>
 800342e:	4602      	mov	r2, r0
 8003430:	4b4c      	ldr	r3, [pc, #304]	; (8003564 <quat2euler+0x244>)
 8003432:	601a      	str	r2, [r3, #0]
    }
    }


	float siny = 2*( a*d + c*b);
 8003434:	ed97 7a03 	vldr	s14, [r7, #12]
 8003438:	edd7 7a00 	vldr	s15, [r7]
 800343c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003440:	edd7 6a01 	vldr	s13, [r7, #4]
 8003444:	edd7 7a02 	vldr	s15, [r7, #8]
 8003448:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800344c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003450:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003454:	edc7 7a06 	vstr	s15, [r7, #24]
	float cosy = 1 - 2*( b*b + d*d);
 8003458:	ed97 7a02 	vldr	s14, [r7, #8]
 800345c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003460:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003464:	edd7 6a00 	vldr	s13, [r7]
 8003468:	edd7 7a00 	vldr	s15, [r7]
 800346c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800347c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003480:	edc7 7a05 	vstr	s15, [r7, #20]
	yaw = atan2(siny, cosy);
 8003484:	69b8      	ldr	r0, [r7, #24]
 8003486:	f7fd f80b 	bl	80004a0 <__aeabi_f2d>
 800348a:	4604      	mov	r4, r0
 800348c:	460d      	mov	r5, r1
 800348e:	6978      	ldr	r0, [r7, #20]
 8003490:	f7fd f806 	bl	80004a0 <__aeabi_f2d>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	ec43 2b11 	vmov	d1, r2, r3
 800349c:	ec45 4b10 	vmov	d0, r4, r5
 80034a0:	f005 f904 	bl	80086ac <atan2>
 80034a4:	ec54 3b10 	vmov	r3, r4, d0
 80034a8:	4618      	mov	r0, r3
 80034aa:	4621      	mov	r1, r4
 80034ac:	f7fd fb48 	bl	8000b40 <__aeabi_d2f>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <quat2euler+0x250>)
 80034b4:	601a      	str	r2, [r3, #0]

    roll = roll*180/PI;
 80034b6:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <quat2euler+0x240>)
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003574 <quat2euler+0x254>
 80034c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c4:	ee17 0a90 	vmov	r0, s15
 80034c8:	f7fc ffea 	bl	80004a0 <__aeabi_f2d>
 80034cc:	a322      	add	r3, pc, #136	; (adr r3, 8003558 <quat2euler+0x238>)
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f7fd f967 	bl	80007a4 <__aeabi_ddiv>
 80034d6:	4603      	mov	r3, r0
 80034d8:	460c      	mov	r4, r1
 80034da:	4618      	mov	r0, r3
 80034dc:	4621      	mov	r1, r4
 80034de:	f7fd fb2f 	bl	8000b40 <__aeabi_d2f>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b1e      	ldr	r3, [pc, #120]	; (8003560 <quat2euler+0x240>)
 80034e6:	601a      	str	r2, [r3, #0]
    pitch = pitch*180/PI;
 80034e8:	4b1e      	ldr	r3, [pc, #120]	; (8003564 <quat2euler+0x244>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003574 <quat2euler+0x254>
 80034f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034f6:	ee17 0a90 	vmov	r0, s15
 80034fa:	f7fc ffd1 	bl	80004a0 <__aeabi_f2d>
 80034fe:	a316      	add	r3, pc, #88	; (adr r3, 8003558 <quat2euler+0x238>)
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	f7fd f94e 	bl	80007a4 <__aeabi_ddiv>
 8003508:	4603      	mov	r3, r0
 800350a:	460c      	mov	r4, r1
 800350c:	4618      	mov	r0, r3
 800350e:	4621      	mov	r1, r4
 8003510:	f7fd fb16 	bl	8000b40 <__aeabi_d2f>
 8003514:	4602      	mov	r2, r0
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <quat2euler+0x244>)
 8003518:	601a      	str	r2, [r3, #0]
    yaw = yaw*180/PI;
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <quat2euler+0x250>)
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003574 <quat2euler+0x254>
 8003524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003528:	ee17 0a90 	vmov	r0, s15
 800352c:	f7fc ffb8 	bl	80004a0 <__aeabi_f2d>
 8003530:	a309      	add	r3, pc, #36	; (adr r3, 8003558 <quat2euler+0x238>)
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f7fd f935 	bl	80007a4 <__aeabi_ddiv>
 800353a:	4603      	mov	r3, r0
 800353c:	460c      	mov	r4, r1
 800353e:	4618      	mov	r0, r3
 8003540:	4621      	mov	r1, r4
 8003542:	f7fd fafd 	bl	8000b40 <__aeabi_d2f>
 8003546:	4602      	mov	r2, r0
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <quat2euler+0x250>)
 800354a:	601a      	str	r2, [r3, #0]
}
 800354c:	bf00      	nop
 800354e:	3728      	adds	r7, #40	; 0x28
 8003550:	46bd      	mov	sp, r7
 8003552:	bdb0      	pop	{r4, r5, r7, pc}
 8003554:	f3af 8000 	nop.w
 8003558:	54524550 	.word	0x54524550
 800355c:	400921fb 	.word	0x400921fb
 8003560:	20000700 	.word	0x20000700
 8003564:	200006fc 	.word	0x200006fc
 8003568:	3fc90fdb 	.word	0x3fc90fdb
 800356c:	bfc90fdb 	.word	0xbfc90fdb
 8003570:	200006f0 	.word	0x200006f0
 8003574:	43340000 	.word	0x43340000

08003578 <calibration_IMU>:




void calibration_IMU(){
 8003578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357a:	b08f      	sub	sp, #60	; 0x3c
 800357c:	af02      	add	r7, sp, #8
    /*This function is performed when the sensor is fully stationary, we assume that MPU has been inited*/
	    char buffer[8];
	    print_msg("Calibrating the sensor....\n");
 800357e:	48a7      	ldr	r0, [pc, #668]	; (800381c <calibration_IMU+0x2a4>)
 8003580:	f000 fb38 	bl	8003bf4 <print_msg>
		uint8_t data[13];
		uint8_t mag_data[7];
		uint8_t status;
		uint8_t reg = ACCEL_XOUT_H;
 8003584:	233b      	movs	r3, #59	; 0x3b
 8003586:	71fb      	strb	r3, [r7, #7]
		uint8_t device_address = MPU_ADDRESS;
 8003588:	23d0      	movs	r3, #208	; 0xd0
 800358a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t magnet_address = MAG_ADRRESS;
 800358e:	2318      	movs	r3, #24
 8003590:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for(int i = 0; i<100; i++){
 8003594:	2300      	movs	r3, #0
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003598:	e0fa      	b.n	8003790 <calibration_IMU+0x218>

		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 800359a:	bf00      	nop
 800359c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035a0:	b299      	uxth	r1, r3
 80035a2:	1dfa      	adds	r2, r7, #7
 80035a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	2301      	movs	r3, #1
 80035ac:	489c      	ldr	r0, [pc, #624]	; (8003820 <calibration_IMU+0x2a8>)
 80035ae:	f001 fb77 	bl	8004ca0 <HAL_I2C_Master_Transmit>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f1      	bne.n	800359c <calibration_IMU+0x24>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 80035b8:	bf00      	nop
 80035ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035be:	b299      	uxth	r1, r3
 80035c0:	f107 0210 	add.w	r2, r7, #16
 80035c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	230e      	movs	r3, #14
 80035cc:	4894      	ldr	r0, [pc, #592]	; (8003820 <calibration_IMU+0x2a8>)
 80035ce:	f001 fc65 	bl	8004e9c <HAL_I2C_Master_Receive>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <calibration_IMU+0x42>

		Acc_x = (int16_t)(data[0] << 8 | data[1]);
 80035d8:	7c3b      	ldrb	r3, [r7, #16]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	b21a      	sxth	r2, r3
 80035de:	7c7b      	ldrb	r3, [r7, #17]
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b21b      	sxth	r3, r3
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ee:	4b8d      	ldr	r3, [pc, #564]	; (8003824 <calibration_IMU+0x2ac>)
 80035f0:	edc3 7a00 	vstr	s15, [r3]
		Acc_y = (int16_t)(data[2] << 8 | data[3]);
 80035f4:	7cbb      	ldrb	r3, [r7, #18]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	b21a      	sxth	r2, r3
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	4313      	orrs	r3, r2
 8003600:	b21b      	sxth	r3, r3
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800360a:	4b87      	ldr	r3, [pc, #540]	; (8003828 <calibration_IMU+0x2b0>)
 800360c:	edc3 7a00 	vstr	s15, [r3]
		Acc_z = (int16_t)(data[4] << 8 | data[5]);
 8003610:	7d3b      	ldrb	r3, [r7, #20]
 8003612:	021b      	lsls	r3, r3, #8
 8003614:	b21a      	sxth	r2, r3
 8003616:	7d7b      	ldrb	r3, [r7, #21]
 8003618:	b21b      	sxth	r3, r3
 800361a:	4313      	orrs	r3, r2
 800361c:	b21b      	sxth	r3, r3
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003626:	4b81      	ldr	r3, [pc, #516]	; (800382c <calibration_IMU+0x2b4>)
 8003628:	edc3 7a00 	vstr	s15, [r3]

	    temp = (int16_t)(data[6] << 8 | data[7]);
 800362c:	7dbb      	ldrb	r3, [r7, #22]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	b21a      	sxth	r2, r3
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	b21b      	sxth	r3, r3
 8003636:	4313      	orrs	r3, r2
 8003638:	b21b      	sxth	r3, r3
 800363a:	ee07 3a90 	vmov	s15, r3
 800363e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003642:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <calibration_IMU+0x2b8>)
 8003644:	edc3 7a00 	vstr	s15, [r3]

	    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 8003648:	7e3b      	ldrb	r3, [r7, #24]
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	b21a      	sxth	r2, r3
 800364e:	7e7b      	ldrb	r3, [r7, #25]
 8003650:	b21b      	sxth	r3, r3
 8003652:	4313      	orrs	r3, r2
 8003654:	b21b      	sxth	r3, r3
 8003656:	ee07 3a90 	vmov	s15, r3
 800365a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800365e:	4b75      	ldr	r3, [pc, #468]	; (8003834 <calibration_IMU+0x2bc>)
 8003660:	edc3 7a00 	vstr	s15, [r3]
	    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 8003664:	7ebb      	ldrb	r3, [r7, #26]
 8003666:	021b      	lsls	r3, r3, #8
 8003668:	b21a      	sxth	r2, r3
 800366a:	7efb      	ldrb	r3, [r7, #27]
 800366c:	b21b      	sxth	r3, r3
 800366e:	4313      	orrs	r3, r2
 8003670:	b21b      	sxth	r3, r3
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367a:	4b6f      	ldr	r3, [pc, #444]	; (8003838 <calibration_IMU+0x2c0>)
 800367c:	edc3 7a00 	vstr	s15, [r3]
	    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 8003680:	7f3b      	ldrb	r3, [r7, #28]
 8003682:	021b      	lsls	r3, r3, #8
 8003684:	b21a      	sxth	r2, r3
 8003686:	7f7b      	ldrb	r3, [r7, #29]
 8003688:	b21b      	sxth	r3, r3
 800368a:	4313      	orrs	r3, r2
 800368c:	b21b      	sxth	r3, r3
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003696:	4b69      	ldr	r3, [pc, #420]	; (800383c <calibration_IMU+0x2c4>)
 8003698:	edc3 7a00 	vstr	s15, [r3]

	    bAx += Acc_x;
 800369c:	4b61      	ldr	r3, [pc, #388]	; (8003824 <calibration_IMU+0x2ac>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fc fefd 	bl	80004a0 <__aeabi_f2d>
 80036a6:	4b66      	ldr	r3, [pc, #408]	; (8003840 <calibration_IMU+0x2c8>)
 80036a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036ac:	461a      	mov	r2, r3
 80036ae:	4623      	mov	r3, r4
 80036b0:	f7fc fd98 	bl	80001e4 <__adddf3>
 80036b4:	4603      	mov	r3, r0
 80036b6:	460c      	mov	r4, r1
 80036b8:	4a61      	ldr	r2, [pc, #388]	; (8003840 <calibration_IMU+0x2c8>)
 80036ba:	e9c2 3400 	strd	r3, r4, [r2]
	    bAy += Acc_y;
 80036be:	4b5a      	ldr	r3, [pc, #360]	; (8003828 <calibration_IMU+0x2b0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fc feec 	bl	80004a0 <__aeabi_f2d>
 80036c8:	4b5e      	ldr	r3, [pc, #376]	; (8003844 <calibration_IMU+0x2cc>)
 80036ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4623      	mov	r3, r4
 80036d2:	f7fc fd87 	bl	80001e4 <__adddf3>
 80036d6:	4603      	mov	r3, r0
 80036d8:	460c      	mov	r4, r1
 80036da:	4a5a      	ldr	r2, [pc, #360]	; (8003844 <calibration_IMU+0x2cc>)
 80036dc:	e9c2 3400 	strd	r3, r4, [r2]
	    bAz += Acc_z;
 80036e0:	4b52      	ldr	r3, [pc, #328]	; (800382c <calibration_IMU+0x2b4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fc fedb 	bl	80004a0 <__aeabi_f2d>
 80036ea:	4b57      	ldr	r3, [pc, #348]	; (8003848 <calibration_IMU+0x2d0>)
 80036ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036f0:	461a      	mov	r2, r3
 80036f2:	4623      	mov	r3, r4
 80036f4:	f7fc fd76 	bl	80001e4 <__adddf3>
 80036f8:	4603      	mov	r3, r0
 80036fa:	460c      	mov	r4, r1
 80036fc:	4a52      	ldr	r2, [pc, #328]	; (8003848 <calibration_IMU+0x2d0>)
 80036fe:	e9c2 3400 	strd	r3, r4, [r2]

	    bGx += Gyro_x;
 8003702:	4b4c      	ldr	r3, [pc, #304]	; (8003834 <calibration_IMU+0x2bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fc feca 	bl	80004a0 <__aeabi_f2d>
 800370c:	4b4f      	ldr	r3, [pc, #316]	; (800384c <calibration_IMU+0x2d4>)
 800370e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003712:	461a      	mov	r2, r3
 8003714:	4623      	mov	r3, r4
 8003716:	f7fc fd65 	bl	80001e4 <__adddf3>
 800371a:	4603      	mov	r3, r0
 800371c:	460c      	mov	r4, r1
 800371e:	4a4b      	ldr	r2, [pc, #300]	; (800384c <calibration_IMU+0x2d4>)
 8003720:	e9c2 3400 	strd	r3, r4, [r2]
	    bGy += Gyro_y;
 8003724:	4b44      	ldr	r3, [pc, #272]	; (8003838 <calibration_IMU+0x2c0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7fc feb9 	bl	80004a0 <__aeabi_f2d>
 800372e:	4b48      	ldr	r3, [pc, #288]	; (8003850 <calibration_IMU+0x2d8>)
 8003730:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003734:	461a      	mov	r2, r3
 8003736:	4623      	mov	r3, r4
 8003738:	f7fc fd54 	bl	80001e4 <__adddf3>
 800373c:	4603      	mov	r3, r0
 800373e:	460c      	mov	r4, r1
 8003740:	4a43      	ldr	r2, [pc, #268]	; (8003850 <calibration_IMU+0x2d8>)
 8003742:	e9c2 3400 	strd	r3, r4, [r2]
	    bGz += Gyro_z;
 8003746:	4b3d      	ldr	r3, [pc, #244]	; (800383c <calibration_IMU+0x2c4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc fea8 	bl	80004a0 <__aeabi_f2d>
 8003750:	4b40      	ldr	r3, [pc, #256]	; (8003854 <calibration_IMU+0x2dc>)
 8003752:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003756:	461a      	mov	r2, r3
 8003758:	4623      	mov	r3, r4
 800375a:	f7fc fd43 	bl	80001e4 <__adddf3>
 800375e:	4603      	mov	r3, r0
 8003760:	460c      	mov	r4, r1
 8003762:	4a3c      	ldr	r2, [pc, #240]	; (8003854 <calibration_IMU+0x2dc>)
 8003764:	e9c2 3400 	strd	r3, r4, [r2]

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8003768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800376c:	483a      	ldr	r0, [pc, #232]	; (8003858 <calibration_IMU+0x2e0>)
 800376e:	f001 f944 	bl	80049fa <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8003772:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003776:	4838      	ldr	r0, [pc, #224]	; (8003858 <calibration_IMU+0x2e0>)
 8003778:	f001 f93f 	bl	80049fa <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 800377c:	2104      	movs	r1, #4
 800377e:	4836      	ldr	r0, [pc, #216]	; (8003858 <calibration_IMU+0x2e0>)
 8003780:	f001 f93b 	bl	80049fa <HAL_GPIO_TogglePin>
	    HAL_Delay(50);
 8003784:	2032      	movs	r0, #50	; 0x32
 8003786:	f000 fe13 	bl	80043b0 <HAL_Delay>
        for(int i = 0; i<100; i++){
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	3301      	adds	r3, #1
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	2b63      	cmp	r3, #99	; 0x63
 8003794:	f77f af01 	ble.w	800359a <calibration_IMU+0x22>
        }

     bAx /= 100;
 8003798:	4b29      	ldr	r3, [pc, #164]	; (8003840 <calibration_IMU+0x2c8>)
 800379a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	4b2e      	ldr	r3, [pc, #184]	; (800385c <calibration_IMU+0x2e4>)
 80037a4:	f7fc fffe 	bl	80007a4 <__aeabi_ddiv>
 80037a8:	4603      	mov	r3, r0
 80037aa:	460c      	mov	r4, r1
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <calibration_IMU+0x2c8>)
 80037ae:	e9c2 3400 	strd	r3, r4, [r2]
     bAy /= 100;
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <calibration_IMU+0x2cc>)
 80037b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	4b27      	ldr	r3, [pc, #156]	; (800385c <calibration_IMU+0x2e4>)
 80037be:	f7fc fff1 	bl	80007a4 <__aeabi_ddiv>
 80037c2:	4603      	mov	r3, r0
 80037c4:	460c      	mov	r4, r1
 80037c6:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <calibration_IMU+0x2cc>)
 80037c8:	e9c2 3400 	strd	r3, r4, [r2]
     bAz /= 100;
 80037cc:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <calibration_IMU+0x2d0>)
 80037ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	4b21      	ldr	r3, [pc, #132]	; (800385c <calibration_IMU+0x2e4>)
 80037d8:	f7fc ffe4 	bl	80007a4 <__aeabi_ddiv>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	4a19      	ldr	r2, [pc, #100]	; (8003848 <calibration_IMU+0x2d0>)
 80037e2:	e9c2 3400 	strd	r3, r4, [r2]
     if(bAz > 0)
 80037e6:	4b18      	ldr	r3, [pc, #96]	; (8003848 <calibration_IMU+0x2d0>)
 80037e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	f7fd f93c 	bl	8000a70 <__aeabi_dcmpgt>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d032      	beq.n	8003864 <calibration_IMU+0x2ec>
    	 bAz -= accel_factor;
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <calibration_IMU+0x2d0>)
 8003800:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	4b15      	ldr	r3, [pc, #84]	; (8003860 <calibration_IMU+0x2e8>)
 800380a:	f7fc fce9 	bl	80001e0 <__aeabi_dsub>
 800380e:	4603      	mov	r3, r0
 8003810:	460c      	mov	r4, r1
 8003812:	4a0d      	ldr	r2, [pc, #52]	; (8003848 <calibration_IMU+0x2d0>)
 8003814:	e9c2 3400 	strd	r3, r4, [r2]
 8003818:	e031      	b.n	800387e <calibration_IMU+0x306>
 800381a:	bf00      	nop
 800381c:	08008ee0 	.word	0x08008ee0
 8003820:	20000168 	.word	0x20000168
 8003824:	200004e0 	.word	0x200004e0
 8003828:	20000488 	.word	0x20000488
 800382c:	20000420 	.word	0x20000420
 8003830:	200004b0 	.word	0x200004b0
 8003834:	20000444 	.word	0x20000444
 8003838:	200006f8 	.word	0x200006f8
 800383c:	200004d0 	.word	0x200004d0
 8003840:	200006d8 	.word	0x200006d8
 8003844:	200004e8 	.word	0x200004e8
 8003848:	20000710 	.word	0x20000710
 800384c:	20000508 	.word	0x20000508
 8003850:	20000458 	.word	0x20000458
 8003854:	20000718 	.word	0x20000718
 8003858:	40020400 	.word	0x40020400
 800385c:	40590000 	.word	0x40590000
 8003860:	40d00000 	.word	0x40d00000
     else
    	 bAz += accel_factor;
 8003864:	4b47      	ldr	r3, [pc, #284]	; (8003984 <calibration_IMU+0x40c>)
 8003866:	e9d3 0100 	ldrd	r0, r1, [r3]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	4b46      	ldr	r3, [pc, #280]	; (8003988 <calibration_IMU+0x410>)
 8003870:	f7fc fcb8 	bl	80001e4 <__adddf3>
 8003874:	4603      	mov	r3, r0
 8003876:	460c      	mov	r4, r1
 8003878:	4a42      	ldr	r2, [pc, #264]	; (8003984 <calibration_IMU+0x40c>)
 800387a:	e9c2 3400 	strd	r3, r4, [r2]
     g = sqrt(bAx*bAx + bAy*bAy + bAz*bAz);
 800387e:	4b43      	ldr	r3, [pc, #268]	; (800398c <calibration_IMU+0x414>)
 8003880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003884:	4b41      	ldr	r3, [pc, #260]	; (800398c <calibration_IMU+0x414>)
 8003886:	e9d3 3400 	ldrd	r3, r4, [r3]
 800388a:	461a      	mov	r2, r3
 800388c:	4623      	mov	r3, r4
 800388e:	f7fc fe5f 	bl	8000550 <__aeabi_dmul>
 8003892:	4603      	mov	r3, r0
 8003894:	460c      	mov	r4, r1
 8003896:	461d      	mov	r5, r3
 8003898:	4626      	mov	r6, r4
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <calibration_IMU+0x418>)
 800389c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038a0:	4b3b      	ldr	r3, [pc, #236]	; (8003990 <calibration_IMU+0x418>)
 80038a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038a6:	461a      	mov	r2, r3
 80038a8:	4623      	mov	r3, r4
 80038aa:	f7fc fe51 	bl	8000550 <__aeabi_dmul>
 80038ae:	4603      	mov	r3, r0
 80038b0:	460c      	mov	r4, r1
 80038b2:	461a      	mov	r2, r3
 80038b4:	4623      	mov	r3, r4
 80038b6:	4628      	mov	r0, r5
 80038b8:	4631      	mov	r1, r6
 80038ba:	f7fc fc93 	bl	80001e4 <__adddf3>
 80038be:	4603      	mov	r3, r0
 80038c0:	460c      	mov	r4, r1
 80038c2:	461d      	mov	r5, r3
 80038c4:	4626      	mov	r6, r4
 80038c6:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <calibration_IMU+0x40c>)
 80038c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038cc:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <calibration_IMU+0x40c>)
 80038ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038d2:	461a      	mov	r2, r3
 80038d4:	4623      	mov	r3, r4
 80038d6:	f7fc fe3b 	bl	8000550 <__aeabi_dmul>
 80038da:	4603      	mov	r3, r0
 80038dc:	460c      	mov	r4, r1
 80038de:	461a      	mov	r2, r3
 80038e0:	4623      	mov	r3, r4
 80038e2:	4628      	mov	r0, r5
 80038e4:	4631      	mov	r1, r6
 80038e6:	f7fc fc7d 	bl	80001e4 <__adddf3>
 80038ea:	4603      	mov	r3, r0
 80038ec:	460c      	mov	r4, r1
 80038ee:	ec44 3b17 	vmov	d7, r3, r4
 80038f2:	eeb0 0a47 	vmov.f32	s0, s14
 80038f6:	eef0 0a67 	vmov.f32	s1, s15
 80038fa:	f004 fed9 	bl	80086b0 <sqrt>
 80038fe:	eeb0 7a40 	vmov.f32	s14, s0
 8003902:	eef0 7a60 	vmov.f32	s15, s1
 8003906:	4b23      	ldr	r3, [pc, #140]	; (8003994 <calibration_IMU+0x41c>)
 8003908:	ed83 7b00 	vstr	d7, [r3]

     bGx /= 100;
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <calibration_IMU+0x420>)
 800390e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	4b21      	ldr	r3, [pc, #132]	; (800399c <calibration_IMU+0x424>)
 8003918:	f7fc ff44 	bl	80007a4 <__aeabi_ddiv>
 800391c:	4603      	mov	r3, r0
 800391e:	460c      	mov	r4, r1
 8003920:	4a1d      	ldr	r2, [pc, #116]	; (8003998 <calibration_IMU+0x420>)
 8003922:	e9c2 3400 	strd	r3, r4, [r2]
     bGy /= 100;
 8003926:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <calibration_IMU+0x428>)
 8003928:	e9d3 0100 	ldrd	r0, r1, [r3]
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <calibration_IMU+0x424>)
 8003932:	f7fc ff37 	bl	80007a4 <__aeabi_ddiv>
 8003936:	4603      	mov	r3, r0
 8003938:	460c      	mov	r4, r1
 800393a:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <calibration_IMU+0x428>)
 800393c:	e9c2 3400 	strd	r3, r4, [r2]
     bGz /= 100;
 8003940:	4b18      	ldr	r3, [pc, #96]	; (80039a4 <calibration_IMU+0x42c>)
 8003942:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <calibration_IMU+0x424>)
 800394c:	f7fc ff2a 	bl	80007a4 <__aeabi_ddiv>
 8003950:	4603      	mov	r3, r0
 8003952:	460c      	mov	r4, r1
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <calibration_IMU+0x42c>)
 8003956:	e9c2 3400 	strd	r3, r4, [r2]

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 800395a:	2200      	movs	r2, #0
 800395c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003960:	4811      	ldr	r0, [pc, #68]	; (80039a8 <calibration_IMU+0x430>)
 8003962:	f001 f831 	bl	80049c8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8003966:	2200      	movs	r2, #0
 8003968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800396c:	480e      	ldr	r0, [pc, #56]	; (80039a8 <calibration_IMU+0x430>)
 800396e:	f001 f82b 	bl	80049c8 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8003972:	2200      	movs	r2, #0
 8003974:	2104      	movs	r1, #4
 8003976:	480c      	ldr	r0, [pc, #48]	; (80039a8 <calibration_IMU+0x430>)
 8003978:	f001 f826 	bl	80049c8 <HAL_GPIO_WritePin>
}
 800397c:	bf00      	nop
 800397e:	3734      	adds	r7, #52	; 0x34
 8003980:	46bd      	mov	sp, r7
 8003982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003984:	20000710 	.word	0x20000710
 8003988:	40d00000 	.word	0x40d00000
 800398c:	200006d8 	.word	0x200006d8
 8003990:	200004e8 	.word	0x200004e8
 8003994:	20000478 	.word	0x20000478
 8003998:	20000508 	.word	0x20000508
 800399c:	40590000 	.word	0x40590000
 80039a0:	20000458 	.word	0x20000458
 80039a4:	20000718 	.word	0x20000718
 80039a8:	40020400 	.word	0x40020400

080039ac <print_raw>:
//	    		Mag_x = (int16_t)(mag_data[0] | (mag_data[1]<<8));
//	    		Mag_y = (int16_t)(mag_data[2] | (mag_data[3]<<8));
//	    		Mag_z = (int16_t)(mag_data[4] | (mag_data[5]<<8));
//}

void print_raw(char mode){
 80039ac:	b5b0      	push	{r4, r5, r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	71fb      	strb	r3, [r7, #7]
	        char buffer[10];

            ftoa(Gyro_x, buffer, 2);
 80039b6:	4b86      	ldr	r3, [pc, #536]	; (8003bd0 <print_raw+0x224>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fc fd70 	bl	80004a0 <__aeabi_f2d>
 80039c0:	4604      	mov	r4, r0
 80039c2:	460d      	mov	r5, r1
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	2102      	movs	r1, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	ec45 4b10 	vmov	d0, r4, r5
 80039d0:	f7fe f86a 	bl	8001aa8 <ftoa>
            strcat(buffer," ");
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fc fbf5 	bl	80001c8 <strlen>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	f107 030c 	add.w	r3, r7, #12
 80039e6:	4413      	add	r3, r2
 80039e8:	497a      	ldr	r1, [pc, #488]	; (8003bd4 <print_raw+0x228>)
 80039ea:	461a      	mov	r2, r3
 80039ec:	460b      	mov	r3, r1
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 80039f2:	f107 030c 	add.w	r3, r7, #12
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fc fbe6 	bl	80001c8 <strlen>
 80039fc:	4603      	mov	r3, r0
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	f107 010c 	add.w	r1, r7, #12
 8003a04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a08:	4873      	ldr	r0, [pc, #460]	; (8003bd8 <print_raw+0x22c>)
 8003a0a:	f003 fd30 	bl	800746e <HAL_UART_Transmit>

            ftoa(Gyro_y, buffer, 2);
 8003a0e:	4b73      	ldr	r3, [pc, #460]	; (8003bdc <print_raw+0x230>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fd44 	bl	80004a0 <__aeabi_f2d>
 8003a18:	4604      	mov	r4, r0
 8003a1a:	460d      	mov	r5, r1
 8003a1c:	f107 030c 	add.w	r3, r7, #12
 8003a20:	2102      	movs	r1, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	ec45 4b10 	vmov	d0, r4, r5
 8003a28:	f7fe f83e 	bl	8001aa8 <ftoa>
            strcat(buffer," ");
 8003a2c:	f107 030c 	add.w	r3, r7, #12
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fc fbc9 	bl	80001c8 <strlen>
 8003a36:	4603      	mov	r3, r0
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	4413      	add	r3, r2
 8003a40:	4964      	ldr	r1, [pc, #400]	; (8003bd4 <print_raw+0x228>)
 8003a42:	461a      	mov	r2, r3
 8003a44:	460b      	mov	r3, r1
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 8003a4a:	f107 030c 	add.w	r3, r7, #12
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fc fbba 	bl	80001c8 <strlen>
 8003a54:	4603      	mov	r3, r0
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	f107 010c 	add.w	r1, r7, #12
 8003a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a60:	485d      	ldr	r0, [pc, #372]	; (8003bd8 <print_raw+0x22c>)
 8003a62:	f003 fd04 	bl	800746e <HAL_UART_Transmit>

            ftoa(Gyro_z, buffer, 2);
 8003a66:	4b5e      	ldr	r3, [pc, #376]	; (8003be0 <print_raw+0x234>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fc fd18 	bl	80004a0 <__aeabi_f2d>
 8003a70:	4604      	mov	r4, r0
 8003a72:	460d      	mov	r5, r1
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	ec45 4b10 	vmov	d0, r4, r5
 8003a80:	f7fe f812 	bl	8001aa8 <ftoa>
            strcat(buffer," ");
 8003a84:	f107 030c 	add.w	r3, r7, #12
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fb9d 	bl	80001c8 <strlen>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	461a      	mov	r2, r3
 8003a92:	f107 030c 	add.w	r3, r7, #12
 8003a96:	4413      	add	r3, r2
 8003a98:	494e      	ldr	r1, [pc, #312]	; (8003bd4 <print_raw+0x228>)
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fc fb8e 	bl	80001c8 <strlen>
 8003aac:	4603      	mov	r3, r0
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	f107 010c 	add.w	r1, r7, #12
 8003ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ab8:	4847      	ldr	r0, [pc, #284]	; (8003bd8 <print_raw+0x22c>)
 8003aba:	f003 fcd8 	bl	800746e <HAL_UART_Transmit>

            ftoa(Acc_x, buffer, 2);
 8003abe:	4b49      	ldr	r3, [pc, #292]	; (8003be4 <print_raw+0x238>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc fcec 	bl	80004a0 <__aeabi_f2d>
 8003ac8:	4604      	mov	r4, r0
 8003aca:	460d      	mov	r5, r1
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	2102      	movs	r1, #2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	ec45 4b10 	vmov	d0, r4, r5
 8003ad8:	f7fd ffe6 	bl	8001aa8 <ftoa>
            strcat(buffer," ");
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fb71 	bl	80001c8 <strlen>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f107 030c 	add.w	r3, r7, #12
 8003aee:	4413      	add	r3, r2
 8003af0:	4938      	ldr	r1, [pc, #224]	; (8003bd4 <print_raw+0x228>)
 8003af2:	461a      	mov	r2, r3
 8003af4:	460b      	mov	r3, r1
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 8003afa:	f107 030c 	add.w	r3, r7, #12
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fc fb62 	bl	80001c8 <strlen>
 8003b04:	4603      	mov	r3, r0
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	f107 010c 	add.w	r1, r7, #12
 8003b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b10:	4831      	ldr	r0, [pc, #196]	; (8003bd8 <print_raw+0x22c>)
 8003b12:	f003 fcac 	bl	800746e <HAL_UART_Transmit>

            ftoa(Acc_y, buffer, 2);
 8003b16:	4b34      	ldr	r3, [pc, #208]	; (8003be8 <print_raw+0x23c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fc fcc0 	bl	80004a0 <__aeabi_f2d>
 8003b20:	4604      	mov	r4, r0
 8003b22:	460d      	mov	r5, r1
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	ec45 4b10 	vmov	d0, r4, r5
 8003b30:	f7fd ffba 	bl	8001aa8 <ftoa>
            strcat(buffer," ");
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fc fb45 	bl	80001c8 <strlen>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	461a      	mov	r2, r3
 8003b42:	f107 030c 	add.w	r3, r7, #12
 8003b46:	4413      	add	r3, r2
 8003b48:	4922      	ldr	r1, [pc, #136]	; (8003bd4 <print_raw+0x228>)
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 8003b52:	f107 030c 	add.w	r3, r7, #12
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fc fb36 	bl	80001c8 <strlen>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	f107 010c 	add.w	r1, r7, #12
 8003b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b68:	481b      	ldr	r0, [pc, #108]	; (8003bd8 <print_raw+0x22c>)
 8003b6a:	f003 fc80 	bl	800746e <HAL_UART_Transmit>

            ftoa(Acc_z, buffer, 2);
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <print_raw+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fc fc94 	bl	80004a0 <__aeabi_f2d>
 8003b78:	4604      	mov	r4, r0
 8003b7a:	460d      	mov	r5, r1
 8003b7c:	f107 030c 	add.w	r3, r7, #12
 8003b80:	2102      	movs	r1, #2
 8003b82:	4618      	mov	r0, r3
 8003b84:	ec45 4b10 	vmov	d0, r4, r5
 8003b88:	f7fd ff8e 	bl	8001aa8 <ftoa>
            strcat(buffer,"\n");
 8003b8c:	f107 030c 	add.w	r3, r7, #12
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fb19 	bl	80001c8 <strlen>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f107 030c 	add.w	r3, r7, #12
 8003b9e:	4413      	add	r3, r2
 8003ba0:	4913      	ldr	r1, [pc, #76]	; (8003bf0 <print_raw+0x244>)
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	8013      	strh	r3, [r2, #0]
            HAL_UART_Transmit(&huart3,buffer, strlen(buffer),1000);
 8003baa:	f107 030c 	add.w	r3, r7, #12
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fb0a 	bl	80001c8 <strlen>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	f107 010c 	add.w	r1, r7, #12
 8003bbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bc0:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <print_raw+0x22c>)
 8003bc2:	f003 fc54 	bl	800746e <HAL_UART_Transmit>
////
//            print_magnet(mode);

}
 8003bc6:	bf00      	nop
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000444 	.word	0x20000444
 8003bd4:	08008efc 	.word	0x08008efc
 8003bd8:	20000258 	.word	0x20000258
 8003bdc:	200006f8 	.word	0x200006f8
 8003be0:	200004d0 	.word	0x200004d0
 8003be4:	200004e0 	.word	0x200004e0
 8003be8:	20000488 	.word	0x20000488
 8003bec:	20000420 	.word	0x20000420
 8003bf0:	08008f00 	.word	0x08008f00

08003bf4 <print_msg>:
	}
}
void print_Euler(){

}
void print_msg(char*msg){
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,msg, strlen(msg),1000);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fc fae3 	bl	80001c8 <strlen>
 8003c02:	4603      	mov	r3, r0
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4803      	ldr	r0, [pc, #12]	; (8003c1c <print_msg+0x28>)
 8003c0e:	f003 fc2e 	bl	800746e <HAL_UART_Transmit>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000258 	.word	0x20000258

08003c20 <sbus_decode>:
 *
 *  Created on: Nov 26, 2019
 *      Author: Đặng Lâm Tùng
 */
#include "sbus.h"
void sbus_decode(uint8_t data[6]){
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
	esc_value1 = (data[0] << 3) | ((data[1] & 0b11100000)>>5);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	b21a      	sxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3301      	adds	r3, #1
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	b21b      	sxth	r3, r3
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b21b      	sxth	r3, r3
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <sbus_decode+0xb4>)
 8003c44:	801a      	strh	r2, [r3, #0]
	esc_value2 = ((data[1] & 0b00011111)<<6)|((data[2] & 0b11111100)>>2);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3301      	adds	r3, #1
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	b21b      	sxth	r3, r3
 8003c50:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c54:	b21a      	sxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3302      	adds	r3, #2
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	b21b      	sxth	r3, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <sbus_decode+0xb8>)
 8003c6a:	801a      	strh	r2, [r3, #0]
	esc_value3 = (((data[2] &0b00000011)<<9)|(data[3]<<1))|((data[4] & 0b10000000)>>7);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3302      	adds	r3, #2
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	025b      	lsls	r3, r3, #9
 8003c74:	b21b      	sxth	r3, r3
 8003c76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c7a:	b21a      	sxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3303      	adds	r3, #3
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	b21b      	sxth	r3, r3
 8003c86:	4313      	orrs	r3, r2
 8003c88:	b21a      	sxth	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	09db      	lsrs	r3, r3, #7
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	b21b      	sxth	r3, r3
 8003c96:	4313      	orrs	r3, r2
 8003c98:	b21b      	sxth	r3, r3
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <sbus_decode+0xbc>)
 8003c9e:	801a      	strh	r2, [r3, #0]
	esc_value4 = ((data[4] & 0b01111111)<<4)|(data[5])>>4;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003cae:	b21a      	sxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3305      	adds	r3, #5
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	b21b      	sxth	r3, r3
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	b21b      	sxth	r3, r3
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <sbus_decode+0xc0>)
 8003cc4:	801a      	strh	r2, [r3, #0]
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	20000108 	.word	0x20000108
 8003cd8:	200000f0 	.word	0x200000f0
 8003cdc:	20000144 	.word	0x20000144
 8003ce0:	2000015c 	.word	0x2000015c

08003ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <HAL_MspInit+0x4c>)
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <HAL_MspInit+0x4c>)
 8003cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <HAL_MspInit+0x4c>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <HAL_MspInit+0x4c>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <HAL_MspInit+0x4c>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <HAL_MspInit+0x4c>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800

08003d34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <HAL_CRC_MspInit+0x3c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d10d      	bne.n	8003d62 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <HAL_CRC_MspInit+0x40>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_CRC_MspInit+0x40>)
 8003d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <HAL_CRC_MspInit+0x40>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40023000 	.word	0x40023000
 8003d74:	40023800 	.word	0x40023800

08003d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <HAL_I2C_MspInit+0x84>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d12c      	bne.n	8003df4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dbc:	2312      	movs	r3, #18
 8003dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dc8:	2304      	movs	r3, #4
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	480c      	ldr	r0, [pc, #48]	; (8003e04 <HAL_I2C_MspInit+0x8c>)
 8003dd4:	f000 fc5e 	bl	8004694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003de6:	6413      	str	r3, [r2, #64]	; 0x40
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <HAL_I2C_MspInit+0x88>)
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003df4:	bf00      	nop
 8003df6:	3728      	adds	r7, #40	; 0x28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40005400 	.word	0x40005400
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40020400 	.word	0x40020400

08003e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <HAL_SPI_MspInit+0x84>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d12b      	bne.n	8003e82 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <HAL_SPI_MspInit+0x88>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <HAL_SPI_MspInit+0x88>)
 8003e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e38:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3a:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <HAL_SPI_MspInit+0x88>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_SPI_MspInit+0x88>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <HAL_SPI_MspInit+0x88>)
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	6313      	str	r3, [r2, #48]	; 0x30
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_SPI_MspInit+0x88>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003e62:	23e0      	movs	r3, #224	; 0xe0
 8003e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003e72:	2305      	movs	r3, #5
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e76:	f107 0314 	add.w	r3, r7, #20
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4805      	ldr	r0, [pc, #20]	; (8003e94 <HAL_SPI_MspInit+0x8c>)
 8003e7e:	f000 fc09 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e82:	bf00      	nop
 8003e84:	3728      	adds	r7, #40	; 0x28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40013000 	.word	0x40013000
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40020000 	.word	0x40020000

08003e98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0b      	ldr	r2, [pc, #44]	; (8003ed4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10d      	bne.n	8003ec6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x40>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x40>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <HAL_TIM_PWM_MspInit+0x40>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40010000 	.word	0x40010000
 8003ed8:	40023800 	.word	0x40023800

08003edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a18      	ldr	r2, [pc, #96]	; (8003f4c <HAL_TIM_Base_MspInit+0x70>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d116      	bne.n	8003f1c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_TIM_Base_MspInit+0x74>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <HAL_TIM_Base_MspInit+0x74>)
 8003ef8:	f043 0302 	orr.w	r3, r3, #2
 8003efc:	6413      	str	r3, [r2, #64]	; 0x40
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <HAL_TIM_Base_MspInit+0x74>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	201d      	movs	r0, #29
 8003f10:	f000 fb4b 	bl	80045aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f14:	201d      	movs	r0, #29
 8003f16:	f000 fb64 	bl	80045e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f1a:	e012      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a0c      	ldr	r2, [pc, #48]	; (8003f54 <HAL_TIM_Base_MspInit+0x78>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d10d      	bne.n	8003f42 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_TIM_Base_MspInit+0x74>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <HAL_TIM_Base_MspInit+0x74>)
 8003f30:	f043 0304 	orr.w	r3, r3, #4
 8003f34:	6413      	str	r3, [r2, #64]	; 0x40
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_TIM_Base_MspInit+0x74>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40000800 	.word	0x40000800

08003f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f60:	f107 030c 	add.w	r3, r7, #12
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a12      	ldr	r2, [pc, #72]	; (8003fc0 <HAL_TIM_MspPostInit+0x68>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d11e      	bne.n	8003fb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_TIM_MspPostInit+0x6c>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <HAL_TIM_MspPostInit+0x6c>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <HAL_TIM_MspPostInit+0x6c>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003f96:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003f9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fac:	f107 030c 	add.w	r3, r7, #12
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <HAL_TIM_MspPostInit+0x70>)
 8003fb4:	f000 fb6e 	bl	8004694 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003fb8:	bf00      	nop
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40020000 	.word	0x40020000

08003fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08e      	sub	sp, #56	; 0x38
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	60da      	str	r2, [r3, #12]
 8003fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a57      	ldr	r2, [pc, #348]	; (8004148 <HAL_UART_MspInit+0x17c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d134      	bne.n	8004058 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	623b      	str	r3, [r7, #32]
 8003ff2:	4b56      	ldr	r3, [pc, #344]	; (800414c <HAL_UART_MspInit+0x180>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	4a55      	ldr	r2, [pc, #340]	; (800414c <HAL_UART_MspInit+0x180>)
 8003ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffe:	4b53      	ldr	r3, [pc, #332]	; (800414c <HAL_UART_MspInit+0x180>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	4b4f      	ldr	r3, [pc, #316]	; (800414c <HAL_UART_MspInit+0x180>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4a4e      	ldr	r2, [pc, #312]	; (800414c <HAL_UART_MspInit+0x180>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6313      	str	r3, [r2, #48]	; 0x30
 800401a:	4b4c      	ldr	r3, [pc, #304]	; (800414c <HAL_UART_MspInit+0x180>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004026:	2303      	movs	r3, #3
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402a:	2302      	movs	r3, #2
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800402e:	2301      	movs	r3, #1
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004032:	2303      	movs	r3, #3
 8004034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004036:	2308      	movs	r3, #8
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800403a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800403e:	4619      	mov	r1, r3
 8004040:	4843      	ldr	r0, [pc, #268]	; (8004150 <HAL_UART_MspInit+0x184>)
 8004042:	f000 fb27 	bl	8004694 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004046:	2200      	movs	r2, #0
 8004048:	2100      	movs	r1, #0
 800404a:	2034      	movs	r0, #52	; 0x34
 800404c:	f000 faad 	bl	80045aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004050:	2034      	movs	r0, #52	; 0x34
 8004052:	f000 fac6 	bl	80045e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004056:	e073      	b.n	8004140 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a3d      	ldr	r2, [pc, #244]	; (8004154 <HAL_UART_MspInit+0x188>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d134      	bne.n	80040cc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_UART_MspInit+0x180>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	4a38      	ldr	r2, [pc, #224]	; (800414c <HAL_UART_MspInit+0x180>)
 800406c:	f043 0310 	orr.w	r3, r3, #16
 8004070:	6453      	str	r3, [r2, #68]	; 0x44
 8004072:	4b36      	ldr	r3, [pc, #216]	; (800414c <HAL_UART_MspInit+0x180>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	4b32      	ldr	r3, [pc, #200]	; (800414c <HAL_UART_MspInit+0x180>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a31      	ldr	r2, [pc, #196]	; (800414c <HAL_UART_MspInit+0x180>)
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	6313      	str	r3, [r2, #48]	; 0x30
 800408e:	4b2f      	ldr	r3, [pc, #188]	; (800414c <HAL_UART_MspInit+0x180>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800409a:	23c0      	movs	r3, #192	; 0xc0
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a6:	2303      	movs	r3, #3
 80040a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040aa:	2307      	movs	r3, #7
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b2:	4619      	mov	r1, r3
 80040b4:	4828      	ldr	r0, [pc, #160]	; (8004158 <HAL_UART_MspInit+0x18c>)
 80040b6:	f000 faed 	bl	8004694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80040ba:	2200      	movs	r2, #0
 80040bc:	2101      	movs	r1, #1
 80040be:	2025      	movs	r0, #37	; 0x25
 80040c0:	f000 fa73 	bl	80045aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040c4:	2025      	movs	r0, #37	; 0x25
 80040c6:	f000 fa8c 	bl	80045e2 <HAL_NVIC_EnableIRQ>
}
 80040ca:	e039      	b.n	8004140 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART3)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a22      	ldr	r2, [pc, #136]	; (800415c <HAL_UART_MspInit+0x190>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d134      	bne.n	8004140 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <HAL_UART_MspInit+0x180>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4a1b      	ldr	r2, [pc, #108]	; (800414c <HAL_UART_MspInit+0x180>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6413      	str	r3, [r2, #64]	; 0x40
 80040e6:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_UART_MspInit+0x180>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	4b15      	ldr	r3, [pc, #84]	; (800414c <HAL_UART_MspInit+0x180>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	4a14      	ldr	r2, [pc, #80]	; (800414c <HAL_UART_MspInit+0x180>)
 80040fc:	f043 0302 	orr.w	r3, r3, #2
 8004100:	6313      	str	r3, [r2, #48]	; 0x30
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_UART_MspInit+0x180>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800410e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004114:	2302      	movs	r3, #2
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411c:	2303      	movs	r3, #3
 800411e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004120:	2307      	movs	r3, #7
 8004122:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004128:	4619      	mov	r1, r3
 800412a:	480b      	ldr	r0, [pc, #44]	; (8004158 <HAL_UART_MspInit+0x18c>)
 800412c:	f000 fab2 	bl	8004694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8004130:	2200      	movs	r2, #0
 8004132:	2101      	movs	r1, #1
 8004134:	2027      	movs	r0, #39	; 0x27
 8004136:	f000 fa38 	bl	80045aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800413a:	2027      	movs	r0, #39	; 0x27
 800413c:	f000 fa51 	bl	80045e2 <HAL_NVIC_EnableIRQ>
}
 8004140:	bf00      	nop
 8004142:	3738      	adds	r7, #56	; 0x38
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40004c00 	.word	0x40004c00
 800414c:	40023800 	.word	0x40023800
 8004150:	40020000 	.word	0x40020000
 8004154:	40011000 	.word	0x40011000
 8004158:	40020400 	.word	0x40020400
 800415c:	40004800 	.word	0x40004800

08004160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004172:	e7fe      	b.n	8004172 <HardFault_Handler+0x4>

08004174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004178:	e7fe      	b.n	8004178 <MemManage_Handler+0x4>

0800417a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800417e:	e7fe      	b.n	800417e <BusFault_Handler+0x4>

08004180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004184:	e7fe      	b.n	8004184 <UsageFault_Handler+0x4>

08004186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041a2:	b480      	push	{r7}
 80041a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041b4:	f000 f8dc 	bl	8004370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}

080041bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80041c0:	4802      	ldr	r0, [pc, #8]	; (80041cc <TIM3_IRQHandler+0x10>)
 80041c2:	f002 fa67 	bl	8006694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	200002ac 	.word	0x200002ac

080041d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041d4:	4802      	ldr	r0, [pc, #8]	; (80041e0 <USART1_IRQHandler+0x10>)
 80041d6:	f003 fa39 	bl	800764c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	200002f4 	.word	0x200002f4

080041e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80041e8:	4802      	ldr	r0, [pc, #8]	; (80041f4 <USART3_IRQHandler+0x10>)
 80041ea:	f003 fa2f 	bl	800764c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	20000258 	.word	0x20000258

080041f8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80041fc:	4802      	ldr	r0, [pc, #8]	; (8004208 <UART4_IRQHandler+0x10>)
 80041fe:	f003 fa25 	bl	800764c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000374 	.word	0x20000374

0800420c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004210:	4b16      	ldr	r3, [pc, #88]	; (800426c <SystemInit+0x60>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	4a15      	ldr	r2, [pc, #84]	; (800426c <SystemInit+0x60>)
 8004218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800421c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004220:	4b13      	ldr	r3, [pc, #76]	; (8004270 <SystemInit+0x64>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a12      	ldr	r2, [pc, #72]	; (8004270 <SystemInit+0x64>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800422c:	4b10      	ldr	r3, [pc, #64]	; (8004270 <SystemInit+0x64>)
 800422e:	2200      	movs	r2, #0
 8004230:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004232:	4b0f      	ldr	r3, [pc, #60]	; (8004270 <SystemInit+0x64>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a0e      	ldr	r2, [pc, #56]	; (8004270 <SystemInit+0x64>)
 8004238:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800423c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <SystemInit+0x64>)
 8004244:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <SystemInit+0x68>)
 8004246:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <SystemInit+0x64>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a08      	ldr	r2, [pc, #32]	; (8004270 <SystemInit+0x64>)
 800424e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004252:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004254:	4b06      	ldr	r3, [pc, #24]	; (8004270 <SystemInit+0x64>)
 8004256:	2200      	movs	r2, #0
 8004258:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800425a:	4b04      	ldr	r3, [pc, #16]	; (800426c <SystemInit+0x60>)
 800425c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004260:	609a      	str	r2, [r3, #8]
#endif
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	e000ed00 	.word	0xe000ed00
 8004270:	40023800 	.word	0x40023800
 8004274:	24003010 	.word	0x24003010

08004278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800427c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800427e:	e003      	b.n	8004288 <LoopCopyDataInit>

08004280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004286:	3104      	adds	r1, #4

08004288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004288:	480b      	ldr	r0, [pc, #44]	; (80042b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800428c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800428e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004290:	d3f6      	bcc.n	8004280 <CopyDataInit>
  ldr  r2, =_sbss
 8004292:	4a0b      	ldr	r2, [pc, #44]	; (80042c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004294:	e002      	b.n	800429c <LoopFillZerobss>

08004296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004298:	f842 3b04 	str.w	r3, [r2], #4

0800429c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800429c:	4b09      	ldr	r3, [pc, #36]	; (80042c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800429e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042a0:	d3f9      	bcc.n	8004296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042a2:	f7ff ffb3 	bl	800420c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042a6:	f003 ffd3 	bl	8008250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042aa:	f7fc ffd7 	bl	800125c <main>
  bx  lr    
 80042ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80042b4:	08008fd4 	.word	0x08008fd4
  ldr  r0, =_sdata
 80042b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80042bc:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 80042c0:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 80042c4:	20000744 	.word	0x20000744

080042c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042c8:	e7fe      	b.n	80042c8 <ADC_IRQHandler>
	...

080042cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042d0:	4b0e      	ldr	r3, [pc, #56]	; (800430c <HAL_Init+0x40>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <HAL_Init+0x40>)
 80042d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_Init+0x40>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a0a      	ldr	r2, [pc, #40]	; (800430c <HAL_Init+0x40>)
 80042e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_Init+0x40>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a07      	ldr	r2, [pc, #28]	; (800430c <HAL_Init+0x40>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f4:	2003      	movs	r0, #3
 80042f6:	f000 f94d 	bl	8004594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f000 f808 	bl	8004310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004300:	f7ff fcf0 	bl	8003ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40023c00 	.word	0x40023c00

08004310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004318:	4b12      	ldr	r3, [pc, #72]	; (8004364 <HAL_InitTick+0x54>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_InitTick+0x58>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	4619      	mov	r1, r3
 8004322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004326:	fbb3 f3f1 	udiv	r3, r3, r1
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	4618      	mov	r0, r3
 8004330:	f000 f965 	bl	80045fe <HAL_SYSTICK_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e00e      	b.n	800435c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b0f      	cmp	r3, #15
 8004342:	d80a      	bhi.n	800435a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004344:	2200      	movs	r2, #0
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800434c:	f000 f92d 	bl	80045aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004350:	4a06      	ldr	r2, [pc, #24]	; (800436c <HAL_InitTick+0x5c>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20000030 	.word	0x20000030
 8004368:	20000038 	.word	0x20000038
 800436c:	20000034 	.word	0x20000034

08004370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_IncTick+0x20>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	4b06      	ldr	r3, [pc, #24]	; (8004394 <HAL_IncTick+0x24>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4413      	add	r3, r2
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <HAL_IncTick+0x24>)
 8004382:	6013      	str	r3, [r2, #0]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000038 	.word	0x20000038
 8004394:	20000740 	.word	0x20000740

08004398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  return uwTick;
 800439c:	4b03      	ldr	r3, [pc, #12]	; (80043ac <HAL_GetTick+0x14>)
 800439e:	681b      	ldr	r3, [r3, #0]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20000740 	.word	0x20000740

080043b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043b8:	f7ff ffee 	bl	8004398 <HAL_GetTick>
 80043bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c8:	d005      	beq.n	80043d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_Delay+0x40>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043d6:	bf00      	nop
 80043d8:	f7ff ffde 	bl	8004398 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d8f7      	bhi.n	80043d8 <HAL_Delay+0x28>
  {
  }
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000038 	.word	0x20000038

080043f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <__NVIC_SetPriorityGrouping+0x44>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004410:	4013      	ands	r3, r2
 8004412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800441c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004426:	4a04      	ldr	r2, [pc, #16]	; (8004438 <__NVIC_SetPriorityGrouping+0x44>)
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	60d3      	str	r3, [r2, #12]
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <__NVIC_GetPriorityGrouping+0x18>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	0a1b      	lsrs	r3, r3, #8
 8004446:	f003 0307 	and.w	r3, r3, #7
}
 800444a:	4618      	mov	r0, r3
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004466:	2b00      	cmp	r3, #0
 8004468:	db0b      	blt.n	8004482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	f003 021f 	and.w	r2, r3, #31
 8004470:	4907      	ldr	r1, [pc, #28]	; (8004490 <__NVIC_EnableIRQ+0x38>)
 8004472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004476:	095b      	lsrs	r3, r3, #5
 8004478:	2001      	movs	r0, #1
 800447a:	fa00 f202 	lsl.w	r2, r0, r2
 800447e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	e000e100 	.word	0xe000e100

08004494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	6039      	str	r1, [r7, #0]
 800449e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	db0a      	blt.n	80044be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	490c      	ldr	r1, [pc, #48]	; (80044e0 <__NVIC_SetPriority+0x4c>)
 80044ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b2:	0112      	lsls	r2, r2, #4
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	440b      	add	r3, r1
 80044b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044bc:	e00a      	b.n	80044d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	4908      	ldr	r1, [pc, #32]	; (80044e4 <__NVIC_SetPriority+0x50>)
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	f003 030f 	and.w	r3, r3, #15
 80044ca:	3b04      	subs	r3, #4
 80044cc:	0112      	lsls	r2, r2, #4
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	440b      	add	r3, r1
 80044d2:	761a      	strb	r2, [r3, #24]
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	e000e100 	.word	0xe000e100
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b089      	sub	sp, #36	; 0x24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f1c3 0307 	rsb	r3, r3, #7
 8004502:	2b04      	cmp	r3, #4
 8004504:	bf28      	it	cs
 8004506:	2304      	movcs	r3, #4
 8004508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3304      	adds	r3, #4
 800450e:	2b06      	cmp	r3, #6
 8004510:	d902      	bls.n	8004518 <NVIC_EncodePriority+0x30>
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3b03      	subs	r3, #3
 8004516:	e000      	b.n	800451a <NVIC_EncodePriority+0x32>
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800451c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43da      	mvns	r2, r3
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	401a      	ands	r2, r3
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	fa01 f303 	lsl.w	r3, r1, r3
 800453a:	43d9      	mvns	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004540:	4313      	orrs	r3, r2
         );
}
 8004542:	4618      	mov	r0, r3
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3b01      	subs	r3, #1
 800455c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004560:	d301      	bcc.n	8004566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004562:	2301      	movs	r3, #1
 8004564:	e00f      	b.n	8004586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004566:	4a0a      	ldr	r2, [pc, #40]	; (8004590 <SysTick_Config+0x40>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3b01      	subs	r3, #1
 800456c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800456e:	210f      	movs	r1, #15
 8004570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004574:	f7ff ff8e 	bl	8004494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <SysTick_Config+0x40>)
 800457a:	2200      	movs	r2, #0
 800457c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <SysTick_Config+0x40>)
 8004580:	2207      	movs	r2, #7
 8004582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	e000e010 	.word	0xe000e010

08004594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ff29 	bl	80043f4 <__NVIC_SetPriorityGrouping>
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b086      	sub	sp, #24
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	4603      	mov	r3, r0
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
 80045b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045bc:	f7ff ff3e 	bl	800443c <__NVIC_GetPriorityGrouping>
 80045c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	6978      	ldr	r0, [r7, #20]
 80045c8:	f7ff ff8e 	bl	80044e8 <NVIC_EncodePriority>
 80045cc:	4602      	mov	r2, r0
 80045ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d2:	4611      	mov	r1, r2
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff5d 	bl	8004494 <__NVIC_SetPriority>
}
 80045da:	bf00      	nop
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	4603      	mov	r3, r0
 80045ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff ff31 	bl	8004458 <__NVIC_EnableIRQ>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff ffa2 	bl	8004550 <SysTick_Config>
 800460c:	4603      	mov	r3, r0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e00e      	b.n	8004646 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	795b      	ldrb	r3, [r3, #5]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d105      	bne.n	800463e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff fb7b 	bl	8003d34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d004      	beq.n	800466c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2280      	movs	r2, #128	; 0x80
 8004666:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e00c      	b.n	8004686 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2205      	movs	r2, #5
 8004670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
	...

08004694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004694:	b480      	push	{r7}
 8004696:	b089      	sub	sp, #36	; 0x24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e16b      	b.n	8004988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046b0:	2201      	movs	r2, #1
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	f040 815a 	bne.w	8004982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d00b      	beq.n	80046ee <HAL_GPIO_Init+0x5a>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d007      	beq.n	80046ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046e2:	2b11      	cmp	r3, #17
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b12      	cmp	r3, #18
 80046ec:	d130      	bne.n	8004750 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	2203      	movs	r2, #3
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4013      	ands	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	fa02 f303 	lsl.w	r3, r2, r3
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004724:	2201      	movs	r2, #1
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 0201 	and.w	r2, r3, #1
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d003      	beq.n	8004790 <HAL_GPIO_Init+0xfc>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b12      	cmp	r3, #18
 800478e:	d123      	bne.n	80047d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	08da      	lsrs	r2, r3, #3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3208      	adds	r2, #8
 8004798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	220f      	movs	r2, #15
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	08da      	lsrs	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3208      	adds	r2, #8
 80047d2:	69b9      	ldr	r1, [r7, #24]
 80047d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	4013      	ands	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0203 	and.w	r2, r3, #3
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	4313      	orrs	r3, r2
 8004804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80b4 	beq.w	8004982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	4b5f      	ldr	r3, [pc, #380]	; (800499c <HAL_GPIO_Init+0x308>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4a5e      	ldr	r2, [pc, #376]	; (800499c <HAL_GPIO_Init+0x308>)
 8004824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004828:	6453      	str	r3, [r2, #68]	; 0x44
 800482a:	4b5c      	ldr	r3, [pc, #368]	; (800499c <HAL_GPIO_Init+0x308>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004836:	4a5a      	ldr	r2, [pc, #360]	; (80049a0 <HAL_GPIO_Init+0x30c>)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	089b      	lsrs	r3, r3, #2
 800483c:	3302      	adds	r3, #2
 800483e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	220f      	movs	r2, #15
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a51      	ldr	r2, [pc, #324]	; (80049a4 <HAL_GPIO_Init+0x310>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d02b      	beq.n	80048ba <HAL_GPIO_Init+0x226>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a50      	ldr	r2, [pc, #320]	; (80049a8 <HAL_GPIO_Init+0x314>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d025      	beq.n	80048b6 <HAL_GPIO_Init+0x222>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a4f      	ldr	r2, [pc, #316]	; (80049ac <HAL_GPIO_Init+0x318>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01f      	beq.n	80048b2 <HAL_GPIO_Init+0x21e>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a4e      	ldr	r2, [pc, #312]	; (80049b0 <HAL_GPIO_Init+0x31c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d019      	beq.n	80048ae <HAL_GPIO_Init+0x21a>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a4d      	ldr	r2, [pc, #308]	; (80049b4 <HAL_GPIO_Init+0x320>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d013      	beq.n	80048aa <HAL_GPIO_Init+0x216>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4c      	ldr	r2, [pc, #304]	; (80049b8 <HAL_GPIO_Init+0x324>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00d      	beq.n	80048a6 <HAL_GPIO_Init+0x212>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4b      	ldr	r2, [pc, #300]	; (80049bc <HAL_GPIO_Init+0x328>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <HAL_GPIO_Init+0x20e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4a      	ldr	r2, [pc, #296]	; (80049c0 <HAL_GPIO_Init+0x32c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d101      	bne.n	800489e <HAL_GPIO_Init+0x20a>
 800489a:	2307      	movs	r3, #7
 800489c:	e00e      	b.n	80048bc <HAL_GPIO_Init+0x228>
 800489e:	2308      	movs	r3, #8
 80048a0:	e00c      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048a2:	2306      	movs	r3, #6
 80048a4:	e00a      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048a6:	2305      	movs	r3, #5
 80048a8:	e008      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048aa:	2304      	movs	r3, #4
 80048ac:	e006      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048ae:	2303      	movs	r3, #3
 80048b0:	e004      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e002      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_GPIO_Init+0x228>
 80048ba:	2300      	movs	r3, #0
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	f002 0203 	and.w	r2, r2, #3
 80048c2:	0092      	lsls	r2, r2, #2
 80048c4:	4093      	lsls	r3, r2
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048cc:	4934      	ldr	r1, [pc, #208]	; (80049a0 <HAL_GPIO_Init+0x30c>)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	3302      	adds	r3, #2
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048da:	4b3a      	ldr	r3, [pc, #232]	; (80049c4 <HAL_GPIO_Init+0x330>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4013      	ands	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048fe:	4a31      	ldr	r2, [pc, #196]	; (80049c4 <HAL_GPIO_Init+0x330>)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004904:	4b2f      	ldr	r3, [pc, #188]	; (80049c4 <HAL_GPIO_Init+0x330>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004928:	4a26      	ldr	r2, [pc, #152]	; (80049c4 <HAL_GPIO_Init+0x330>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800492e:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <HAL_GPIO_Init+0x330>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004952:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <HAL_GPIO_Init+0x330>)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <HAL_GPIO_Init+0x330>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800497c:	4a11      	ldr	r2, [pc, #68]	; (80049c4 <HAL_GPIO_Init+0x330>)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	f67f ae90 	bls.w	80046b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004990:	bf00      	nop
 8004992:	3724      	adds	r7, #36	; 0x24
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40023800 	.word	0x40023800
 80049a0:	40013800 	.word	0x40013800
 80049a4:	40020000 	.word	0x40020000
 80049a8:	40020400 	.word	0x40020400
 80049ac:	40020800 	.word	0x40020800
 80049b0:	40020c00 	.word	0x40020c00
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40021400 	.word	0x40021400
 80049bc:	40021800 	.word	0x40021800
 80049c0:	40021c00 	.word	0x40021c00
 80049c4:	40013c00 	.word	0x40013c00

080049c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
 80049d4:	4613      	mov	r3, r2
 80049d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049d8:	787b      	ldrb	r3, [r7, #1]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d003      	beq.n	80049e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049e4:	e003      	b.n	80049ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	041a      	lsls	r2, r3, #16
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	619a      	str	r2, [r3, #24]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	401a      	ands	r2, r3
 8004a0e:	887b      	ldrh	r3, [r7, #2]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d104      	bne.n	8004a1e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a14:	887b      	ldrh	r3, [r7, #2]
 8004a16:	041a      	lsls	r2, r3, #16
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004a1c:	e002      	b.n	8004a24 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004a1e:	887a      	ldrh	r2, [r7, #2]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	619a      	str	r2, [r3, #24]
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e11f      	b.n	8004c82 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff f98e 	bl	8003d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	; 0x24
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a94:	f001 fc96 	bl	80063c4 <HAL_RCC_GetPCLK1Freq>
 8004a98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	4a7b      	ldr	r2, [pc, #492]	; (8004c8c <HAL_I2C_Init+0x25c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d807      	bhi.n	8004ab4 <HAL_I2C_Init+0x84>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4a7a      	ldr	r2, [pc, #488]	; (8004c90 <HAL_I2C_Init+0x260>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	bf94      	ite	ls
 8004aac:	2301      	movls	r3, #1
 8004aae:	2300      	movhi	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e006      	b.n	8004ac2 <HAL_I2C_Init+0x92>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4a77      	ldr	r2, [pc, #476]	; (8004c94 <HAL_I2C_Init+0x264>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	bf94      	ite	ls
 8004abc:	2301      	movls	r3, #1
 8004abe:	2300      	movhi	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0db      	b.n	8004c82 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a72      	ldr	r2, [pc, #456]	; (8004c98 <HAL_I2C_Init+0x268>)
 8004ace:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad2:	0c9b      	lsrs	r3, r3, #18
 8004ad4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a64      	ldr	r2, [pc, #400]	; (8004c8c <HAL_I2C_Init+0x25c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d802      	bhi.n	8004b04 <HAL_I2C_Init+0xd4>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	3301      	adds	r3, #1
 8004b02:	e009      	b.n	8004b18 <HAL_I2C_Init+0xe8>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b0a:	fb02 f303 	mul.w	r3, r2, r3
 8004b0e:	4a63      	ldr	r2, [pc, #396]	; (8004c9c <HAL_I2C_Init+0x26c>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	099b      	lsrs	r3, r3, #6
 8004b16:	3301      	adds	r3, #1
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4956      	ldr	r1, [pc, #344]	; (8004c8c <HAL_I2C_Init+0x25c>)
 8004b34:	428b      	cmp	r3, r1
 8004b36:	d80d      	bhi.n	8004b54 <HAL_I2C_Init+0x124>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1e59      	subs	r1, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b46:	3301      	adds	r3, #1
 8004b48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	bf38      	it	cc
 8004b50:	2304      	movcc	r3, #4
 8004b52:	e04f      	b.n	8004bf4 <HAL_I2C_Init+0x1c4>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d111      	bne.n	8004b80 <HAL_I2C_Init+0x150>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e58      	subs	r0, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	440b      	add	r3, r1
 8004b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e012      	b.n	8004ba6 <HAL_I2C_Init+0x176>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	1e58      	subs	r0, r3, #1
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	0099      	lsls	r1, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b96:	3301      	adds	r3, #1
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_I2C_Init+0x17e>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e022      	b.n	8004bf4 <HAL_I2C_Init+0x1c4>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10e      	bne.n	8004bd4 <HAL_I2C_Init+0x1a4>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1e58      	subs	r0, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6859      	ldr	r1, [r3, #4]
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	440b      	add	r3, r1
 8004bc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd2:	e00f      	b.n	8004bf4 <HAL_I2C_Init+0x1c4>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	0099      	lsls	r1, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bea:	3301      	adds	r3, #1
 8004bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	6809      	ldr	r1, [r1, #0]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69da      	ldr	r2, [r3, #28]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6911      	ldr	r1, [r2, #16]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68d2      	ldr	r2, [r2, #12]
 8004c2e:	4311      	orrs	r1, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6812      	ldr	r2, [r2, #0]
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	000186a0 	.word	0x000186a0
 8004c90:	001e847f 	.word	0x001e847f
 8004c94:	003d08ff 	.word	0x003d08ff
 8004c98:	431bde83 	.word	0x431bde83
 8004c9c:	10624dd3 	.word	0x10624dd3

08004ca0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	607a      	str	r2, [r7, #4]
 8004caa:	461a      	mov	r2, r3
 8004cac:	460b      	mov	r3, r1
 8004cae:	817b      	strh	r3, [r7, #10]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cb4:	f7ff fb70 	bl	8004398 <HAL_GetTick>
 8004cb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	f040 80e0 	bne.w	8004e88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2319      	movs	r3, #25
 8004cce:	2201      	movs	r2, #1
 8004cd0:	4970      	ldr	r1, [pc, #448]	; (8004e94 <HAL_I2C_Master_Transmit+0x1f4>)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 fd84 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0d3      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <HAL_I2C_Master_Transmit+0x50>
 8004cec:	2302      	movs	r3, #2
 8004cee:	e0cc      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d007      	beq.n	8004d16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0201 	orr.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2221      	movs	r2, #33	; 0x21
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2210      	movs	r2, #16
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	893a      	ldrh	r2, [r7, #8]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a50      	ldr	r2, [pc, #320]	; (8004e98 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d58:	8979      	ldrh	r1, [r7, #10]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fbf0 	bl	8005544 <I2C_MasterRequestWrite>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e08d      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	613b      	str	r3, [r7, #16]
 8004d82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d84:	e066      	b.n	8004e54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	6a39      	ldr	r1, [r7, #32]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fdfe 	bl	800598c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d107      	bne.n	8004dae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e06b      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	781a      	ldrb	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d11b      	bne.n	8004e28 <HAL_I2C_Master_Transmit+0x188>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d017      	beq.n	8004e28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	781a      	ldrb	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	1c5a      	adds	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	6a39      	ldr	r1, [r7, #32]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 fdee 	bl	8005a0e <I2C_WaitOnBTFFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00d      	beq.n	8004e54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d107      	bne.n	8004e50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e01a      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d194      	bne.n	8004d86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e88:	2302      	movs	r3, #2
  }
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	00100002 	.word	0x00100002
 8004e98:	ffff0000 	.word	0xffff0000

08004e9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08c      	sub	sp, #48	; 0x30
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	817b      	strh	r3, [r7, #10]
 8004eac:	4613      	mov	r3, r2
 8004eae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb0:	f7ff fa72 	bl	8004398 <HAL_GetTick>
 8004eb4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b20      	cmp	r3, #32
 8004ec0:	f040 820b 	bne.w	80052da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	2319      	movs	r3, #25
 8004eca:	2201      	movs	r2, #1
 8004ecc:	497c      	ldr	r1, [pc, #496]	; (80050c0 <HAL_I2C_Master_Receive+0x224>)
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fc86 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
 8004edc:	e1fe      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_I2C_Master_Receive+0x50>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e1f7      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d007      	beq.n	8004f12 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 0201 	orr.w	r2, r2, #1
 8004f10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2222      	movs	r2, #34	; 0x22
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	893a      	ldrh	r2, [r7, #8]
 8004f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a5c      	ldr	r2, [pc, #368]	; (80050c4 <HAL_I2C_Master_Receive+0x228>)
 8004f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f54:	8979      	ldrh	r1, [r7, #10]
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 fb74 	bl	8005648 <I2C_MasterRequestRead>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e1b8      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d113      	bne.n	8004f9a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f72:	2300      	movs	r3, #0
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	623b      	str	r3, [r7, #32]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e18c      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d11b      	bne.n	8004fda <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	e16c      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d11b      	bne.n	800501a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005002:	2300      	movs	r3, #0
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	e14c      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005028:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005040:	e138      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005046:	2b03      	cmp	r3, #3
 8005048:	f200 80f1 	bhi.w	800522e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005050:	2b01      	cmp	r3, #1
 8005052:	d123      	bne.n	800509c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005056:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fd19 	bl	8005a90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e139      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	b2d2      	uxtb	r2, r2
 8005074:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a
 800509a:	e10b      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d14e      	bne.n	8005142 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	2200      	movs	r2, #0
 80050ac:	4906      	ldr	r1, [pc, #24]	; (80050c8 <HAL_I2C_Master_Receive+0x22c>)
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f000 fb96 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d008      	beq.n	80050cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e10e      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
 80050be:	bf00      	nop
 80050c0:	00100002 	.word	0x00100002
 80050c4:	ffff0000 	.word	0xffff0000
 80050c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	3b01      	subs	r3, #1
 8005108:	b29a      	uxth	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005140:	e0b8      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005148:	2200      	movs	r2, #0
 800514a:	4966      	ldr	r1, [pc, #408]	; (80052e4 <HAL_I2C_Master_Receive+0x448>)
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fb47 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0bf      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691a      	ldr	r2, [r3, #16]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29a      	uxth	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800519e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	2200      	movs	r2, #0
 80051a6:	494f      	ldr	r1, [pc, #316]	; (80052e4 <HAL_I2C_Master_Receive+0x448>)
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fb19 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e091      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800522c:	e042      	b.n	80052b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800522e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f000 fc2c 	bl	8005a90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e04c      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f003 0304 	and.w	r3, r3, #4
 800527e:	2b04      	cmp	r3, #4
 8005280:	d118      	bne.n	80052b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	1c5a      	adds	r2, r3, #1
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f47f aec2 	bne.w	8005042 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	e000      	b.n	80052dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052da:	2302      	movs	r3, #2
  }
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3728      	adds	r7, #40	; 0x28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	00010004 	.word	0x00010004

080052e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08a      	sub	sp, #40	; 0x28
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	460b      	mov	r3, r1
 80052f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80052f8:	f7ff f84e 	bl	8004398 <HAL_GetTick>
 80052fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80052fe:	2301      	movs	r3, #1
 8005300:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b20      	cmp	r3, #32
 800530c:	f040 8110 	bne.w	8005530 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	2319      	movs	r3, #25
 8005316:	2201      	movs	r2, #1
 8005318:	4988      	ldr	r1, [pc, #544]	; (800553c <HAL_I2C_IsDeviceReady+0x254>)
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fa60 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005326:	2302      	movs	r3, #2
 8005328:	e103      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_I2C_IsDeviceReady+0x50>
 8005334:	2302      	movs	r3, #2
 8005336:	e0fc      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x24a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b01      	cmp	r3, #1
 800534c:	d007      	beq.n	800535e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800536c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2224      	movs	r2, #36	; 0x24
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4a70      	ldr	r2, [pc, #448]	; (8005540 <HAL_I2C_IsDeviceReady+0x258>)
 8005380:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005390:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2200      	movs	r2, #0
 800539a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fa1e 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053be:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e0b6      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80053c4:	897b      	ldrh	r3, [r7, #10]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053d2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80053d4:	f7fe ffe0 	bl	8004398 <HAL_GetTick>
 80053d8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053fe:	bf0c      	ite	eq
 8005400:	2301      	moveq	r3, #1
 8005402:	2300      	movne	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005408:	e025      	b.n	8005456 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800540a:	f7fe ffc5 	bl	8004398 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d302      	bcc.n	8005420 <HAL_I2C_IsDeviceReady+0x138>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d103      	bne.n	8005428 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	22a0      	movs	r2, #160	; 0xa0
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b02      	cmp	r3, #2
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544c:	bf0c      	ite	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	2300      	movne	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2ba0      	cmp	r3, #160	; 0xa0
 8005460:	d005      	beq.n	800546e <HAL_I2C_IsDeviceReady+0x186>
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <HAL_I2C_IsDeviceReady+0x186>
 8005468:	7dbb      	ldrb	r3, [r7, #22]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0cd      	beq.n	800540a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b02      	cmp	r3, #2
 8005482:	d129      	bne.n	80054d8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005492:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	613b      	str	r3, [r7, #16]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	2319      	movs	r3, #25
 80054b0:	2201      	movs	r2, #1
 80054b2:	4922      	ldr	r1, [pc, #136]	; (800553c <HAL_I2C_IsDeviceReady+0x254>)
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f000 f993 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e036      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	e02c      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f0:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	2319      	movs	r3, #25
 80054f8:	2201      	movs	r2, #1
 80054fa:	4910      	ldr	r1, [pc, #64]	; (800553c <HAL_I2C_IsDeviceReady+0x254>)
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 f96f 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e012      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	3301      	adds	r3, #1
 8005510:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	f4ff af33 	bcc.w	8005382 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8005530:	2302      	movs	r3, #2
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	00100002 	.word	0x00100002
 8005540:	ffff0000 	.word	0xffff0000

08005544 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	607a      	str	r2, [r7, #4]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	460b      	mov	r3, r1
 8005552:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d006      	beq.n	800556e <I2C_MasterRequestWrite+0x2a>
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d003      	beq.n	800556e <I2C_MasterRequestWrite+0x2a>
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800556c:	d108      	bne.n	8005580 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e00b      	b.n	8005598 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005584:	2b12      	cmp	r3, #18
 8005586:	d107      	bne.n	8005598 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005596:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 f91b 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00c      	beq.n	80055ca <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e035      	b.n	8005636 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d2:	d108      	bne.n	80055e6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055d4:	897b      	ldrh	r3, [r7, #10]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055e2:	611a      	str	r2, [r3, #16]
 80055e4:	e01b      	b.n	800561e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055e6:	897b      	ldrh	r3, [r7, #10]
 80055e8:	11db      	asrs	r3, r3, #7
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	f003 0306 	and.w	r3, r3, #6
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f063 030f 	orn	r3, r3, #15
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	490f      	ldr	r1, [pc, #60]	; (8005640 <I2C_MasterRequestWrite+0xfc>)
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f942 	bl	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e010      	b.n	8005636 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005614:	897b      	ldrh	r3, [r7, #10]
 8005616:	b2da      	uxtb	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	4908      	ldr	r1, [pc, #32]	; (8005644 <I2C_MasterRequestWrite+0x100>)
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f932 	bl	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	00010008 	.word	0x00010008
 8005644:	00010002 	.word	0x00010002

08005648 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	607a      	str	r2, [r7, #4]
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	460b      	mov	r3, r1
 8005656:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800566c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b08      	cmp	r3, #8
 8005672:	d006      	beq.n	8005682 <I2C_MasterRequestRead+0x3a>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d003      	beq.n	8005682 <I2C_MasterRequestRead+0x3a>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005680:	d108      	bne.n	8005694 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e00b      	b.n	80056ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	2b11      	cmp	r3, #17
 800569a:	d107      	bne.n	80056ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f891 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e078      	b.n	80057d0 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e6:	d108      	bne.n	80056fa <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80056e8:	897b      	ldrh	r3, [r7, #10]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f043 0301 	orr.w	r3, r3, #1
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	611a      	str	r2, [r3, #16]
 80056f8:	e05e      	b.n	80057b8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80056fa:	897b      	ldrh	r3, [r7, #10]
 80056fc:	11db      	asrs	r3, r3, #7
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f003 0306 	and.w	r3, r3, #6
 8005704:	b2db      	uxtb	r3, r3
 8005706:	f063 030f 	orn	r3, r3, #15
 800570a:	b2da      	uxtb	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	4930      	ldr	r1, [pc, #192]	; (80057d8 <I2C_MasterRequestRead+0x190>)
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f8b8 	bl	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e053      	b.n	80057d0 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005728:	897b      	ldrh	r3, [r7, #10]
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4929      	ldr	r1, [pc, #164]	; (80057dc <I2C_MasterRequestRead+0x194>)
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f8a8 	bl	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e043      	b.n	80057d0 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	613b      	str	r3, [r7, #16]
 800575c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800576c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f830 	bl	80057e0 <I2C_WaitOnFlagUntilTimeout>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00c      	beq.n	80057a0 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800579a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e017      	b.n	80057d0 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80057a0:	897b      	ldrh	r3, [r7, #10]
 80057a2:	11db      	asrs	r3, r3, #7
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	f003 0306 	and.w	r3, r3, #6
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f063 030e 	orn	r3, r3, #14
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4907      	ldr	r1, [pc, #28]	; (80057dc <I2C_MasterRequestRead+0x194>)
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f865 	bl	800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e000      	b.n	80057d0 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	00010008 	.word	0x00010008
 80057dc:	00010002 	.word	0x00010002

080057e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	4613      	mov	r3, r2
 80057ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057f0:	e025      	b.n	800583e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057f8:	d021      	beq.n	800583e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fa:	f7fe fdcd 	bl	8004398 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d302      	bcc.n	8005810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d116      	bne.n	800583e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f043 0220 	orr.w	r2, r3, #32
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e023      	b.n	8005886 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	0c1b      	lsrs	r3, r3, #16
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b01      	cmp	r3, #1
 8005846:	d10d      	bne.n	8005864 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	43da      	mvns	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4013      	ands	r3, r2
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf0c      	ite	eq
 800585a:	2301      	moveq	r3, #1
 800585c:	2300      	movne	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	e00c      	b.n	800587e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	43da      	mvns	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4013      	ands	r3, r2
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	429a      	cmp	r2, r3
 8005882:	d0b6      	beq.n	80057f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
 800589a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800589c:	e051      	b.n	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ac:	d123      	bne.n	80058f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f043 0204 	orr.w	r2, r3, #4
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e046      	b.n	8005984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058fc:	d021      	beq.n	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058fe:	f7fe fd4b 	bl	8004398 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	429a      	cmp	r2, r3
 800590c:	d302      	bcc.n	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d116      	bne.n	8005942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f043 0220 	orr.w	r2, r3, #32
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e020      	b.n	8005984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	0c1b      	lsrs	r3, r3, #16
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b01      	cmp	r3, #1
 800594a:	d10c      	bne.n	8005966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	43da      	mvns	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4013      	ands	r3, r2
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf14      	ite	ne
 800595e:	2301      	movne	r3, #1
 8005960:	2300      	moveq	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	e00b      	b.n	800597e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	43da      	mvns	r2, r3
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4013      	ands	r3, r2
 8005972:	b29b      	uxth	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf14      	ite	ne
 8005978:	2301      	movne	r3, #1
 800597a:	2300      	moveq	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d18d      	bne.n	800589e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005998:	e02d      	b.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f8ce 	bl	8005b3c <I2C_IsAcknowledgeFailed>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e02d      	b.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059b0:	d021      	beq.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b2:	f7fe fcf1 	bl	8004398 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d302      	bcc.n	80059c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d116      	bne.n	80059f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	f043 0220 	orr.w	r2, r3, #32
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e007      	b.n	8005a06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d1ca      	bne.n	800599a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a1a:	e02d      	b.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f88d 	bl	8005b3c <I2C_IsAcknowledgeFailed>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e02d      	b.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a32:	d021      	beq.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a34:	f7fe fcb0 	bl	8004398 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d302      	bcc.n	8005a4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d116      	bne.n	8005a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e007      	b.n	8005a88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d1ca      	bne.n	8005a1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a9c:	e042      	b.n	8005b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b10      	cmp	r3, #16
 8005aaa:	d119      	bne.n	8005ae0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0210 	mvn.w	r2, #16
 8005ab4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e029      	b.n	8005b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae0:	f7fe fc5a 	bl	8004398 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d302      	bcc.n	8005af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d116      	bne.n	8005b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2220      	movs	r2, #32
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	f043 0220 	orr.w	r2, r3, #32
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e007      	b.n	8005b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d1b5      	bne.n	8005a9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b52:	d11b      	bne.n	8005b8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b78:	f043 0204 	orr.w	r2, r3, #4
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e000      	b.n	8005b8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e25b      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d075      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bba:	4ba3      	ldr	r3, [pc, #652]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d00c      	beq.n	8005be0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bc6:	4ba0      	ldr	r3, [pc, #640]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d112      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bd2:	4b9d      	ldr	r3, [pc, #628]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bde:	d10b      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be0:	4b99      	ldr	r3, [pc, #612]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d05b      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x108>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d157      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e236      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c00:	d106      	bne.n	8005c10 <HAL_RCC_OscConfig+0x74>
 8005c02:	4b91      	ldr	r3, [pc, #580]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a90      	ldr	r2, [pc, #576]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	e01d      	b.n	8005c4c <HAL_RCC_OscConfig+0xb0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c18:	d10c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x98>
 8005c1a:	4b8b      	ldr	r3, [pc, #556]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a8a      	ldr	r2, [pc, #552]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c24:	6013      	str	r3, [r2, #0]
 8005c26:	4b88      	ldr	r3, [pc, #544]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a87      	ldr	r2, [pc, #540]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	e00b      	b.n	8005c4c <HAL_RCC_OscConfig+0xb0>
 8005c34:	4b84      	ldr	r3, [pc, #528]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a83      	ldr	r2, [pc, #524]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	4b81      	ldr	r3, [pc, #516]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a80      	ldr	r2, [pc, #512]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d013      	beq.n	8005c7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c54:	f7fe fba0 	bl	8004398 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c5c:	f7fe fb9c 	bl	8004398 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b64      	cmp	r3, #100	; 0x64
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e1fb      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c6e:	4b76      	ldr	r3, [pc, #472]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0f0      	beq.n	8005c5c <HAL_RCC_OscConfig+0xc0>
 8005c7a:	e014      	b.n	8005ca6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7c:	f7fe fb8c 	bl	8004398 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c84:	f7fe fb88 	bl	8004398 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	; 0x64
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e1e7      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c96:	4b6c      	ldr	r3, [pc, #432]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f0      	bne.n	8005c84 <HAL_RCC_OscConfig+0xe8>
 8005ca2:	e000      	b.n	8005ca6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d063      	beq.n	8005d7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cb2:	4b65      	ldr	r3, [pc, #404]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 030c 	and.w	r3, r3, #12
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00b      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cbe:	4b62      	ldr	r3, [pc, #392]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d11c      	bne.n	8005d04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cca:	4b5f      	ldr	r3, [pc, #380]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d116      	bne.n	8005d04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cd6:	4b5c      	ldr	r3, [pc, #368]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <HAL_RCC_OscConfig+0x152>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d001      	beq.n	8005cee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e1bb      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cee:	4b56      	ldr	r3, [pc, #344]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	00db      	lsls	r3, r3, #3
 8005cfc:	4952      	ldr	r1, [pc, #328]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d02:	e03a      	b.n	8005d7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d020      	beq.n	8005d4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d0c:	4b4f      	ldr	r3, [pc, #316]	; (8005e4c <HAL_RCC_OscConfig+0x2b0>)
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d12:	f7fe fb41 	bl	8004398 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d1a:	f7fe fb3d 	bl	8004398 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e19c      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d2c:	4b46      	ldr	r3, [pc, #280]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d38:	4b43      	ldr	r3, [pc, #268]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4940      	ldr	r1, [pc, #256]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	600b      	str	r3, [r1, #0]
 8005d4c:	e015      	b.n	8005d7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d4e:	4b3f      	ldr	r3, [pc, #252]	; (8005e4c <HAL_RCC_OscConfig+0x2b0>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d54:	f7fe fb20 	bl	8004398 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d5c:	f7fe fb1c 	bl	8004398 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e17b      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6e:	4b36      	ldr	r3, [pc, #216]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d030      	beq.n	8005de8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d016      	beq.n	8005dbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d8e:	4b30      	ldr	r3, [pc, #192]	; (8005e50 <HAL_RCC_OscConfig+0x2b4>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fe fb00 	bl	8004398 <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9c:	f7fe fafc 	bl	8004398 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e15b      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dae:	4b26      	ldr	r3, [pc, #152]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x200>
 8005dba:	e015      	b.n	8005de8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dbc:	4b24      	ldr	r3, [pc, #144]	; (8005e50 <HAL_RCC_OscConfig+0x2b4>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dc2:	f7fe fae9 	bl	8004398 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005dca:	f7fe fae5 	bl	8004398 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e144      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ddc:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f0      	bne.n	8005dca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f000 80a0 	beq.w	8005f36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10f      	bne.n	8005e26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	4a0e      	ldr	r2, [pc, #56]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e14:	6413      	str	r3, [r2, #64]	; 0x40
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	60bb      	str	r3, [r7, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e22:	2301      	movs	r3, #1
 8005e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e26:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <HAL_RCC_OscConfig+0x2b8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d121      	bne.n	8005e76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e32:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <HAL_RCC_OscConfig+0x2b8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a07      	ldr	r2, [pc, #28]	; (8005e54 <HAL_RCC_OscConfig+0x2b8>)
 8005e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e3e:	f7fe faab 	bl	8004398 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e44:	e011      	b.n	8005e6a <HAL_RCC_OscConfig+0x2ce>
 8005e46:	bf00      	nop
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	42470000 	.word	0x42470000
 8005e50:	42470e80 	.word	0x42470e80
 8005e54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e58:	f7fe fa9e 	bl	8004398 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e0fd      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e6a:	4b81      	ldr	r3, [pc, #516]	; (8006070 <HAL_RCC_OscConfig+0x4d4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d106      	bne.n	8005e8c <HAL_RCC_OscConfig+0x2f0>
 8005e7e:	4b7d      	ldr	r3, [pc, #500]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	4a7c      	ldr	r2, [pc, #496]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	6713      	str	r3, [r2, #112]	; 0x70
 8005e8a:	e01c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x32a>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	2b05      	cmp	r3, #5
 8005e92:	d10c      	bne.n	8005eae <HAL_RCC_OscConfig+0x312>
 8005e94:	4b77      	ldr	r3, [pc, #476]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e98:	4a76      	ldr	r2, [pc, #472]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005e9a:	f043 0304 	orr.w	r3, r3, #4
 8005e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ea0:	4b74      	ldr	r3, [pc, #464]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	4a73      	ldr	r2, [pc, #460]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8005eac:	e00b      	b.n	8005ec6 <HAL_RCC_OscConfig+0x32a>
 8005eae:	4b71      	ldr	r3, [pc, #452]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	4a70      	ldr	r2, [pc, #448]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005eb4:	f023 0301 	bic.w	r3, r3, #1
 8005eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eba:	4b6e      	ldr	r3, [pc, #440]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ebe:	4a6d      	ldr	r2, [pc, #436]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005ec0:	f023 0304 	bic.w	r3, r3, #4
 8005ec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d015      	beq.n	8005efa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ece:	f7fe fa63 	bl	8004398 <HAL_GetTick>
 8005ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ed4:	e00a      	b.n	8005eec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ed6:	f7fe fa5f 	bl	8004398 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d901      	bls.n	8005eec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e0bc      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eec:	4b61      	ldr	r3, [pc, #388]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d0ee      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x33a>
 8005ef8:	e014      	b.n	8005f24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005efa:	f7fe fa4d 	bl	8004398 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f00:	e00a      	b.n	8005f18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f02:	f7fe fa49 	bl	8004398 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e0a6      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f18:	4b56      	ldr	r3, [pc, #344]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1ee      	bne.n	8005f02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d105      	bne.n	8005f36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f2a:	4b52      	ldr	r3, [pc, #328]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	4a51      	ldr	r2, [pc, #324]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005f30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 8092 	beq.w	8006064 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f40:	4b4c      	ldr	r3, [pc, #304]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d05c      	beq.n	8006006 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d141      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f54:	4b48      	ldr	r3, [pc, #288]	; (8006078 <HAL_RCC_OscConfig+0x4dc>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5a:	f7fe fa1d 	bl	8004398 <HAL_GetTick>
 8005f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f60:	e008      	b.n	8005f74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f62:	f7fe fa19 	bl	8004398 <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d901      	bls.n	8005f74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	e078      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f74:	4b3f      	ldr	r3, [pc, #252]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1f0      	bne.n	8005f62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8e:	019b      	lsls	r3, r3, #6
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	041b      	lsls	r3, r3, #16
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa2:	061b      	lsls	r3, r3, #24
 8005fa4:	4933      	ldr	r1, [pc, #204]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005faa:	4b33      	ldr	r3, [pc, #204]	; (8006078 <HAL_RCC_OscConfig+0x4dc>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb0:	f7fe f9f2 	bl	8004398 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fb8:	f7fe f9ee 	bl	8004398 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e04d      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fca:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0f0      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x41c>
 8005fd6:	e045      	b.n	8006064 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd8:	4b27      	ldr	r3, [pc, #156]	; (8006078 <HAL_RCC_OscConfig+0x4dc>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fde:	f7fe f9db 	bl	8004398 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe6:	f7fe f9d7 	bl	8004398 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e036      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff8:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f0      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x44a>
 8006004:	e02e      	b.n	8006064 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e029      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006012:	4b18      	ldr	r3, [pc, #96]	; (8006074 <HAL_RCC_OscConfig+0x4d8>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	429a      	cmp	r2, r3
 8006024:	d11c      	bne.n	8006060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006030:	429a      	cmp	r2, r3
 8006032:	d115      	bne.n	8006060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800603a:	4013      	ands	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006040:	4293      	cmp	r3, r2
 8006042:	d10d      	bne.n	8006060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800604e:	429a      	cmp	r2, r3
 8006050:	d106      	bne.n	8006060 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d001      	beq.n	8006064 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e000      	b.n	8006066 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3718      	adds	r7, #24
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40007000 	.word	0x40007000
 8006074:	40023800 	.word	0x40023800
 8006078:	42470060 	.word	0x42470060

0800607c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e0cc      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006090:	4b68      	ldr	r3, [pc, #416]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d90c      	bls.n	80060b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800609e:	4b65      	ldr	r3, [pc, #404]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a6:	4b63      	ldr	r3, [pc, #396]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d001      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0b8      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0302 	and.w	r3, r3, #2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d020      	beq.n	8006106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d005      	beq.n	80060dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060d0:	4b59      	ldr	r3, [pc, #356]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a58      	ldr	r2, [pc, #352]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80060da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d005      	beq.n	80060f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060e8:	4b53      	ldr	r3, [pc, #332]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	4a52      	ldr	r2, [pc, #328]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f4:	4b50      	ldr	r3, [pc, #320]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	494d      	ldr	r1, [pc, #308]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	4313      	orrs	r3, r2
 8006104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d044      	beq.n	800619c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d107      	bne.n	800612a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800611a:	4b47      	ldr	r3, [pc, #284]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d119      	bne.n	800615a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e07f      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b02      	cmp	r3, #2
 8006130:	d003      	beq.n	800613a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006136:	2b03      	cmp	r3, #3
 8006138:	d107      	bne.n	800614a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800613a:	4b3f      	ldr	r3, [pc, #252]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d109      	bne.n	800615a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e06f      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800614a:	4b3b      	ldr	r3, [pc, #236]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e067      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800615a:	4b37      	ldr	r3, [pc, #220]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f023 0203 	bic.w	r2, r3, #3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	4934      	ldr	r1, [pc, #208]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 8006168:	4313      	orrs	r3, r2
 800616a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800616c:	f7fe f914 	bl	8004398 <HAL_GetTick>
 8006170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006172:	e00a      	b.n	800618a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006174:	f7fe f910 	bl	8004398 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006182:	4293      	cmp	r3, r2
 8006184:	d901      	bls.n	800618a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e04f      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618a:	4b2b      	ldr	r3, [pc, #172]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f003 020c 	and.w	r2, r3, #12
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	429a      	cmp	r2, r3
 800619a:	d1eb      	bne.n	8006174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800619c:	4b25      	ldr	r3, [pc, #148]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d20c      	bcs.n	80061c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061aa:	4b22      	ldr	r3, [pc, #136]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b2:	4b20      	ldr	r3, [pc, #128]	; (8006234 <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d001      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e032      	b.n	800622a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0304 	and.w	r3, r3, #4
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80061d0:	4b19      	ldr	r3, [pc, #100]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4916      	ldr	r1, [pc, #88]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061ee:	4b12      	ldr	r3, [pc, #72]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	490e      	ldr	r1, [pc, #56]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006202:	f000 f821 	bl	8006248 <HAL_RCC_GetSysClockFreq>
 8006206:	4601      	mov	r1, r0
 8006208:	4b0b      	ldr	r3, [pc, #44]	; (8006238 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	091b      	lsrs	r3, r3, #4
 800620e:	f003 030f 	and.w	r3, r3, #15
 8006212:	4a0a      	ldr	r2, [pc, #40]	; (800623c <HAL_RCC_ClockConfig+0x1c0>)
 8006214:	5cd3      	ldrb	r3, [r2, r3]
 8006216:	fa21 f303 	lsr.w	r3, r1, r3
 800621a:	4a09      	ldr	r2, [pc, #36]	; (8006240 <HAL_RCC_ClockConfig+0x1c4>)
 800621c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <HAL_RCC_ClockConfig+0x1c8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe f874 	bl	8004310 <HAL_InitTick>

  return HAL_OK;
 8006228:	2300      	movs	r3, #0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	40023c00 	.word	0x40023c00
 8006238:	40023800 	.word	0x40023800
 800623c:	08008f60 	.word	0x08008f60
 8006240:	20000030 	.word	0x20000030
 8006244:	20000034 	.word	0x20000034

08006248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	607b      	str	r3, [r7, #4]
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	2300      	movs	r3, #0
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800625a:	2300      	movs	r3, #0
 800625c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800625e:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 030c 	and.w	r3, r3, #12
 8006266:	2b04      	cmp	r3, #4
 8006268:	d007      	beq.n	800627a <HAL_RCC_GetSysClockFreq+0x32>
 800626a:	2b08      	cmp	r3, #8
 800626c:	d008      	beq.n	8006280 <HAL_RCC_GetSysClockFreq+0x38>
 800626e:	2b00      	cmp	r3, #0
 8006270:	f040 808d 	bne.w	800638e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006274:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006276:	60bb      	str	r3, [r7, #8]
       break;
 8006278:	e08c      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800627a:	4b4b      	ldr	r3, [pc, #300]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800627c:	60bb      	str	r3, [r7, #8]
      break;
 800627e:	e089      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006280:	4b47      	ldr	r3, [pc, #284]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006288:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800628a:	4b45      	ldr	r3, [pc, #276]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x158>)
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d023      	beq.n	80062de <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006296:	4b42      	ldr	r3, [pc, #264]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	099b      	lsrs	r3, r3, #6
 800629c:	f04f 0400 	mov.w	r4, #0
 80062a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	ea03 0501 	and.w	r5, r3, r1
 80062ac:	ea04 0602 	and.w	r6, r4, r2
 80062b0:	4a3d      	ldr	r2, [pc, #244]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80062b2:	fb02 f106 	mul.w	r1, r2, r6
 80062b6:	2200      	movs	r2, #0
 80062b8:	fb02 f205 	mul.w	r2, r2, r5
 80062bc:	440a      	add	r2, r1
 80062be:	493a      	ldr	r1, [pc, #232]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80062c0:	fba5 0101 	umull	r0, r1, r5, r1
 80062c4:	1853      	adds	r3, r2, r1
 80062c6:	4619      	mov	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f04f 0400 	mov.w	r4, #0
 80062ce:	461a      	mov	r2, r3
 80062d0:	4623      	mov	r3, r4
 80062d2:	f7fa fc85 	bl	8000be0 <__aeabi_uldivmod>
 80062d6:	4603      	mov	r3, r0
 80062d8:	460c      	mov	r4, r1
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	e049      	b.n	8006372 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062de:	4b30      	ldr	r3, [pc, #192]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x158>)
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	099b      	lsrs	r3, r3, #6
 80062e4:	f04f 0400 	mov.w	r4, #0
 80062e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	ea03 0501 	and.w	r5, r3, r1
 80062f4:	ea04 0602 	and.w	r6, r4, r2
 80062f8:	4629      	mov	r1, r5
 80062fa:	4632      	mov	r2, r6
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	f04f 0400 	mov.w	r4, #0
 8006304:	0154      	lsls	r4, r2, #5
 8006306:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800630a:	014b      	lsls	r3, r1, #5
 800630c:	4619      	mov	r1, r3
 800630e:	4622      	mov	r2, r4
 8006310:	1b49      	subs	r1, r1, r5
 8006312:	eb62 0206 	sbc.w	r2, r2, r6
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	f04f 0400 	mov.w	r4, #0
 800631e:	0194      	lsls	r4, r2, #6
 8006320:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006324:	018b      	lsls	r3, r1, #6
 8006326:	1a5b      	subs	r3, r3, r1
 8006328:	eb64 0402 	sbc.w	r4, r4, r2
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	00e2      	lsls	r2, r4, #3
 8006336:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800633a:	00d9      	lsls	r1, r3, #3
 800633c:	460b      	mov	r3, r1
 800633e:	4614      	mov	r4, r2
 8006340:	195b      	adds	r3, r3, r5
 8006342:	eb44 0406 	adc.w	r4, r4, r6
 8006346:	f04f 0100 	mov.w	r1, #0
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	02a2      	lsls	r2, r4, #10
 8006350:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006354:	0299      	lsls	r1, r3, #10
 8006356:	460b      	mov	r3, r1
 8006358:	4614      	mov	r4, r2
 800635a:	4618      	mov	r0, r3
 800635c:	4621      	mov	r1, r4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f04f 0400 	mov.w	r4, #0
 8006364:	461a      	mov	r2, r3
 8006366:	4623      	mov	r3, r4
 8006368:	f7fa fc3a 	bl	8000be0 <__aeabi_uldivmod>
 800636c:	4603      	mov	r3, r0
 800636e:	460c      	mov	r4, r1
 8006370:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006372:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x158>)
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	0c1b      	lsrs	r3, r3, #16
 8006378:	f003 0303 	and.w	r3, r3, #3
 800637c:	3301      	adds	r3, #1
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	fbb2 f3f3 	udiv	r3, r2, r3
 800638a:	60bb      	str	r3, [r7, #8]
      break;
 800638c:	e002      	b.n	8006394 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006390:	60bb      	str	r3, [r7, #8]
      break;
 8006392:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006394:	68bb      	ldr	r3, [r7, #8]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800639e:	bf00      	nop
 80063a0:	40023800 	.word	0x40023800
 80063a4:	00f42400 	.word	0x00f42400
 80063a8:	00b71b00 	.word	0x00b71b00

080063ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063b0:	4b03      	ldr	r3, [pc, #12]	; (80063c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80063b2:	681b      	ldr	r3, [r3, #0]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	20000030 	.word	0x20000030

080063c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063c8:	f7ff fff0 	bl	80063ac <HAL_RCC_GetHCLKFreq>
 80063cc:	4601      	mov	r1, r0
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	0a9b      	lsrs	r3, r3, #10
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	4a03      	ldr	r2, [pc, #12]	; (80063e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063da:	5cd3      	ldrb	r3, [r2, r3]
 80063dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	40023800 	.word	0x40023800
 80063e8:	08008f70 	.word	0x08008f70

080063ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063f0:	f7ff ffdc 	bl	80063ac <HAL_RCC_GetHCLKFreq>
 80063f4:	4601      	mov	r1, r0
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <HAL_RCC_GetPCLK2Freq+0x20>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	0b5b      	lsrs	r3, r3, #13
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	4a03      	ldr	r2, [pc, #12]	; (8006410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006402:	5cd3      	ldrb	r3, [r2, r3]
 8006404:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006408:	4618      	mov	r0, r3
 800640a:	bd80      	pop	{r7, pc}
 800640c:	40023800 	.word	0x40023800
 8006410:	08008f70 	.word	0x08008f70

08006414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e056      	b.n	80064d4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fd fce1 	bl	8003e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2202      	movs	r2, #2
 800644a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	431a      	orrs	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	ea42 0103 	orr.w	r1, r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	0c1b      	lsrs	r3, r3, #16
 80064a4:	f003 0104 	and.w	r1, r3, #4
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69da      	ldr	r2, [r3, #28]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e01d      	b.n	800652a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7fd fcea 	bl	8003edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f000 fb68 	bl	8006bf0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b06      	cmp	r3, #6
 8006552:	d007      	beq.n	8006564 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3714      	adds	r7, #20
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f042 0201 	orr.w	r2, r2, #1
 8006590:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2b06      	cmp	r3, #6
 80065a2:	d007      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0201 	orr.w	r2, r2, #1
 80065b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e01d      	b.n	8006610 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d106      	bne.n	80065ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7fd fc55 	bl	8003e98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2202      	movs	r2, #2
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f000 faf5 	bl	8006bf0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2201      	movs	r2, #1
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 fdca 	bl	80071c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a15      	ldr	r2, [pc, #84]	; (800668c <HAL_TIM_PWM_Start+0x74>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d004      	beq.n	8006644 <HAL_TIM_PWM_Start+0x2c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a14      	ldr	r2, [pc, #80]	; (8006690 <HAL_TIM_PWM_Start+0x78>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d101      	bne.n	8006648 <HAL_TIM_PWM_Start+0x30>
 8006644:	2301      	movs	r3, #1
 8006646:	e000      	b.n	800664a <HAL_TIM_PWM_Start+0x32>
 8006648:	2300      	movs	r3, #0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800665c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b06      	cmp	r3, #6
 800666e:	d007      	beq.n	8006680 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0201 	orr.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40010000 	.word	0x40010000
 8006690:	40010400 	.word	0x40010400

08006694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d122      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d11b      	bne.n	80066f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0202 	mvn.w	r2, #2
 80066c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa6b 	bl	8006bb2 <HAL_TIM_IC_CaptureCallback>
 80066dc:	e005      	b.n	80066ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fa5d 	bl	8006b9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fa6e 	bl	8006bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b04      	cmp	r3, #4
 80066fc:	d122      	bne.n	8006744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b04      	cmp	r3, #4
 800670a:	d11b      	bne.n	8006744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0204 	mvn.w	r2, #4
 8006714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2202      	movs	r2, #2
 800671a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa41 	bl	8006bb2 <HAL_TIM_IC_CaptureCallback>
 8006730:	e005      	b.n	800673e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa33 	bl	8006b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa44 	bl	8006bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b08      	cmp	r3, #8
 8006750:	d122      	bne.n	8006798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b08      	cmp	r3, #8
 800675e:	d11b      	bne.n	8006798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f06f 0208 	mvn.w	r2, #8
 8006768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2204      	movs	r2, #4
 800676e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d003      	beq.n	8006786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa17 	bl	8006bb2 <HAL_TIM_IC_CaptureCallback>
 8006784:	e005      	b.n	8006792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa09 	bl	8006b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fa1a 	bl	8006bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d122      	bne.n	80067ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b10      	cmp	r3, #16
 80067b2:	d11b      	bne.n	80067ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0210 	mvn.w	r2, #16
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2208      	movs	r2, #8
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9ed 	bl	8006bb2 <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9df 	bl	8006b9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 f9f0 	bl	8006bc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d10e      	bne.n	8006818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d107      	bne.n	8006818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0201 	mvn.w	r2, #1
 8006810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fb f92c 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b80      	cmp	r3, #128	; 0x80
 8006824:	d10e      	bne.n	8006844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006830:	2b80      	cmp	r3, #128	; 0x80
 8006832:	d107      	bne.n	8006844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800683c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fdbe 	bl	80073c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684e:	2b40      	cmp	r3, #64	; 0x40
 8006850:	d10e      	bne.n	8006870 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685c:	2b40      	cmp	r3, #64	; 0x40
 800685e:	d107      	bne.n	8006870 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f9b5 	bl	8006bda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f003 0320 	and.w	r3, r3, #32
 800687a:	2b20      	cmp	r3, #32
 800687c:	d10e      	bne.n	800689c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f003 0320 	and.w	r3, r3, #32
 8006888:	2b20      	cmp	r3, #32
 800688a:	d107      	bne.n	800689c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f06f 0220 	mvn.w	r2, #32
 8006894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fd88 	bl	80073ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d101      	bne.n	80068be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80068ba:	2302      	movs	r3, #2
 80068bc:	e0b4      	b.n	8006a28 <HAL_TIM_PWM_ConfigChannel+0x184>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2202      	movs	r2, #2
 80068ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b0c      	cmp	r3, #12
 80068d2:	f200 809f 	bhi.w	8006a14 <HAL_TIM_PWM_ConfigChannel+0x170>
 80068d6:	a201      	add	r2, pc, #4	; (adr r2, 80068dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80068d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068dc:	08006911 	.word	0x08006911
 80068e0:	08006a15 	.word	0x08006a15
 80068e4:	08006a15 	.word	0x08006a15
 80068e8:	08006a15 	.word	0x08006a15
 80068ec:	08006951 	.word	0x08006951
 80068f0:	08006a15 	.word	0x08006a15
 80068f4:	08006a15 	.word	0x08006a15
 80068f8:	08006a15 	.word	0x08006a15
 80068fc:	08006993 	.word	0x08006993
 8006900:	08006a15 	.word	0x08006a15
 8006904:	08006a15 	.word	0x08006a15
 8006908:	08006a15 	.word	0x08006a15
 800690c:	080069d3 	.word	0x080069d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68b9      	ldr	r1, [r7, #8]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fa0a 	bl	8006d30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f042 0208 	orr.w	r2, r2, #8
 800692a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 0204 	bic.w	r2, r2, #4
 800693a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6999      	ldr	r1, [r3, #24]
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	619a      	str	r2, [r3, #24]
      break;
 800694e:	e062      	b.n	8006a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fa5a 	bl	8006e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800696a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699a      	ldr	r2, [r3, #24]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800697a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6999      	ldr	r1, [r3, #24]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	021a      	lsls	r2, r3, #8
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	619a      	str	r2, [r3, #24]
      break;
 8006990:	e041      	b.n	8006a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	4618      	mov	r0, r3
 800699a:	f000 faaf 	bl	8006efc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69da      	ldr	r2, [r3, #28]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0208 	orr.w	r2, r2, #8
 80069ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f022 0204 	bic.w	r2, r2, #4
 80069bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69d9      	ldr	r1, [r3, #28]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	61da      	str	r2, [r3, #28]
      break;
 80069d0:	e021      	b.n	8006a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fb03 	bl	8006fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69d9      	ldr	r1, [r3, #28]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	021a      	lsls	r2, r3, #8
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	61da      	str	r2, [r3, #28]
      break;
 8006a12:	e000      	b.n	8006a16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006a14:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIM_ConfigClockSource+0x18>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e0a6      	b.n	8006b96 <HAL_TIM_ConfigClockSource+0x166>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b40      	cmp	r3, #64	; 0x40
 8006a7e:	d067      	beq.n	8006b50 <HAL_TIM_ConfigClockSource+0x120>
 8006a80:	2b40      	cmp	r3, #64	; 0x40
 8006a82:	d80b      	bhi.n	8006a9c <HAL_TIM_ConfigClockSource+0x6c>
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d073      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x140>
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d802      	bhi.n	8006a92 <HAL_TIM_ConfigClockSource+0x62>
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d06f      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006a90:	e078      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d06c      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x140>
 8006a96:	2b30      	cmp	r3, #48	; 0x30
 8006a98:	d06a      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006a9a:	e073      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006a9c:	2b70      	cmp	r3, #112	; 0x70
 8006a9e:	d00d      	beq.n	8006abc <HAL_TIM_ConfigClockSource+0x8c>
 8006aa0:	2b70      	cmp	r3, #112	; 0x70
 8006aa2:	d804      	bhi.n	8006aae <HAL_TIM_ConfigClockSource+0x7e>
 8006aa4:	2b50      	cmp	r3, #80	; 0x50
 8006aa6:	d033      	beq.n	8006b10 <HAL_TIM_ConfigClockSource+0xe0>
 8006aa8:	2b60      	cmp	r3, #96	; 0x60
 8006aaa:	d041      	beq.n	8006b30 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006aac:	e06a      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab2:	d066      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0x152>
 8006ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab8:	d017      	beq.n	8006aea <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006aba:	e063      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	6899      	ldr	r1, [r3, #8]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f000 fb5a 	bl	8007184 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ade:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	609a      	str	r2, [r3, #8]
      break;
 8006ae8:	e04c      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	6899      	ldr	r1, [r3, #8]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685a      	ldr	r2, [r3, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f000 fb43 	bl	8007184 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689a      	ldr	r2, [r3, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b0c:	609a      	str	r2, [r3, #8]
      break;
 8006b0e:	e039      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6818      	ldr	r0, [r3, #0]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	6859      	ldr	r1, [r3, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f000 fab7 	bl	8007090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2150      	movs	r1, #80	; 0x50
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fb10 	bl	800714e <TIM_ITRx_SetConfig>
      break;
 8006b2e:	e029      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6859      	ldr	r1, [r3, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f000 fad6 	bl	80070ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2160      	movs	r1, #96	; 0x60
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fb00 	bl	800714e <TIM_ITRx_SetConfig>
      break;
 8006b4e:	e019      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	6859      	ldr	r1, [r3, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f000 fa97 	bl	8007090 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2140      	movs	r1, #64	; 0x40
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 faf0 	bl	800714e <TIM_ITRx_SetConfig>
      break;
 8006b6e:	e009      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	f000 fae7 	bl	800714e <TIM_ITRx_SetConfig>
      break;
 8006b80:	e000      	b.n	8006b84 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a40      	ldr	r2, [pc, #256]	; (8006d04 <TIM_Base_SetConfig+0x114>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d013      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0e:	d00f      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a3d      	ldr	r2, [pc, #244]	; (8006d08 <TIM_Base_SetConfig+0x118>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d00b      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a3c      	ldr	r2, [pc, #240]	; (8006d0c <TIM_Base_SetConfig+0x11c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d007      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a3b      	ldr	r2, [pc, #236]	; (8006d10 <TIM_Base_SetConfig+0x120>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <TIM_Base_SetConfig+0x40>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a3a      	ldr	r2, [pc, #232]	; (8006d14 <TIM_Base_SetConfig+0x124>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d108      	bne.n	8006c42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a2f      	ldr	r2, [pc, #188]	; (8006d04 <TIM_Base_SetConfig+0x114>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d02b      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c50:	d027      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <TIM_Base_SetConfig+0x118>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d023      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a2b      	ldr	r2, [pc, #172]	; (8006d0c <TIM_Base_SetConfig+0x11c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01f      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2a      	ldr	r2, [pc, #168]	; (8006d10 <TIM_Base_SetConfig+0x120>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d01b      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a29      	ldr	r2, [pc, #164]	; (8006d14 <TIM_Base_SetConfig+0x124>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d017      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a28      	ldr	r2, [pc, #160]	; (8006d18 <TIM_Base_SetConfig+0x128>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a27      	ldr	r2, [pc, #156]	; (8006d1c <TIM_Base_SetConfig+0x12c>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00f      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a26      	ldr	r2, [pc, #152]	; (8006d20 <TIM_Base_SetConfig+0x130>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00b      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a25      	ldr	r2, [pc, #148]	; (8006d24 <TIM_Base_SetConfig+0x134>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d007      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a24      	ldr	r2, [pc, #144]	; (8006d28 <TIM_Base_SetConfig+0x138>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_Base_SetConfig+0xb2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a23      	ldr	r2, [pc, #140]	; (8006d2c <TIM_Base_SetConfig+0x13c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d108      	bne.n	8006cb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a0a      	ldr	r2, [pc, #40]	; (8006d04 <TIM_Base_SetConfig+0x114>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d003      	beq.n	8006ce8 <TIM_Base_SetConfig+0xf8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a0c      	ldr	r2, [pc, #48]	; (8006d14 <TIM_Base_SetConfig+0x124>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d103      	bne.n	8006cf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	615a      	str	r2, [r3, #20]
}
 8006cf6:	bf00      	nop
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	40010000 	.word	0x40010000
 8006d08:	40000400 	.word	0x40000400
 8006d0c:	40000800 	.word	0x40000800
 8006d10:	40000c00 	.word	0x40000c00
 8006d14:	40010400 	.word	0x40010400
 8006d18:	40014000 	.word	0x40014000
 8006d1c:	40014400 	.word	0x40014400
 8006d20:	40014800 	.word	0x40014800
 8006d24:	40001800 	.word	0x40001800
 8006d28:	40001c00 	.word	0x40001c00
 8006d2c:	40002000 	.word	0x40002000

08006d30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f023 0201 	bic.w	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f023 0302 	bic.w	r3, r3, #2
 8006d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a20      	ldr	r2, [pc, #128]	; (8006e08 <TIM_OC1_SetConfig+0xd8>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d003      	beq.n	8006d94 <TIM_OC1_SetConfig+0x64>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <TIM_OC1_SetConfig+0xdc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d10c      	bne.n	8006dae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f023 0308 	bic.w	r3, r3, #8
 8006d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f023 0304 	bic.w	r3, r3, #4
 8006dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <TIM_OC1_SetConfig+0xd8>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d003      	beq.n	8006dbe <TIM_OC1_SetConfig+0x8e>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a14      	ldr	r2, [pc, #80]	; (8006e0c <TIM_OC1_SetConfig+0xdc>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d111      	bne.n	8006de2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	621a      	str	r2, [r3, #32]
}
 8006dfc:	bf00      	nop
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40010400 	.word	0x40010400

08006e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f023 0210 	bic.w	r2, r3, #16
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	021b      	lsls	r3, r3, #8
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f023 0320 	bic.w	r3, r3, #32
 8006e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	011b      	lsls	r3, r3, #4
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a22      	ldr	r2, [pc, #136]	; (8006ef4 <TIM_OC2_SetConfig+0xe4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d003      	beq.n	8006e78 <TIM_OC2_SetConfig+0x68>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a21      	ldr	r2, [pc, #132]	; (8006ef8 <TIM_OC2_SetConfig+0xe8>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d10d      	bne.n	8006e94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	011b      	lsls	r3, r3, #4
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a17      	ldr	r2, [pc, #92]	; (8006ef4 <TIM_OC2_SetConfig+0xe4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d003      	beq.n	8006ea4 <TIM_OC2_SetConfig+0x94>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a16      	ldr	r2, [pc, #88]	; (8006ef8 <TIM_OC2_SetConfig+0xe8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d113      	bne.n	8006ecc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	699b      	ldr	r3, [r3, #24]
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40010000 	.word	0x40010000
 8006ef8:	40010400 	.word	0x40010400

08006efc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0303 	bic.w	r3, r3, #3
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	021b      	lsls	r3, r3, #8
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a21      	ldr	r2, [pc, #132]	; (8006fdc <TIM_OC3_SetConfig+0xe0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC3_SetConfig+0x66>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a20      	ldr	r2, [pc, #128]	; (8006fe0 <TIM_OC3_SetConfig+0xe4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d10d      	bne.n	8006f7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <TIM_OC3_SetConfig+0xe0>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d003      	beq.n	8006f8e <TIM_OC3_SetConfig+0x92>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <TIM_OC3_SetConfig+0xe4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d113      	bne.n	8006fb6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	011b      	lsls	r3, r3, #4
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	621a      	str	r2, [r3, #32]
}
 8006fd0:	bf00      	nop
 8006fd2:	371c      	adds	r7, #28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	40010000 	.word	0x40010000
 8006fe0:	40010400 	.word	0x40010400

08006fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	021b      	lsls	r3, r3, #8
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800702e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	031b      	lsls	r3, r3, #12
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a12      	ldr	r2, [pc, #72]	; (8007088 <TIM_OC4_SetConfig+0xa4>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_OC4_SetConfig+0x68>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a11      	ldr	r2, [pc, #68]	; (800708c <TIM_OC4_SetConfig+0xa8>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d109      	bne.n	8007060 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007052:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	019b      	lsls	r3, r3, #6
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	621a      	str	r2, [r3, #32]
}
 800707a:	bf00      	nop
 800707c:	371c      	adds	r7, #28
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	40010000 	.word	0x40010000
 800708c:	40010400 	.word	0x40010400

08007090 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007090:	b480      	push	{r7}
 8007092:	b087      	sub	sp, #28
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	f023 0201 	bic.w	r2, r3, #1
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	693a      	ldr	r2, [r7, #16]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f023 030a 	bic.w	r3, r3, #10
 80070cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	697a      	ldr	r2, [r7, #20]
 80070e0:	621a      	str	r2, [r3, #32]
}
 80070e2:	bf00      	nop
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b087      	sub	sp, #28
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f023 0210 	bic.w	r2, r3, #16
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	031b      	lsls	r3, r3, #12
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800712a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007164:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	f043 0307 	orr.w	r3, r3, #7
 8007170:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	609a      	str	r2, [r3, #8]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007184:	b480      	push	{r7}
 8007186:	b087      	sub	sp, #28
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800719e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	021a      	lsls	r2, r3, #8
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	609a      	str	r2, [r3, #8]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2201      	movs	r2, #1
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a1a      	ldr	r2, [r3, #32]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	43db      	mvns	r3, r3
 80071e6:	401a      	ands	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a1a      	ldr	r2, [r3, #32]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f003 031f 	and.w	r3, r3, #31
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	fa01 f303 	lsl.w	r3, r1, r3
 80071fc:	431a      	orrs	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
	...

08007210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007224:	2302      	movs	r3, #2
 8007226:	e05a      	b.n	80072de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a21      	ldr	r2, [pc, #132]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d022      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007274:	d01d      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1d      	ldr	r2, [pc, #116]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d018      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1b      	ldr	r2, [pc, #108]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1a      	ldr	r2, [pc, #104]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00e      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a18      	ldr	r2, [pc, #96]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d009      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a17      	ldr	r2, [pc, #92]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a15      	ldr	r2, [pc, #84]	; (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d10c      	bne.n	80072cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40000800 	.word	0x40000800
 80072f8:	40000c00 	.word	0x40000c00
 80072fc:	40010400 	.word	0x40010400
 8007300:	40014000 	.word	0x40014000
 8007304:	40001800 	.word	0x40001800

08007308 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007320:	2302      	movs	r3, #2
 8007322:	e03d      	b.n	80073a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4313      	orrs	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073b4:	bf00      	nop
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e03f      	b.n	8007466 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d106      	bne.n	8007400 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fc fde6 	bl	8003fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2224      	movs	r2, #36	; 0x24
 8007404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007416:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fb97 	bl	8007b4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	691a      	ldr	r2, [r3, #16]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800742c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	695a      	ldr	r2, [r3, #20]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800743c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68da      	ldr	r2, [r3, #12]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800744c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b088      	sub	sp, #32
 8007472:	af02      	add	r7, sp, #8
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4613      	mov	r3, r2
 800747c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b20      	cmp	r3, #32
 800748c:	f040 8083 	bne.w	8007596 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_UART_Transmit+0x2e>
 8007496:	88fb      	ldrh	r3, [r7, #6]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e07b      	b.n	8007598 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <HAL_UART_Transmit+0x40>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e074      	b.n	8007598 <HAL_UART_Transmit+0x12a>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2221      	movs	r2, #33	; 0x21
 80074c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80074c4:	f7fc ff68 	bl	8004398 <HAL_GetTick>
 80074c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	88fa      	ldrh	r2, [r7, #6]
 80074ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2200      	movs	r2, #0
 80074da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80074de:	e042      	b.n	8007566 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074f6:	d122      	bne.n	800753e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	2200      	movs	r2, #0
 8007500:	2180      	movs	r1, #128	; 0x80
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f9b6 	bl	8007874 <UART_WaitOnFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e042      	b.n	8007598 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007524:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d103      	bne.n	8007536 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	3302      	adds	r3, #2
 8007532:	60bb      	str	r3, [r7, #8]
 8007534:	e017      	b.n	8007566 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	3301      	adds	r3, #1
 800753a:	60bb      	str	r3, [r7, #8]
 800753c:	e013      	b.n	8007566 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2200      	movs	r2, #0
 8007546:	2180      	movs	r1, #128	; 0x80
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f993 	bl	8007874 <UART_WaitOnFlagUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e01f      	b.n	8007598 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	60ba      	str	r2, [r7, #8]
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1b7      	bne.n	80074e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	2200      	movs	r2, #0
 8007578:	2140      	movs	r1, #64	; 0x40
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 f97a 	bl	8007874 <UART_WaitOnFlagUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e006      	b.n	8007598 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2220      	movs	r2, #32
 800758e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	e000      	b.n	8007598 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8007596:	2302      	movs	r3, #2
  }
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	4613      	mov	r3, r2
 80075ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d140      	bne.n	800763c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d002      	beq.n	80075c6 <HAL_UART_Receive_IT+0x26>
 80075c0:	88fb      	ldrh	r3, [r7, #6]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	e039      	b.n	800763e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d101      	bne.n	80075d8 <HAL_UART_Receive_IT+0x38>
 80075d4:	2302      	movs	r3, #2
 80075d6:	e032      	b.n	800763e <HAL_UART_Receive_IT+0x9e>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	88fa      	ldrh	r2, [r7, #6]
 80075ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	88fa      	ldrh	r2, [r7, #6]
 80075f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2222      	movs	r2, #34	; 0x22
 80075fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007616:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695a      	ldr	r2, [r3, #20]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f042 0201 	orr.w	r2, r2, #1
 8007626:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0220 	orr.w	r2, r2, #32
 8007636:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	e000      	b.n	800763e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800763c:	2302      	movs	r3, #2
  }
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
	...

0800764c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800766c:	2300      	movs	r3, #0
 800766e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10d      	bne.n	800769e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b00      	cmp	r3, #0
 800768a:	d008      	beq.n	800769e <HAL_UART_IRQHandler+0x52>
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d003      	beq.n	800769e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f9d6 	bl	8007a48 <UART_Receive_IT>
      return;
 800769c:	e0d1      	b.n	8007842 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 80b0 	beq.w	8007806 <HAL_UART_IRQHandler+0x1ba>
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d105      	bne.n	80076bc <HAL_UART_IRQHandler+0x70>
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 80a5 	beq.w	8007806 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00a      	beq.n	80076dc <HAL_UART_IRQHandler+0x90>
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d005      	beq.n	80076dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d4:	f043 0201 	orr.w	r2, r3, #1
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <HAL_UART_IRQHandler+0xb0>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f4:	f043 0202 	orr.w	r2, r3, #2
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <HAL_UART_IRQHandler+0xd0>
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d005      	beq.n	800771c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007714:	f043 0204 	orr.w	r2, r3, #4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	f003 0308 	and.w	r3, r3, #8
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00f      	beq.n	8007746 <HAL_UART_IRQHandler+0xfa>
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d104      	bne.n	800773a <HAL_UART_IRQHandler+0xee>
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d005      	beq.n	8007746 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800773e:	f043 0208 	orr.w	r2, r3, #8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d078      	beq.n	8007840 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	f003 0320 	and.w	r3, r3, #32
 8007754:	2b00      	cmp	r3, #0
 8007756:	d007      	beq.n	8007768 <HAL_UART_IRQHandler+0x11c>
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	f003 0320 	and.w	r3, r3, #32
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f970 	bl	8007a48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007772:	2b40      	cmp	r3, #64	; 0x40
 8007774:	bf0c      	ite	eq
 8007776:	2301      	moveq	r3, #1
 8007778:	2300      	movne	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d102      	bne.n	8007790 <HAL_UART_IRQHandler+0x144>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d031      	beq.n	80077f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f8b9 	bl	8007908 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a0:	2b40      	cmp	r3, #64	; 0x40
 80077a2:	d123      	bne.n	80077ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	695a      	ldr	r2, [r3, #20]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d013      	beq.n	80077e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c0:	4a21      	ldr	r2, [pc, #132]	; (8007848 <HAL_UART_IRQHandler+0x1fc>)
 80077c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fc ff40 	bl	800464e <HAL_DMA_Abort_IT>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d016      	beq.n	8007802 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80077de:	4610      	mov	r0, r2
 80077e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e2:	e00e      	b.n	8007802 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f83b 	bl	8007860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ea:	e00a      	b.n	8007802 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f837 	bl	8007860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f2:	e006      	b.n	8007802 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f833 	bl	8007860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007800:	e01e      	b.n	8007840 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007802:	bf00      	nop
    return;
 8007804:	e01c      	b.n	8007840 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <HAL_UART_IRQHandler+0x1d6>
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f8a6 	bl	800796c <UART_Transmit_IT>
    return;
 8007820:	e00f      	b.n	8007842 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00a      	beq.n	8007842 <HAL_UART_IRQHandler+0x1f6>
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007832:	2b00      	cmp	r3, #0
 8007834:	d005      	beq.n	8007842 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8ee 	bl	8007a18 <UART_EndTransmit_IT>
    return;
 800783c:	bf00      	nop
 800783e:	e000      	b.n	8007842 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007840:	bf00      	nop
  }
}
 8007842:	3720      	adds	r7, #32
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	08007945 	.word	0x08007945

0800784c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	4613      	mov	r3, r2
 8007882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007884:	e02c      	b.n	80078e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800788c:	d028      	beq.n	80078e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007894:	f7fc fd80 	bl	8004398 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d21d      	bcs.n	80078e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80078b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695a      	ldr	r2, [r3, #20]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e00f      	b.n	8007900 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	4013      	ands	r3, r2
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	bf0c      	ite	eq
 80078f0:	2301      	moveq	r3, #1
 80078f2:	2300      	movne	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	461a      	mov	r2, r3
 80078f8:	79fb      	ldrb	r3, [r7, #7]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d0c3      	beq.n	8007886 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800791e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	695a      	ldr	r2, [r3, #20]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0201 	bic.w	r2, r2, #1
 800792e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f7ff ff7e 	bl	8007860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007964:	bf00      	nop
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b21      	cmp	r3, #33	; 0x21
 800797e:	d144      	bne.n	8007a0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007988:	d11a      	bne.n	80079c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	461a      	mov	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800799e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d105      	bne.n	80079b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	1c9a      	adds	r2, r3, #2
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	621a      	str	r2, [r3, #32]
 80079b2:	e00e      	b.n	80079d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	621a      	str	r2, [r3, #32]
 80079be:	e008      	b.n	80079d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	1c59      	adds	r1, r3, #1
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6211      	str	r1, [r2, #32]
 80079ca:	781a      	ldrb	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29b      	uxth	r3, r3
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	4619      	mov	r1, r3
 80079e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10f      	bne.n	8007a06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	e000      	b.n	8007a0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a0a:	2302      	movs	r3, #2
  }
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff ff07 	bl	800784c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b22      	cmp	r3, #34	; 0x22
 8007a5a:	d171      	bne.n	8007b40 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a64:	d123      	bne.n	8007aae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10e      	bne.n	8007a92 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	1c9a      	adds	r2, r3, #2
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a90:	e029      	b.n	8007ae6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	1c5a      	adds	r2, r3, #1
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8007aac:	e01b      	b.n	8007ae6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6858      	ldr	r0, [r3, #4]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac0:	1c59      	adds	r1, r3, #1
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6291      	str	r1, [r2, #40]	; 0x28
 8007ac6:	b2c2      	uxtb	r2, r0
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	e00c      	b.n	8007ae6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	b2da      	uxtb	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	1c58      	adds	r0, r3, #1
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	6288      	str	r0, [r1, #40]	; 0x28
 8007ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	3b01      	subs	r3, #1
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	4619      	mov	r1, r3
 8007af4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d120      	bne.n	8007b3c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0220 	bic.w	r2, r2, #32
 8007b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	695a      	ldr	r2, [r3, #20]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7f9 ff12 	bl	800195c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	e002      	b.n	8007b42 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e000      	b.n	8007b42 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007b40:	2302      	movs	r3, #2
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	b085      	sub	sp, #20
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	431a      	orrs	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b8e:	f023 030c 	bic.w	r3, r3, #12
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6812      	ldr	r2, [r2, #0]
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	430b      	orrs	r3, r1
 8007b9a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bba:	f040 818b 	bne.w	8007ed4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4ac1      	ldr	r2, [pc, #772]	; (8007ec8 <UART_SetConfig+0x37c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d005      	beq.n	8007bd4 <UART_SetConfig+0x88>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4abf      	ldr	r2, [pc, #764]	; (8007ecc <UART_SetConfig+0x380>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	f040 80bd 	bne.w	8007d4e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bd4:	f7fe fc0a 	bl	80063ec <HAL_RCC_GetPCLK2Freq>
 8007bd8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	461d      	mov	r5, r3
 8007bde:	f04f 0600 	mov.w	r6, #0
 8007be2:	46a8      	mov	r8, r5
 8007be4:	46b1      	mov	r9, r6
 8007be6:	eb18 0308 	adds.w	r3, r8, r8
 8007bea:	eb49 0409 	adc.w	r4, r9, r9
 8007bee:	4698      	mov	r8, r3
 8007bf0:	46a1      	mov	r9, r4
 8007bf2:	eb18 0805 	adds.w	r8, r8, r5
 8007bf6:	eb49 0906 	adc.w	r9, r9, r6
 8007bfa:	f04f 0100 	mov.w	r1, #0
 8007bfe:	f04f 0200 	mov.w	r2, #0
 8007c02:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c06:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c0a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c0e:	4688      	mov	r8, r1
 8007c10:	4691      	mov	r9, r2
 8007c12:	eb18 0005 	adds.w	r0, r8, r5
 8007c16:	eb49 0106 	adc.w	r1, r9, r6
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	461d      	mov	r5, r3
 8007c20:	f04f 0600 	mov.w	r6, #0
 8007c24:	196b      	adds	r3, r5, r5
 8007c26:	eb46 0406 	adc.w	r4, r6, r6
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	f7f8 ffd7 	bl	8000be0 <__aeabi_uldivmod>
 8007c32:	4603      	mov	r3, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	461a      	mov	r2, r3
 8007c38:	4ba5      	ldr	r3, [pc, #660]	; (8007ed0 <UART_SetConfig+0x384>)
 8007c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8007c3e:	095b      	lsrs	r3, r3, #5
 8007c40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	461d      	mov	r5, r3
 8007c48:	f04f 0600 	mov.w	r6, #0
 8007c4c:	46a9      	mov	r9, r5
 8007c4e:	46b2      	mov	sl, r6
 8007c50:	eb19 0309 	adds.w	r3, r9, r9
 8007c54:	eb4a 040a 	adc.w	r4, sl, sl
 8007c58:	4699      	mov	r9, r3
 8007c5a:	46a2      	mov	sl, r4
 8007c5c:	eb19 0905 	adds.w	r9, r9, r5
 8007c60:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c64:	f04f 0100 	mov.w	r1, #0
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c78:	4689      	mov	r9, r1
 8007c7a:	4692      	mov	sl, r2
 8007c7c:	eb19 0005 	adds.w	r0, r9, r5
 8007c80:	eb4a 0106 	adc.w	r1, sl, r6
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	461d      	mov	r5, r3
 8007c8a:	f04f 0600 	mov.w	r6, #0
 8007c8e:	196b      	adds	r3, r5, r5
 8007c90:	eb46 0406 	adc.w	r4, r6, r6
 8007c94:	461a      	mov	r2, r3
 8007c96:	4623      	mov	r3, r4
 8007c98:	f7f8 ffa2 	bl	8000be0 <__aeabi_uldivmod>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	4b8b      	ldr	r3, [pc, #556]	; (8007ed0 <UART_SetConfig+0x384>)
 8007ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca8:	095b      	lsrs	r3, r3, #5
 8007caa:	2164      	movs	r1, #100	; 0x64
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	00db      	lsls	r3, r3, #3
 8007cb4:	3332      	adds	r3, #50	; 0x32
 8007cb6:	4a86      	ldr	r2, [pc, #536]	; (8007ed0 <UART_SetConfig+0x384>)
 8007cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cc4:	4498      	add	r8, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	461d      	mov	r5, r3
 8007cca:	f04f 0600 	mov.w	r6, #0
 8007cce:	46a9      	mov	r9, r5
 8007cd0:	46b2      	mov	sl, r6
 8007cd2:	eb19 0309 	adds.w	r3, r9, r9
 8007cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8007cda:	4699      	mov	r9, r3
 8007cdc:	46a2      	mov	sl, r4
 8007cde:	eb19 0905 	adds.w	r9, r9, r5
 8007ce2:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ce6:	f04f 0100 	mov.w	r1, #0
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cfa:	4689      	mov	r9, r1
 8007cfc:	4692      	mov	sl, r2
 8007cfe:	eb19 0005 	adds.w	r0, r9, r5
 8007d02:	eb4a 0106 	adc.w	r1, sl, r6
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	f04f 0600 	mov.w	r6, #0
 8007d10:	196b      	adds	r3, r5, r5
 8007d12:	eb46 0406 	adc.w	r4, r6, r6
 8007d16:	461a      	mov	r2, r3
 8007d18:	4623      	mov	r3, r4
 8007d1a:	f7f8 ff61 	bl	8000be0 <__aeabi_uldivmod>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	460c      	mov	r4, r1
 8007d22:	461a      	mov	r2, r3
 8007d24:	4b6a      	ldr	r3, [pc, #424]	; (8007ed0 <UART_SetConfig+0x384>)
 8007d26:	fba3 1302 	umull	r1, r3, r3, r2
 8007d2a:	095b      	lsrs	r3, r3, #5
 8007d2c:	2164      	movs	r1, #100	; 0x64
 8007d2e:	fb01 f303 	mul.w	r3, r1, r3
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	3332      	adds	r3, #50	; 0x32
 8007d38:	4a65      	ldr	r2, [pc, #404]	; (8007ed0 <UART_SetConfig+0x384>)
 8007d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3e:	095b      	lsrs	r3, r3, #5
 8007d40:	f003 0207 	and.w	r2, r3, #7
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4442      	add	r2, r8
 8007d4a:	609a      	str	r2, [r3, #8]
 8007d4c:	e26f      	b.n	800822e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d4e:	f7fe fb39 	bl	80063c4 <HAL_RCC_GetPCLK1Freq>
 8007d52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	461d      	mov	r5, r3
 8007d58:	f04f 0600 	mov.w	r6, #0
 8007d5c:	46a8      	mov	r8, r5
 8007d5e:	46b1      	mov	r9, r6
 8007d60:	eb18 0308 	adds.w	r3, r8, r8
 8007d64:	eb49 0409 	adc.w	r4, r9, r9
 8007d68:	4698      	mov	r8, r3
 8007d6a:	46a1      	mov	r9, r4
 8007d6c:	eb18 0805 	adds.w	r8, r8, r5
 8007d70:	eb49 0906 	adc.w	r9, r9, r6
 8007d74:	f04f 0100 	mov.w	r1, #0
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d88:	4688      	mov	r8, r1
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	eb18 0005 	adds.w	r0, r8, r5
 8007d90:	eb49 0106 	adc.w	r1, r9, r6
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	461d      	mov	r5, r3
 8007d9a:	f04f 0600 	mov.w	r6, #0
 8007d9e:	196b      	adds	r3, r5, r5
 8007da0:	eb46 0406 	adc.w	r4, r6, r6
 8007da4:	461a      	mov	r2, r3
 8007da6:	4623      	mov	r3, r4
 8007da8:	f7f8 ff1a 	bl	8000be0 <__aeabi_uldivmod>
 8007dac:	4603      	mov	r3, r0
 8007dae:	460c      	mov	r4, r1
 8007db0:	461a      	mov	r2, r3
 8007db2:	4b47      	ldr	r3, [pc, #284]	; (8007ed0 <UART_SetConfig+0x384>)
 8007db4:	fba3 2302 	umull	r2, r3, r3, r2
 8007db8:	095b      	lsrs	r3, r3, #5
 8007dba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	461d      	mov	r5, r3
 8007dc2:	f04f 0600 	mov.w	r6, #0
 8007dc6:	46a9      	mov	r9, r5
 8007dc8:	46b2      	mov	sl, r6
 8007dca:	eb19 0309 	adds.w	r3, r9, r9
 8007dce:	eb4a 040a 	adc.w	r4, sl, sl
 8007dd2:	4699      	mov	r9, r3
 8007dd4:	46a2      	mov	sl, r4
 8007dd6:	eb19 0905 	adds.w	r9, r9, r5
 8007dda:	eb4a 0a06 	adc.w	sl, sl, r6
 8007dde:	f04f 0100 	mov.w	r1, #0
 8007de2:	f04f 0200 	mov.w	r2, #0
 8007de6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007df2:	4689      	mov	r9, r1
 8007df4:	4692      	mov	sl, r2
 8007df6:	eb19 0005 	adds.w	r0, r9, r5
 8007dfa:	eb4a 0106 	adc.w	r1, sl, r6
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	461d      	mov	r5, r3
 8007e04:	f04f 0600 	mov.w	r6, #0
 8007e08:	196b      	adds	r3, r5, r5
 8007e0a:	eb46 0406 	adc.w	r4, r6, r6
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4623      	mov	r3, r4
 8007e12:	f7f8 fee5 	bl	8000be0 <__aeabi_uldivmod>
 8007e16:	4603      	mov	r3, r0
 8007e18:	460c      	mov	r4, r1
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	4b2c      	ldr	r3, [pc, #176]	; (8007ed0 <UART_SetConfig+0x384>)
 8007e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	2164      	movs	r1, #100	; 0x64
 8007e26:	fb01 f303 	mul.w	r3, r1, r3
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	3332      	adds	r3, #50	; 0x32
 8007e30:	4a27      	ldr	r2, [pc, #156]	; (8007ed0 <UART_SetConfig+0x384>)
 8007e32:	fba2 2303 	umull	r2, r3, r2, r3
 8007e36:	095b      	lsrs	r3, r3, #5
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e3e:	4498      	add	r8, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	461d      	mov	r5, r3
 8007e44:	f04f 0600 	mov.w	r6, #0
 8007e48:	46a9      	mov	r9, r5
 8007e4a:	46b2      	mov	sl, r6
 8007e4c:	eb19 0309 	adds.w	r3, r9, r9
 8007e50:	eb4a 040a 	adc.w	r4, sl, sl
 8007e54:	4699      	mov	r9, r3
 8007e56:	46a2      	mov	sl, r4
 8007e58:	eb19 0905 	adds.w	r9, r9, r5
 8007e5c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e60:	f04f 0100 	mov.w	r1, #0
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e74:	4689      	mov	r9, r1
 8007e76:	4692      	mov	sl, r2
 8007e78:	eb19 0005 	adds.w	r0, r9, r5
 8007e7c:	eb4a 0106 	adc.w	r1, sl, r6
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	461d      	mov	r5, r3
 8007e86:	f04f 0600 	mov.w	r6, #0
 8007e8a:	196b      	adds	r3, r5, r5
 8007e8c:	eb46 0406 	adc.w	r4, r6, r6
 8007e90:	461a      	mov	r2, r3
 8007e92:	4623      	mov	r3, r4
 8007e94:	f7f8 fea4 	bl	8000be0 <__aeabi_uldivmod>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <UART_SetConfig+0x384>)
 8007ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea4:	095b      	lsrs	r3, r3, #5
 8007ea6:	2164      	movs	r1, #100	; 0x64
 8007ea8:	fb01 f303 	mul.w	r3, r1, r3
 8007eac:	1ad3      	subs	r3, r2, r3
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	3332      	adds	r3, #50	; 0x32
 8007eb2:	4a07      	ldr	r2, [pc, #28]	; (8007ed0 <UART_SetConfig+0x384>)
 8007eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	f003 0207 	and.w	r2, r3, #7
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4442      	add	r2, r8
 8007ec4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007ec6:	e1b2      	b.n	800822e <UART_SetConfig+0x6e2>
 8007ec8:	40011000 	.word	0x40011000
 8007ecc:	40011400 	.word	0x40011400
 8007ed0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4ad7      	ldr	r2, [pc, #860]	; (8008238 <UART_SetConfig+0x6ec>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d005      	beq.n	8007eea <UART_SetConfig+0x39e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4ad6      	ldr	r2, [pc, #856]	; (800823c <UART_SetConfig+0x6f0>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	f040 80d1 	bne.w	800808c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007eea:	f7fe fa7f 	bl	80063ec <HAL_RCC_GetPCLK2Freq>
 8007eee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	469a      	mov	sl, r3
 8007ef4:	f04f 0b00 	mov.w	fp, #0
 8007ef8:	46d0      	mov	r8, sl
 8007efa:	46d9      	mov	r9, fp
 8007efc:	eb18 0308 	adds.w	r3, r8, r8
 8007f00:	eb49 0409 	adc.w	r4, r9, r9
 8007f04:	4698      	mov	r8, r3
 8007f06:	46a1      	mov	r9, r4
 8007f08:	eb18 080a 	adds.w	r8, r8, sl
 8007f0c:	eb49 090b 	adc.w	r9, r9, fp
 8007f10:	f04f 0100 	mov.w	r1, #0
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f24:	4688      	mov	r8, r1
 8007f26:	4691      	mov	r9, r2
 8007f28:	eb1a 0508 	adds.w	r5, sl, r8
 8007f2c:	eb4b 0609 	adc.w	r6, fp, r9
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	4619      	mov	r1, r3
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	f04f 0400 	mov.w	r4, #0
 8007f42:	0094      	lsls	r4, r2, #2
 8007f44:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f48:	008b      	lsls	r3, r1, #2
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	4631      	mov	r1, r6
 8007f52:	f7f8 fe45 	bl	8000be0 <__aeabi_uldivmod>
 8007f56:	4603      	mov	r3, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	4bb8      	ldr	r3, [pc, #736]	; (8008240 <UART_SetConfig+0x6f4>)
 8007f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f62:	095b      	lsrs	r3, r3, #5
 8007f64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	469b      	mov	fp, r3
 8007f6c:	f04f 0c00 	mov.w	ip, #0
 8007f70:	46d9      	mov	r9, fp
 8007f72:	46e2      	mov	sl, ip
 8007f74:	eb19 0309 	adds.w	r3, r9, r9
 8007f78:	eb4a 040a 	adc.w	r4, sl, sl
 8007f7c:	4699      	mov	r9, r3
 8007f7e:	46a2      	mov	sl, r4
 8007f80:	eb19 090b 	adds.w	r9, r9, fp
 8007f84:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f88:	f04f 0100 	mov.w	r1, #0
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f9c:	4689      	mov	r9, r1
 8007f9e:	4692      	mov	sl, r2
 8007fa0:	eb1b 0509 	adds.w	r5, fp, r9
 8007fa4:	eb4c 060a 	adc.w	r6, ip, sl
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	4619      	mov	r1, r3
 8007fae:	f04f 0200 	mov.w	r2, #0
 8007fb2:	f04f 0300 	mov.w	r3, #0
 8007fb6:	f04f 0400 	mov.w	r4, #0
 8007fba:	0094      	lsls	r4, r2, #2
 8007fbc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fc0:	008b      	lsls	r3, r1, #2
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	4623      	mov	r3, r4
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	4631      	mov	r1, r6
 8007fca:	f7f8 fe09 	bl	8000be0 <__aeabi_uldivmod>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	4b9a      	ldr	r3, [pc, #616]	; (8008240 <UART_SetConfig+0x6f4>)
 8007fd6:	fba3 1302 	umull	r1, r3, r3, r2
 8007fda:	095b      	lsrs	r3, r3, #5
 8007fdc:	2164      	movs	r1, #100	; 0x64
 8007fde:	fb01 f303 	mul.w	r3, r1, r3
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	011b      	lsls	r3, r3, #4
 8007fe6:	3332      	adds	r3, #50	; 0x32
 8007fe8:	4a95      	ldr	r2, [pc, #596]	; (8008240 <UART_SetConfig+0x6f4>)
 8007fea:	fba2 2303 	umull	r2, r3, r2, r3
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ff4:	4498      	add	r8, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	469b      	mov	fp, r3
 8007ffa:	f04f 0c00 	mov.w	ip, #0
 8007ffe:	46d9      	mov	r9, fp
 8008000:	46e2      	mov	sl, ip
 8008002:	eb19 0309 	adds.w	r3, r9, r9
 8008006:	eb4a 040a 	adc.w	r4, sl, sl
 800800a:	4699      	mov	r9, r3
 800800c:	46a2      	mov	sl, r4
 800800e:	eb19 090b 	adds.w	r9, r9, fp
 8008012:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008016:	f04f 0100 	mov.w	r1, #0
 800801a:	f04f 0200 	mov.w	r2, #0
 800801e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008022:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008026:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800802a:	4689      	mov	r9, r1
 800802c:	4692      	mov	sl, r2
 800802e:	eb1b 0509 	adds.w	r5, fp, r9
 8008032:	eb4c 060a 	adc.w	r6, ip, sl
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	4619      	mov	r1, r3
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	f04f 0400 	mov.w	r4, #0
 8008048:	0094      	lsls	r4, r2, #2
 800804a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800804e:	008b      	lsls	r3, r1, #2
 8008050:	461a      	mov	r2, r3
 8008052:	4623      	mov	r3, r4
 8008054:	4628      	mov	r0, r5
 8008056:	4631      	mov	r1, r6
 8008058:	f7f8 fdc2 	bl	8000be0 <__aeabi_uldivmod>
 800805c:	4603      	mov	r3, r0
 800805e:	460c      	mov	r4, r1
 8008060:	461a      	mov	r2, r3
 8008062:	4b77      	ldr	r3, [pc, #476]	; (8008240 <UART_SetConfig+0x6f4>)
 8008064:	fba3 1302 	umull	r1, r3, r3, r2
 8008068:	095b      	lsrs	r3, r3, #5
 800806a:	2164      	movs	r1, #100	; 0x64
 800806c:	fb01 f303 	mul.w	r3, r1, r3
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	3332      	adds	r3, #50	; 0x32
 8008076:	4a72      	ldr	r2, [pc, #456]	; (8008240 <UART_SetConfig+0x6f4>)
 8008078:	fba2 2303 	umull	r2, r3, r2, r3
 800807c:	095b      	lsrs	r3, r3, #5
 800807e:	f003 020f 	and.w	r2, r3, #15
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4442      	add	r2, r8
 8008088:	609a      	str	r2, [r3, #8]
 800808a:	e0d0      	b.n	800822e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800808c:	f7fe f99a 	bl	80063c4 <HAL_RCC_GetPCLK1Freq>
 8008090:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	469a      	mov	sl, r3
 8008096:	f04f 0b00 	mov.w	fp, #0
 800809a:	46d0      	mov	r8, sl
 800809c:	46d9      	mov	r9, fp
 800809e:	eb18 0308 	adds.w	r3, r8, r8
 80080a2:	eb49 0409 	adc.w	r4, r9, r9
 80080a6:	4698      	mov	r8, r3
 80080a8:	46a1      	mov	r9, r4
 80080aa:	eb18 080a 	adds.w	r8, r8, sl
 80080ae:	eb49 090b 	adc.w	r9, r9, fp
 80080b2:	f04f 0100 	mov.w	r1, #0
 80080b6:	f04f 0200 	mov.w	r2, #0
 80080ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80080be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80080c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80080c6:	4688      	mov	r8, r1
 80080c8:	4691      	mov	r9, r2
 80080ca:	eb1a 0508 	adds.w	r5, sl, r8
 80080ce:	eb4b 0609 	adc.w	r6, fp, r9
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	4619      	mov	r1, r3
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	f04f 0300 	mov.w	r3, #0
 80080e0:	f04f 0400 	mov.w	r4, #0
 80080e4:	0094      	lsls	r4, r2, #2
 80080e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080ea:	008b      	lsls	r3, r1, #2
 80080ec:	461a      	mov	r2, r3
 80080ee:	4623      	mov	r3, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	4631      	mov	r1, r6
 80080f4:	f7f8 fd74 	bl	8000be0 <__aeabi_uldivmod>
 80080f8:	4603      	mov	r3, r0
 80080fa:	460c      	mov	r4, r1
 80080fc:	461a      	mov	r2, r3
 80080fe:	4b50      	ldr	r3, [pc, #320]	; (8008240 <UART_SetConfig+0x6f4>)
 8008100:	fba3 2302 	umull	r2, r3, r3, r2
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	469b      	mov	fp, r3
 800810e:	f04f 0c00 	mov.w	ip, #0
 8008112:	46d9      	mov	r9, fp
 8008114:	46e2      	mov	sl, ip
 8008116:	eb19 0309 	adds.w	r3, r9, r9
 800811a:	eb4a 040a 	adc.w	r4, sl, sl
 800811e:	4699      	mov	r9, r3
 8008120:	46a2      	mov	sl, r4
 8008122:	eb19 090b 	adds.w	r9, r9, fp
 8008126:	eb4a 0a0c 	adc.w	sl, sl, ip
 800812a:	f04f 0100 	mov.w	r1, #0
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800813a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800813e:	4689      	mov	r9, r1
 8008140:	4692      	mov	sl, r2
 8008142:	eb1b 0509 	adds.w	r5, fp, r9
 8008146:	eb4c 060a 	adc.w	r6, ip, sl
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	4619      	mov	r1, r3
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	f04f 0400 	mov.w	r4, #0
 800815c:	0094      	lsls	r4, r2, #2
 800815e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008162:	008b      	lsls	r3, r1, #2
 8008164:	461a      	mov	r2, r3
 8008166:	4623      	mov	r3, r4
 8008168:	4628      	mov	r0, r5
 800816a:	4631      	mov	r1, r6
 800816c:	f7f8 fd38 	bl	8000be0 <__aeabi_uldivmod>
 8008170:	4603      	mov	r3, r0
 8008172:	460c      	mov	r4, r1
 8008174:	461a      	mov	r2, r3
 8008176:	4b32      	ldr	r3, [pc, #200]	; (8008240 <UART_SetConfig+0x6f4>)
 8008178:	fba3 1302 	umull	r1, r3, r3, r2
 800817c:	095b      	lsrs	r3, r3, #5
 800817e:	2164      	movs	r1, #100	; 0x64
 8008180:	fb01 f303 	mul.w	r3, r1, r3
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	3332      	adds	r3, #50	; 0x32
 800818a:	4a2d      	ldr	r2, [pc, #180]	; (8008240 <UART_SetConfig+0x6f4>)
 800818c:	fba2 2303 	umull	r2, r3, r2, r3
 8008190:	095b      	lsrs	r3, r3, #5
 8008192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008196:	4498      	add	r8, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	469b      	mov	fp, r3
 800819c:	f04f 0c00 	mov.w	ip, #0
 80081a0:	46d9      	mov	r9, fp
 80081a2:	46e2      	mov	sl, ip
 80081a4:	eb19 0309 	adds.w	r3, r9, r9
 80081a8:	eb4a 040a 	adc.w	r4, sl, sl
 80081ac:	4699      	mov	r9, r3
 80081ae:	46a2      	mov	sl, r4
 80081b0:	eb19 090b 	adds.w	r9, r9, fp
 80081b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80081b8:	f04f 0100 	mov.w	r1, #0
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081cc:	4689      	mov	r9, r1
 80081ce:	4692      	mov	sl, r2
 80081d0:	eb1b 0509 	adds.w	r5, fp, r9
 80081d4:	eb4c 060a 	adc.w	r6, ip, sl
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4619      	mov	r1, r3
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	f04f 0400 	mov.w	r4, #0
 80081ea:	0094      	lsls	r4, r2, #2
 80081ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081f0:	008b      	lsls	r3, r1, #2
 80081f2:	461a      	mov	r2, r3
 80081f4:	4623      	mov	r3, r4
 80081f6:	4628      	mov	r0, r5
 80081f8:	4631      	mov	r1, r6
 80081fa:	f7f8 fcf1 	bl	8000be0 <__aeabi_uldivmod>
 80081fe:	4603      	mov	r3, r0
 8008200:	460c      	mov	r4, r1
 8008202:	461a      	mov	r2, r3
 8008204:	4b0e      	ldr	r3, [pc, #56]	; (8008240 <UART_SetConfig+0x6f4>)
 8008206:	fba3 1302 	umull	r1, r3, r3, r2
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	2164      	movs	r1, #100	; 0x64
 800820e:	fb01 f303 	mul.w	r3, r1, r3
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	3332      	adds	r3, #50	; 0x32
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <UART_SetConfig+0x6f4>)
 800821a:	fba2 2303 	umull	r2, r3, r2, r3
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	f003 020f 	and.w	r2, r3, #15
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4442      	add	r2, r8
 800822a:	609a      	str	r2, [r3, #8]
}
 800822c:	e7ff      	b.n	800822e <UART_SetConfig+0x6e2>
 800822e:	bf00      	nop
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008238:	40011000 	.word	0x40011000
 800823c:	40011400 	.word	0x40011400
 8008240:	51eb851f 	.word	0x51eb851f

08008244 <__errno>:
 8008244:	4b01      	ldr	r3, [pc, #4]	; (800824c <__errno+0x8>)
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	2000003c 	.word	0x2000003c

08008250 <__libc_init_array>:
 8008250:	b570      	push	{r4, r5, r6, lr}
 8008252:	4e0d      	ldr	r6, [pc, #52]	; (8008288 <__libc_init_array+0x38>)
 8008254:	4c0d      	ldr	r4, [pc, #52]	; (800828c <__libc_init_array+0x3c>)
 8008256:	1ba4      	subs	r4, r4, r6
 8008258:	10a4      	asrs	r4, r4, #2
 800825a:	2500      	movs	r5, #0
 800825c:	42a5      	cmp	r5, r4
 800825e:	d109      	bne.n	8008274 <__libc_init_array+0x24>
 8008260:	4e0b      	ldr	r6, [pc, #44]	; (8008290 <__libc_init_array+0x40>)
 8008262:	4c0c      	ldr	r4, [pc, #48]	; (8008294 <__libc_init_array+0x44>)
 8008264:	f000 fe28 	bl	8008eb8 <_init>
 8008268:	1ba4      	subs	r4, r4, r6
 800826a:	10a4      	asrs	r4, r4, #2
 800826c:	2500      	movs	r5, #0
 800826e:	42a5      	cmp	r5, r4
 8008270:	d105      	bne.n	800827e <__libc_init_array+0x2e>
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008278:	4798      	blx	r3
 800827a:	3501      	adds	r5, #1
 800827c:	e7ee      	b.n	800825c <__libc_init_array+0xc>
 800827e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008282:	4798      	blx	r3
 8008284:	3501      	adds	r5, #1
 8008286:	e7f2      	b.n	800826e <__libc_init_array+0x1e>
 8008288:	08008fcc 	.word	0x08008fcc
 800828c:	08008fcc 	.word	0x08008fcc
 8008290:	08008fcc 	.word	0x08008fcc
 8008294:	08008fd0 	.word	0x08008fd0

08008298 <memset>:
 8008298:	4402      	add	r2, r0
 800829a:	4603      	mov	r3, r0
 800829c:	4293      	cmp	r3, r2
 800829e:	d100      	bne.n	80082a2 <memset+0xa>
 80082a0:	4770      	bx	lr
 80082a2:	f803 1b01 	strb.w	r1, [r3], #1
 80082a6:	e7f9      	b.n	800829c <memset+0x4>

080082a8 <atan>:
 80082a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ac:	ec55 4b10 	vmov	r4, r5, d0
 80082b0:	4bc3      	ldr	r3, [pc, #780]	; (80085c0 <atan+0x318>)
 80082b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80082b6:	429e      	cmp	r6, r3
 80082b8:	46ab      	mov	fp, r5
 80082ba:	dd18      	ble.n	80082ee <atan+0x46>
 80082bc:	4bc1      	ldr	r3, [pc, #772]	; (80085c4 <atan+0x31c>)
 80082be:	429e      	cmp	r6, r3
 80082c0:	dc01      	bgt.n	80082c6 <atan+0x1e>
 80082c2:	d109      	bne.n	80082d8 <atan+0x30>
 80082c4:	b144      	cbz	r4, 80082d8 <atan+0x30>
 80082c6:	4622      	mov	r2, r4
 80082c8:	462b      	mov	r3, r5
 80082ca:	4620      	mov	r0, r4
 80082cc:	4629      	mov	r1, r5
 80082ce:	f7f7 ff89 	bl	80001e4 <__adddf3>
 80082d2:	4604      	mov	r4, r0
 80082d4:	460d      	mov	r5, r1
 80082d6:	e006      	b.n	80082e6 <atan+0x3e>
 80082d8:	f1bb 0f00 	cmp.w	fp, #0
 80082dc:	f340 8131 	ble.w	8008542 <atan+0x29a>
 80082e0:	a59b      	add	r5, pc, #620	; (adr r5, 8008550 <atan+0x2a8>)
 80082e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80082e6:	ec45 4b10 	vmov	d0, r4, r5
 80082ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ee:	4bb6      	ldr	r3, [pc, #728]	; (80085c8 <atan+0x320>)
 80082f0:	429e      	cmp	r6, r3
 80082f2:	dc14      	bgt.n	800831e <atan+0x76>
 80082f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80082f8:	429e      	cmp	r6, r3
 80082fa:	dc0d      	bgt.n	8008318 <atan+0x70>
 80082fc:	a396      	add	r3, pc, #600	; (adr r3, 8008558 <atan+0x2b0>)
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	ee10 0a10 	vmov	r0, s0
 8008306:	4629      	mov	r1, r5
 8008308:	f7f7 ff6c 	bl	80001e4 <__adddf3>
 800830c:	2200      	movs	r2, #0
 800830e:	4baf      	ldr	r3, [pc, #700]	; (80085cc <atan+0x324>)
 8008310:	f7f8 fbae 	bl	8000a70 <__aeabi_dcmpgt>
 8008314:	2800      	cmp	r0, #0
 8008316:	d1e6      	bne.n	80082e6 <atan+0x3e>
 8008318:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800831c:	e02b      	b.n	8008376 <atan+0xce>
 800831e:	f000 f963 	bl	80085e8 <fabs>
 8008322:	4bab      	ldr	r3, [pc, #684]	; (80085d0 <atan+0x328>)
 8008324:	429e      	cmp	r6, r3
 8008326:	ec55 4b10 	vmov	r4, r5, d0
 800832a:	f300 80bf 	bgt.w	80084ac <atan+0x204>
 800832e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008332:	429e      	cmp	r6, r3
 8008334:	f300 80a0 	bgt.w	8008478 <atan+0x1d0>
 8008338:	ee10 2a10 	vmov	r2, s0
 800833c:	ee10 0a10 	vmov	r0, s0
 8008340:	462b      	mov	r3, r5
 8008342:	4629      	mov	r1, r5
 8008344:	f7f7 ff4e 	bl	80001e4 <__adddf3>
 8008348:	2200      	movs	r2, #0
 800834a:	4ba0      	ldr	r3, [pc, #640]	; (80085cc <atan+0x324>)
 800834c:	f7f7 ff48 	bl	80001e0 <__aeabi_dsub>
 8008350:	2200      	movs	r2, #0
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800835a:	4620      	mov	r0, r4
 800835c:	4629      	mov	r1, r5
 800835e:	f7f7 ff41 	bl	80001e4 <__adddf3>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4630      	mov	r0, r6
 8008368:	4639      	mov	r1, r7
 800836a:	f7f8 fa1b 	bl	80007a4 <__aeabi_ddiv>
 800836e:	f04f 0a00 	mov.w	sl, #0
 8008372:	4604      	mov	r4, r0
 8008374:	460d      	mov	r5, r1
 8008376:	4622      	mov	r2, r4
 8008378:	462b      	mov	r3, r5
 800837a:	4620      	mov	r0, r4
 800837c:	4629      	mov	r1, r5
 800837e:	f7f8 f8e7 	bl	8000550 <__aeabi_dmul>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4680      	mov	r8, r0
 8008388:	4689      	mov	r9, r1
 800838a:	f7f8 f8e1 	bl	8000550 <__aeabi_dmul>
 800838e:	a374      	add	r3, pc, #464	; (adr r3, 8008560 <atan+0x2b8>)
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	4606      	mov	r6, r0
 8008396:	460f      	mov	r7, r1
 8008398:	f7f8 f8da 	bl	8000550 <__aeabi_dmul>
 800839c:	a372      	add	r3, pc, #456	; (adr r3, 8008568 <atan+0x2c0>)
 800839e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a2:	f7f7 ff1f 	bl	80001e4 <__adddf3>
 80083a6:	4632      	mov	r2, r6
 80083a8:	463b      	mov	r3, r7
 80083aa:	f7f8 f8d1 	bl	8000550 <__aeabi_dmul>
 80083ae:	a370      	add	r3, pc, #448	; (adr r3, 8008570 <atan+0x2c8>)
 80083b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b4:	f7f7 ff16 	bl	80001e4 <__adddf3>
 80083b8:	4632      	mov	r2, r6
 80083ba:	463b      	mov	r3, r7
 80083bc:	f7f8 f8c8 	bl	8000550 <__aeabi_dmul>
 80083c0:	a36d      	add	r3, pc, #436	; (adr r3, 8008578 <atan+0x2d0>)
 80083c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c6:	f7f7 ff0d 	bl	80001e4 <__adddf3>
 80083ca:	4632      	mov	r2, r6
 80083cc:	463b      	mov	r3, r7
 80083ce:	f7f8 f8bf 	bl	8000550 <__aeabi_dmul>
 80083d2:	a36b      	add	r3, pc, #428	; (adr r3, 8008580 <atan+0x2d8>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f7f7 ff04 	bl	80001e4 <__adddf3>
 80083dc:	4632      	mov	r2, r6
 80083de:	463b      	mov	r3, r7
 80083e0:	f7f8 f8b6 	bl	8000550 <__aeabi_dmul>
 80083e4:	a368      	add	r3, pc, #416	; (adr r3, 8008588 <atan+0x2e0>)
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	f7f7 fefb 	bl	80001e4 <__adddf3>
 80083ee:	4642      	mov	r2, r8
 80083f0:	464b      	mov	r3, r9
 80083f2:	f7f8 f8ad 	bl	8000550 <__aeabi_dmul>
 80083f6:	a366      	add	r3, pc, #408	; (adr r3, 8008590 <atan+0x2e8>)
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	4680      	mov	r8, r0
 80083fe:	4689      	mov	r9, r1
 8008400:	4630      	mov	r0, r6
 8008402:	4639      	mov	r1, r7
 8008404:	f7f8 f8a4 	bl	8000550 <__aeabi_dmul>
 8008408:	a363      	add	r3, pc, #396	; (adr r3, 8008598 <atan+0x2f0>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f7 fee7 	bl	80001e0 <__aeabi_dsub>
 8008412:	4632      	mov	r2, r6
 8008414:	463b      	mov	r3, r7
 8008416:	f7f8 f89b 	bl	8000550 <__aeabi_dmul>
 800841a:	a361      	add	r3, pc, #388	; (adr r3, 80085a0 <atan+0x2f8>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	f7f7 fede 	bl	80001e0 <__aeabi_dsub>
 8008424:	4632      	mov	r2, r6
 8008426:	463b      	mov	r3, r7
 8008428:	f7f8 f892 	bl	8000550 <__aeabi_dmul>
 800842c:	a35e      	add	r3, pc, #376	; (adr r3, 80085a8 <atan+0x300>)
 800842e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008432:	f7f7 fed5 	bl	80001e0 <__aeabi_dsub>
 8008436:	4632      	mov	r2, r6
 8008438:	463b      	mov	r3, r7
 800843a:	f7f8 f889 	bl	8000550 <__aeabi_dmul>
 800843e:	a35c      	add	r3, pc, #368	; (adr r3, 80085b0 <atan+0x308>)
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	f7f7 fecc 	bl	80001e0 <__aeabi_dsub>
 8008448:	4632      	mov	r2, r6
 800844a:	463b      	mov	r3, r7
 800844c:	f7f8 f880 	bl	8000550 <__aeabi_dmul>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4640      	mov	r0, r8
 8008456:	4649      	mov	r1, r9
 8008458:	f7f7 fec4 	bl	80001e4 <__adddf3>
 800845c:	4622      	mov	r2, r4
 800845e:	462b      	mov	r3, r5
 8008460:	f7f8 f876 	bl	8000550 <__aeabi_dmul>
 8008464:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	d14b      	bne.n	8008506 <atan+0x25e>
 800846e:	4620      	mov	r0, r4
 8008470:	4629      	mov	r1, r5
 8008472:	f7f7 feb5 	bl	80001e0 <__aeabi_dsub>
 8008476:	e72c      	b.n	80082d2 <atan+0x2a>
 8008478:	ee10 0a10 	vmov	r0, s0
 800847c:	2200      	movs	r2, #0
 800847e:	4b53      	ldr	r3, [pc, #332]	; (80085cc <atan+0x324>)
 8008480:	4629      	mov	r1, r5
 8008482:	f7f7 fead 	bl	80001e0 <__aeabi_dsub>
 8008486:	2200      	movs	r2, #0
 8008488:	4606      	mov	r6, r0
 800848a:	460f      	mov	r7, r1
 800848c:	4b4f      	ldr	r3, [pc, #316]	; (80085cc <atan+0x324>)
 800848e:	4620      	mov	r0, r4
 8008490:	4629      	mov	r1, r5
 8008492:	f7f7 fea7 	bl	80001e4 <__adddf3>
 8008496:	4602      	mov	r2, r0
 8008498:	460b      	mov	r3, r1
 800849a:	4630      	mov	r0, r6
 800849c:	4639      	mov	r1, r7
 800849e:	f7f8 f981 	bl	80007a4 <__aeabi_ddiv>
 80084a2:	f04f 0a01 	mov.w	sl, #1
 80084a6:	4604      	mov	r4, r0
 80084a8:	460d      	mov	r5, r1
 80084aa:	e764      	b.n	8008376 <atan+0xce>
 80084ac:	4b49      	ldr	r3, [pc, #292]	; (80085d4 <atan+0x32c>)
 80084ae:	429e      	cmp	r6, r3
 80084b0:	dc1d      	bgt.n	80084ee <atan+0x246>
 80084b2:	ee10 0a10 	vmov	r0, s0
 80084b6:	2200      	movs	r2, #0
 80084b8:	4b47      	ldr	r3, [pc, #284]	; (80085d8 <atan+0x330>)
 80084ba:	4629      	mov	r1, r5
 80084bc:	f7f7 fe90 	bl	80001e0 <__aeabi_dsub>
 80084c0:	2200      	movs	r2, #0
 80084c2:	4606      	mov	r6, r0
 80084c4:	460f      	mov	r7, r1
 80084c6:	4b44      	ldr	r3, [pc, #272]	; (80085d8 <atan+0x330>)
 80084c8:	4620      	mov	r0, r4
 80084ca:	4629      	mov	r1, r5
 80084cc:	f7f8 f840 	bl	8000550 <__aeabi_dmul>
 80084d0:	2200      	movs	r2, #0
 80084d2:	4b3e      	ldr	r3, [pc, #248]	; (80085cc <atan+0x324>)
 80084d4:	f7f7 fe86 	bl	80001e4 <__adddf3>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f8 f960 	bl	80007a4 <__aeabi_ddiv>
 80084e4:	f04f 0a02 	mov.w	sl, #2
 80084e8:	4604      	mov	r4, r0
 80084ea:	460d      	mov	r5, r1
 80084ec:	e743      	b.n	8008376 <atan+0xce>
 80084ee:	462b      	mov	r3, r5
 80084f0:	ee10 2a10 	vmov	r2, s0
 80084f4:	2000      	movs	r0, #0
 80084f6:	4939      	ldr	r1, [pc, #228]	; (80085dc <atan+0x334>)
 80084f8:	f7f8 f954 	bl	80007a4 <__aeabi_ddiv>
 80084fc:	f04f 0a03 	mov.w	sl, #3
 8008500:	4604      	mov	r4, r0
 8008502:	460d      	mov	r5, r1
 8008504:	e737      	b.n	8008376 <atan+0xce>
 8008506:	4b36      	ldr	r3, [pc, #216]	; (80085e0 <atan+0x338>)
 8008508:	4e36      	ldr	r6, [pc, #216]	; (80085e4 <atan+0x33c>)
 800850a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800850e:	4456      	add	r6, sl
 8008510:	449a      	add	sl, r3
 8008512:	e9da 2300 	ldrd	r2, r3, [sl]
 8008516:	f7f7 fe63 	bl	80001e0 <__aeabi_dsub>
 800851a:	4622      	mov	r2, r4
 800851c:	462b      	mov	r3, r5
 800851e:	f7f7 fe5f 	bl	80001e0 <__aeabi_dsub>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	e9d6 0100 	ldrd	r0, r1, [r6]
 800852a:	f7f7 fe59 	bl	80001e0 <__aeabi_dsub>
 800852e:	f1bb 0f00 	cmp.w	fp, #0
 8008532:	4604      	mov	r4, r0
 8008534:	460d      	mov	r5, r1
 8008536:	f6bf aed6 	bge.w	80082e6 <atan+0x3e>
 800853a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800853e:	461d      	mov	r5, r3
 8008540:	e6d1      	b.n	80082e6 <atan+0x3e>
 8008542:	a51d      	add	r5, pc, #116	; (adr r5, 80085b8 <atan+0x310>)
 8008544:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008548:	e6cd      	b.n	80082e6 <atan+0x3e>
 800854a:	bf00      	nop
 800854c:	f3af 8000 	nop.w
 8008550:	54442d18 	.word	0x54442d18
 8008554:	3ff921fb 	.word	0x3ff921fb
 8008558:	8800759c 	.word	0x8800759c
 800855c:	7e37e43c 	.word	0x7e37e43c
 8008560:	e322da11 	.word	0xe322da11
 8008564:	3f90ad3a 	.word	0x3f90ad3a
 8008568:	24760deb 	.word	0x24760deb
 800856c:	3fa97b4b 	.word	0x3fa97b4b
 8008570:	a0d03d51 	.word	0xa0d03d51
 8008574:	3fb10d66 	.word	0x3fb10d66
 8008578:	c54c206e 	.word	0xc54c206e
 800857c:	3fb745cd 	.word	0x3fb745cd
 8008580:	920083ff 	.word	0x920083ff
 8008584:	3fc24924 	.word	0x3fc24924
 8008588:	5555550d 	.word	0x5555550d
 800858c:	3fd55555 	.word	0x3fd55555
 8008590:	2c6a6c2f 	.word	0x2c6a6c2f
 8008594:	bfa2b444 	.word	0xbfa2b444
 8008598:	52defd9a 	.word	0x52defd9a
 800859c:	3fadde2d 	.word	0x3fadde2d
 80085a0:	af749a6d 	.word	0xaf749a6d
 80085a4:	3fb3b0f2 	.word	0x3fb3b0f2
 80085a8:	fe231671 	.word	0xfe231671
 80085ac:	3fbc71c6 	.word	0x3fbc71c6
 80085b0:	9998ebc4 	.word	0x9998ebc4
 80085b4:	3fc99999 	.word	0x3fc99999
 80085b8:	54442d18 	.word	0x54442d18
 80085bc:	bff921fb 	.word	0xbff921fb
 80085c0:	440fffff 	.word	0x440fffff
 80085c4:	7ff00000 	.word	0x7ff00000
 80085c8:	3fdbffff 	.word	0x3fdbffff
 80085cc:	3ff00000 	.word	0x3ff00000
 80085d0:	3ff2ffff 	.word	0x3ff2ffff
 80085d4:	40037fff 	.word	0x40037fff
 80085d8:	3ff80000 	.word	0x3ff80000
 80085dc:	bff00000 	.word	0xbff00000
 80085e0:	08008f98 	.word	0x08008f98
 80085e4:	08008f78 	.word	0x08008f78

080085e8 <fabs>:
 80085e8:	ec51 0b10 	vmov	r0, r1, d0
 80085ec:	ee10 2a10 	vmov	r2, s0
 80085f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085f4:	ec43 2b10 	vmov	d0, r2, r3
 80085f8:	4770      	bx	lr
	...

080085fc <asin>:
 80085fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085fe:	ed2d 8b02 	vpush	{d8}
 8008602:	4e26      	ldr	r6, [pc, #152]	; (800869c <asin+0xa0>)
 8008604:	b08b      	sub	sp, #44	; 0x2c
 8008606:	ec55 4b10 	vmov	r4, r5, d0
 800860a:	f000 f8ad 	bl	8008768 <__ieee754_asin>
 800860e:	f996 3000 	ldrsb.w	r3, [r6]
 8008612:	eeb0 8a40 	vmov.f32	s16, s0
 8008616:	eef0 8a60 	vmov.f32	s17, s1
 800861a:	3301      	adds	r3, #1
 800861c:	d036      	beq.n	800868c <asin+0x90>
 800861e:	4622      	mov	r2, r4
 8008620:	462b      	mov	r3, r5
 8008622:	4620      	mov	r0, r4
 8008624:	4629      	mov	r1, r5
 8008626:	f7f8 fa2d 	bl	8000a84 <__aeabi_dcmpun>
 800862a:	4607      	mov	r7, r0
 800862c:	bb70      	cbnz	r0, 800868c <asin+0x90>
 800862e:	ec45 4b10 	vmov	d0, r4, r5
 8008632:	f7ff ffd9 	bl	80085e8 <fabs>
 8008636:	2200      	movs	r2, #0
 8008638:	4b19      	ldr	r3, [pc, #100]	; (80086a0 <asin+0xa4>)
 800863a:	ec51 0b10 	vmov	r0, r1, d0
 800863e:	f7f8 fa17 	bl	8000a70 <__aeabi_dcmpgt>
 8008642:	b318      	cbz	r0, 800868c <asin+0x90>
 8008644:	2301      	movs	r3, #1
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4816      	ldr	r0, [pc, #88]	; (80086a4 <asin+0xa8>)
 800864a:	4b17      	ldr	r3, [pc, #92]	; (80086a8 <asin+0xac>)
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	9708      	str	r7, [sp, #32]
 8008650:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008654:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008658:	f000 fc26 	bl	8008ea8 <nan>
 800865c:	f996 3000 	ldrsb.w	r3, [r6]
 8008660:	2b02      	cmp	r3, #2
 8008662:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008666:	d104      	bne.n	8008672 <asin+0x76>
 8008668:	f7ff fdec 	bl	8008244 <__errno>
 800866c:	2321      	movs	r3, #33	; 0x21
 800866e:	6003      	str	r3, [r0, #0]
 8008670:	e004      	b.n	800867c <asin+0x80>
 8008672:	4668      	mov	r0, sp
 8008674:	f000 fc16 	bl	8008ea4 <matherr>
 8008678:	2800      	cmp	r0, #0
 800867a:	d0f5      	beq.n	8008668 <asin+0x6c>
 800867c:	9b08      	ldr	r3, [sp, #32]
 800867e:	b11b      	cbz	r3, 8008688 <asin+0x8c>
 8008680:	f7ff fde0 	bl	8008244 <__errno>
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	6003      	str	r3, [r0, #0]
 8008688:	ed9d 8b06 	vldr	d8, [sp, #24]
 800868c:	eeb0 0a48 	vmov.f32	s0, s16
 8008690:	eef0 0a68 	vmov.f32	s1, s17
 8008694:	b00b      	add	sp, #44	; 0x2c
 8008696:	ecbd 8b02 	vpop	{d8}
 800869a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800869c:	200000a0 	.word	0x200000a0
 80086a0:	3ff00000 	.word	0x3ff00000
 80086a4:	08008fbc 	.word	0x08008fbc
 80086a8:	08008fb8 	.word	0x08008fb8

080086ac <atan2>:
 80086ac:	f000 ba6c 	b.w	8008b88 <__ieee754_atan2>

080086b0 <sqrt>:
 80086b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086b4:	ed2d 8b02 	vpush	{d8}
 80086b8:	b08b      	sub	sp, #44	; 0x2c
 80086ba:	ec55 4b10 	vmov	r4, r5, d0
 80086be:	f000 fb41 	bl	8008d44 <__ieee754_sqrt>
 80086c2:	4b26      	ldr	r3, [pc, #152]	; (800875c <sqrt+0xac>)
 80086c4:	eeb0 8a40 	vmov.f32	s16, s0
 80086c8:	eef0 8a60 	vmov.f32	s17, s1
 80086cc:	f993 6000 	ldrsb.w	r6, [r3]
 80086d0:	1c73      	adds	r3, r6, #1
 80086d2:	d02a      	beq.n	800872a <sqrt+0x7a>
 80086d4:	4622      	mov	r2, r4
 80086d6:	462b      	mov	r3, r5
 80086d8:	4620      	mov	r0, r4
 80086da:	4629      	mov	r1, r5
 80086dc:	f7f8 f9d2 	bl	8000a84 <__aeabi_dcmpun>
 80086e0:	4607      	mov	r7, r0
 80086e2:	bb10      	cbnz	r0, 800872a <sqrt+0x7a>
 80086e4:	f04f 0800 	mov.w	r8, #0
 80086e8:	f04f 0900 	mov.w	r9, #0
 80086ec:	4642      	mov	r2, r8
 80086ee:	464b      	mov	r3, r9
 80086f0:	4620      	mov	r0, r4
 80086f2:	4629      	mov	r1, r5
 80086f4:	f7f8 f99e 	bl	8000a34 <__aeabi_dcmplt>
 80086f8:	b1b8      	cbz	r0, 800872a <sqrt+0x7a>
 80086fa:	2301      	movs	r3, #1
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	4b18      	ldr	r3, [pc, #96]	; (8008760 <sqrt+0xb0>)
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	9708      	str	r7, [sp, #32]
 8008704:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008708:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800870c:	b9b6      	cbnz	r6, 800873c <sqrt+0x8c>
 800870e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8008712:	4668      	mov	r0, sp
 8008714:	f000 fbc6 	bl	8008ea4 <matherr>
 8008718:	b1d0      	cbz	r0, 8008750 <sqrt+0xa0>
 800871a:	9b08      	ldr	r3, [sp, #32]
 800871c:	b11b      	cbz	r3, 8008726 <sqrt+0x76>
 800871e:	f7ff fd91 	bl	8008244 <__errno>
 8008722:	9b08      	ldr	r3, [sp, #32]
 8008724:	6003      	str	r3, [r0, #0]
 8008726:	ed9d 8b06 	vldr	d8, [sp, #24]
 800872a:	eeb0 0a48 	vmov.f32	s0, s16
 800872e:	eef0 0a68 	vmov.f32	s1, s17
 8008732:	b00b      	add	sp, #44	; 0x2c
 8008734:	ecbd 8b02 	vpop	{d8}
 8008738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800873c:	4642      	mov	r2, r8
 800873e:	464b      	mov	r3, r9
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f8 f82e 	bl	80007a4 <__aeabi_ddiv>
 8008748:	2e02      	cmp	r6, #2
 800874a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800874e:	d1e0      	bne.n	8008712 <sqrt+0x62>
 8008750:	f7ff fd78 	bl	8008244 <__errno>
 8008754:	2321      	movs	r3, #33	; 0x21
 8008756:	6003      	str	r3, [r0, #0]
 8008758:	e7df      	b.n	800871a <sqrt+0x6a>
 800875a:	bf00      	nop
 800875c:	200000a0 	.word	0x200000a0
 8008760:	08008fbd 	.word	0x08008fbd
 8008764:	00000000 	.word	0x00000000

08008768 <__ieee754_asin>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	ec55 4b10 	vmov	r4, r5, d0
 8008770:	4bcb      	ldr	r3, [pc, #812]	; (8008aa0 <__ieee754_asin+0x338>)
 8008772:	b087      	sub	sp, #28
 8008774:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8008778:	429f      	cmp	r7, r3
 800877a:	9501      	str	r5, [sp, #4]
 800877c:	dd31      	ble.n	80087e2 <__ieee754_asin+0x7a>
 800877e:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 8008782:	ee10 3a10 	vmov	r3, s0
 8008786:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 800878a:	433b      	orrs	r3, r7
 800878c:	d117      	bne.n	80087be <__ieee754_asin+0x56>
 800878e:	a3aa      	add	r3, pc, #680	; (adr r3, 8008a38 <__ieee754_asin+0x2d0>)
 8008790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008794:	ee10 0a10 	vmov	r0, s0
 8008798:	4629      	mov	r1, r5
 800879a:	f7f7 fed9 	bl	8000550 <__aeabi_dmul>
 800879e:	a3a8      	add	r3, pc, #672	; (adr r3, 8008a40 <__ieee754_asin+0x2d8>)
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	4606      	mov	r6, r0
 80087a6:	460f      	mov	r7, r1
 80087a8:	4620      	mov	r0, r4
 80087aa:	4629      	mov	r1, r5
 80087ac:	f7f7 fed0 	bl	8000550 <__aeabi_dmul>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f7 fd14 	bl	80001e4 <__adddf3>
 80087bc:	e00a      	b.n	80087d4 <__ieee754_asin+0x6c>
 80087be:	ee10 2a10 	vmov	r2, s0
 80087c2:	462b      	mov	r3, r5
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7f7 fd0a 	bl	80001e0 <__aeabi_dsub>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	f7f7 ffe8 	bl	80007a4 <__aeabi_ddiv>
 80087d4:	4604      	mov	r4, r0
 80087d6:	460d      	mov	r5, r1
 80087d8:	ec45 4b10 	vmov	d0, r4, r5
 80087dc:	b007      	add	sp, #28
 80087de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e2:	4bb0      	ldr	r3, [pc, #704]	; (8008aa4 <__ieee754_asin+0x33c>)
 80087e4:	429f      	cmp	r7, r3
 80087e6:	dc11      	bgt.n	800880c <__ieee754_asin+0xa4>
 80087e8:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80087ec:	f280 80ae 	bge.w	800894c <__ieee754_asin+0x1e4>
 80087f0:	a395      	add	r3, pc, #596	; (adr r3, 8008a48 <__ieee754_asin+0x2e0>)
 80087f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f6:	ee10 0a10 	vmov	r0, s0
 80087fa:	4629      	mov	r1, r5
 80087fc:	f7f7 fcf2 	bl	80001e4 <__adddf3>
 8008800:	2200      	movs	r2, #0
 8008802:	4ba9      	ldr	r3, [pc, #676]	; (8008aa8 <__ieee754_asin+0x340>)
 8008804:	f7f8 f934 	bl	8000a70 <__aeabi_dcmpgt>
 8008808:	2800      	cmp	r0, #0
 800880a:	d1e5      	bne.n	80087d8 <__ieee754_asin+0x70>
 800880c:	ec45 4b10 	vmov	d0, r4, r5
 8008810:	f7ff feea 	bl	80085e8 <fabs>
 8008814:	2000      	movs	r0, #0
 8008816:	ec53 2b10 	vmov	r2, r3, d0
 800881a:	49a3      	ldr	r1, [pc, #652]	; (8008aa8 <__ieee754_asin+0x340>)
 800881c:	f7f7 fce0 	bl	80001e0 <__aeabi_dsub>
 8008820:	2200      	movs	r2, #0
 8008822:	4ba2      	ldr	r3, [pc, #648]	; (8008aac <__ieee754_asin+0x344>)
 8008824:	f7f7 fe94 	bl	8000550 <__aeabi_dmul>
 8008828:	a389      	add	r3, pc, #548	; (adr r3, 8008a50 <__ieee754_asin+0x2e8>)
 800882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882e:	4604      	mov	r4, r0
 8008830:	460d      	mov	r5, r1
 8008832:	f7f7 fe8d 	bl	8000550 <__aeabi_dmul>
 8008836:	a388      	add	r3, pc, #544	; (adr r3, 8008a58 <__ieee754_asin+0x2f0>)
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f7f7 fcd2 	bl	80001e4 <__adddf3>
 8008840:	4622      	mov	r2, r4
 8008842:	462b      	mov	r3, r5
 8008844:	f7f7 fe84 	bl	8000550 <__aeabi_dmul>
 8008848:	a385      	add	r3, pc, #532	; (adr r3, 8008a60 <__ieee754_asin+0x2f8>)
 800884a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884e:	f7f7 fcc7 	bl	80001e0 <__aeabi_dsub>
 8008852:	4622      	mov	r2, r4
 8008854:	462b      	mov	r3, r5
 8008856:	f7f7 fe7b 	bl	8000550 <__aeabi_dmul>
 800885a:	a383      	add	r3, pc, #524	; (adr r3, 8008a68 <__ieee754_asin+0x300>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f7f7 fcc0 	bl	80001e4 <__adddf3>
 8008864:	4622      	mov	r2, r4
 8008866:	462b      	mov	r3, r5
 8008868:	f7f7 fe72 	bl	8000550 <__aeabi_dmul>
 800886c:	a380      	add	r3, pc, #512	; (adr r3, 8008a70 <__ieee754_asin+0x308>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	f7f7 fcb5 	bl	80001e0 <__aeabi_dsub>
 8008876:	4622      	mov	r2, r4
 8008878:	462b      	mov	r3, r5
 800887a:	f7f7 fe69 	bl	8000550 <__aeabi_dmul>
 800887e:	a37e      	add	r3, pc, #504	; (adr r3, 8008a78 <__ieee754_asin+0x310>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 fcae 	bl	80001e4 <__adddf3>
 8008888:	4622      	mov	r2, r4
 800888a:	462b      	mov	r3, r5
 800888c:	f7f7 fe60 	bl	8000550 <__aeabi_dmul>
 8008890:	a37b      	add	r3, pc, #492	; (adr r3, 8008a80 <__ieee754_asin+0x318>)
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	4680      	mov	r8, r0
 8008898:	4689      	mov	r9, r1
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fe57 	bl	8000550 <__aeabi_dmul>
 80088a2:	a379      	add	r3, pc, #484	; (adr r3, 8008a88 <__ieee754_asin+0x320>)
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	f7f7 fc9a 	bl	80001e0 <__aeabi_dsub>
 80088ac:	4622      	mov	r2, r4
 80088ae:	462b      	mov	r3, r5
 80088b0:	f7f7 fe4e 	bl	8000550 <__aeabi_dmul>
 80088b4:	a376      	add	r3, pc, #472	; (adr r3, 8008a90 <__ieee754_asin+0x328>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f7f7 fc93 	bl	80001e4 <__adddf3>
 80088be:	4622      	mov	r2, r4
 80088c0:	462b      	mov	r3, r5
 80088c2:	f7f7 fe45 	bl	8000550 <__aeabi_dmul>
 80088c6:	a374      	add	r3, pc, #464	; (adr r3, 8008a98 <__ieee754_asin+0x330>)
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	f7f7 fc88 	bl	80001e0 <__aeabi_dsub>
 80088d0:	4622      	mov	r2, r4
 80088d2:	462b      	mov	r3, r5
 80088d4:	f7f7 fe3c 	bl	8000550 <__aeabi_dmul>
 80088d8:	4b73      	ldr	r3, [pc, #460]	; (8008aa8 <__ieee754_asin+0x340>)
 80088da:	2200      	movs	r2, #0
 80088dc:	f7f7 fc82 	bl	80001e4 <__adddf3>
 80088e0:	ec45 4b10 	vmov	d0, r4, r5
 80088e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088e8:	f000 fa2c 	bl	8008d44 <__ieee754_sqrt>
 80088ec:	4b70      	ldr	r3, [pc, #448]	; (8008ab0 <__ieee754_asin+0x348>)
 80088ee:	429f      	cmp	r7, r3
 80088f0:	ec5b ab10 	vmov	sl, fp, d0
 80088f4:	f340 80de 	ble.w	8008ab4 <__ieee754_asin+0x34c>
 80088f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088fc:	4640      	mov	r0, r8
 80088fe:	4649      	mov	r1, r9
 8008900:	f7f7 ff50 	bl	80007a4 <__aeabi_ddiv>
 8008904:	4652      	mov	r2, sl
 8008906:	465b      	mov	r3, fp
 8008908:	f7f7 fe22 	bl	8000550 <__aeabi_dmul>
 800890c:	4652      	mov	r2, sl
 800890e:	465b      	mov	r3, fp
 8008910:	f7f7 fc68 	bl	80001e4 <__adddf3>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	f7f7 fc64 	bl	80001e4 <__adddf3>
 800891c:	a348      	add	r3, pc, #288	; (adr r3, 8008a40 <__ieee754_asin+0x2d8>)
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f7f7 fc5d 	bl	80001e0 <__aeabi_dsub>
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	a143      	add	r1, pc, #268	; (adr r1, 8008a38 <__ieee754_asin+0x2d0>)
 800892c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008930:	f7f7 fc56 	bl	80001e0 <__aeabi_dsub>
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	bfdc      	itt	le
 800893a:	4602      	movle	r2, r0
 800893c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8008940:	4604      	mov	r4, r0
 8008942:	460d      	mov	r5, r1
 8008944:	bfdc      	itt	le
 8008946:	4614      	movle	r4, r2
 8008948:	461d      	movle	r5, r3
 800894a:	e745      	b.n	80087d8 <__ieee754_asin+0x70>
 800894c:	ee10 2a10 	vmov	r2, s0
 8008950:	ee10 0a10 	vmov	r0, s0
 8008954:	462b      	mov	r3, r5
 8008956:	4629      	mov	r1, r5
 8008958:	f7f7 fdfa 	bl	8000550 <__aeabi_dmul>
 800895c:	a33c      	add	r3, pc, #240	; (adr r3, 8008a50 <__ieee754_asin+0x2e8>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	4606      	mov	r6, r0
 8008964:	460f      	mov	r7, r1
 8008966:	f7f7 fdf3 	bl	8000550 <__aeabi_dmul>
 800896a:	a33b      	add	r3, pc, #236	; (adr r3, 8008a58 <__ieee754_asin+0x2f0>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	f7f7 fc38 	bl	80001e4 <__adddf3>
 8008974:	4632      	mov	r2, r6
 8008976:	463b      	mov	r3, r7
 8008978:	f7f7 fdea 	bl	8000550 <__aeabi_dmul>
 800897c:	a338      	add	r3, pc, #224	; (adr r3, 8008a60 <__ieee754_asin+0x2f8>)
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f7f7 fc2d 	bl	80001e0 <__aeabi_dsub>
 8008986:	4632      	mov	r2, r6
 8008988:	463b      	mov	r3, r7
 800898a:	f7f7 fde1 	bl	8000550 <__aeabi_dmul>
 800898e:	a336      	add	r3, pc, #216	; (adr r3, 8008a68 <__ieee754_asin+0x300>)
 8008990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008994:	f7f7 fc26 	bl	80001e4 <__adddf3>
 8008998:	4632      	mov	r2, r6
 800899a:	463b      	mov	r3, r7
 800899c:	f7f7 fdd8 	bl	8000550 <__aeabi_dmul>
 80089a0:	a333      	add	r3, pc, #204	; (adr r3, 8008a70 <__ieee754_asin+0x308>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 fc1b 	bl	80001e0 <__aeabi_dsub>
 80089aa:	4632      	mov	r2, r6
 80089ac:	463b      	mov	r3, r7
 80089ae:	f7f7 fdcf 	bl	8000550 <__aeabi_dmul>
 80089b2:	a331      	add	r3, pc, #196	; (adr r3, 8008a78 <__ieee754_asin+0x310>)
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	f7f7 fc14 	bl	80001e4 <__adddf3>
 80089bc:	4632      	mov	r2, r6
 80089be:	463b      	mov	r3, r7
 80089c0:	f7f7 fdc6 	bl	8000550 <__aeabi_dmul>
 80089c4:	a32e      	add	r3, pc, #184	; (adr r3, 8008a80 <__ieee754_asin+0x318>)
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	4680      	mov	r8, r0
 80089cc:	4689      	mov	r9, r1
 80089ce:	4630      	mov	r0, r6
 80089d0:	4639      	mov	r1, r7
 80089d2:	f7f7 fdbd 	bl	8000550 <__aeabi_dmul>
 80089d6:	a32c      	add	r3, pc, #176	; (adr r3, 8008a88 <__ieee754_asin+0x320>)
 80089d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089dc:	f7f7 fc00 	bl	80001e0 <__aeabi_dsub>
 80089e0:	4632      	mov	r2, r6
 80089e2:	463b      	mov	r3, r7
 80089e4:	f7f7 fdb4 	bl	8000550 <__aeabi_dmul>
 80089e8:	a329      	add	r3, pc, #164	; (adr r3, 8008a90 <__ieee754_asin+0x328>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 fbf9 	bl	80001e4 <__adddf3>
 80089f2:	4632      	mov	r2, r6
 80089f4:	463b      	mov	r3, r7
 80089f6:	f7f7 fdab 	bl	8000550 <__aeabi_dmul>
 80089fa:	a327      	add	r3, pc, #156	; (adr r3, 8008a98 <__ieee754_asin+0x330>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	f7f7 fbee 	bl	80001e0 <__aeabi_dsub>
 8008a04:	4632      	mov	r2, r6
 8008a06:	463b      	mov	r3, r7
 8008a08:	f7f7 fda2 	bl	8000550 <__aeabi_dmul>
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4b26      	ldr	r3, [pc, #152]	; (8008aa8 <__ieee754_asin+0x340>)
 8008a10:	f7f7 fbe8 	bl	80001e4 <__adddf3>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4640      	mov	r0, r8
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	f7f7 fec2 	bl	80007a4 <__aeabi_ddiv>
 8008a20:	4622      	mov	r2, r4
 8008a22:	462b      	mov	r3, r5
 8008a24:	f7f7 fd94 	bl	8000550 <__aeabi_dmul>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	e6c2      	b.n	80087b8 <__ieee754_asin+0x50>
 8008a32:	bf00      	nop
 8008a34:	f3af 8000 	nop.w
 8008a38:	54442d18 	.word	0x54442d18
 8008a3c:	3ff921fb 	.word	0x3ff921fb
 8008a40:	33145c07 	.word	0x33145c07
 8008a44:	3c91a626 	.word	0x3c91a626
 8008a48:	8800759c 	.word	0x8800759c
 8008a4c:	7e37e43c 	.word	0x7e37e43c
 8008a50:	0dfdf709 	.word	0x0dfdf709
 8008a54:	3f023de1 	.word	0x3f023de1
 8008a58:	7501b288 	.word	0x7501b288
 8008a5c:	3f49efe0 	.word	0x3f49efe0
 8008a60:	b5688f3b 	.word	0xb5688f3b
 8008a64:	3fa48228 	.word	0x3fa48228
 8008a68:	0e884455 	.word	0x0e884455
 8008a6c:	3fc9c155 	.word	0x3fc9c155
 8008a70:	03eb6f7d 	.word	0x03eb6f7d
 8008a74:	3fd4d612 	.word	0x3fd4d612
 8008a78:	55555555 	.word	0x55555555
 8008a7c:	3fc55555 	.word	0x3fc55555
 8008a80:	b12e9282 	.word	0xb12e9282
 8008a84:	3fb3b8c5 	.word	0x3fb3b8c5
 8008a88:	1b8d0159 	.word	0x1b8d0159
 8008a8c:	3fe6066c 	.word	0x3fe6066c
 8008a90:	9c598ac8 	.word	0x9c598ac8
 8008a94:	40002ae5 	.word	0x40002ae5
 8008a98:	1c8a2d4b 	.word	0x1c8a2d4b
 8008a9c:	40033a27 	.word	0x40033a27
 8008aa0:	3fefffff 	.word	0x3fefffff
 8008aa4:	3fdfffff 	.word	0x3fdfffff
 8008aa8:	3ff00000 	.word	0x3ff00000
 8008aac:	3fe00000 	.word	0x3fe00000
 8008ab0:	3fef3332 	.word	0x3fef3332
 8008ab4:	ee10 2a10 	vmov	r2, s0
 8008ab8:	ee10 0a10 	vmov	r0, s0
 8008abc:	465b      	mov	r3, fp
 8008abe:	4659      	mov	r1, fp
 8008ac0:	f7f7 fb90 	bl	80001e4 <__adddf3>
 8008ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008acc:	4640      	mov	r0, r8
 8008ace:	4649      	mov	r1, r9
 8008ad0:	f7f7 fe68 	bl	80007a4 <__aeabi_ddiv>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008adc:	f7f7 fd38 	bl	8000550 <__aeabi_dmul>
 8008ae0:	2600      	movs	r6, #0
 8008ae2:	4680      	mov	r8, r0
 8008ae4:	4689      	mov	r9, r1
 8008ae6:	4632      	mov	r2, r6
 8008ae8:	465b      	mov	r3, fp
 8008aea:	4630      	mov	r0, r6
 8008aec:	4659      	mov	r1, fp
 8008aee:	f7f7 fd2f 	bl	8000550 <__aeabi_dmul>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4620      	mov	r0, r4
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7f7 fb71 	bl	80001e0 <__aeabi_dsub>
 8008afe:	4632      	mov	r2, r6
 8008b00:	4604      	mov	r4, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	465b      	mov	r3, fp
 8008b06:	4650      	mov	r0, sl
 8008b08:	4659      	mov	r1, fp
 8008b0a:	f7f7 fb6b 	bl	80001e4 <__adddf3>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4620      	mov	r0, r4
 8008b14:	4629      	mov	r1, r5
 8008b16:	f7f7 fe45 	bl	80007a4 <__aeabi_ddiv>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	f7f7 fb61 	bl	80001e4 <__adddf3>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	a114      	add	r1, pc, #80	; (adr r1, 8008b78 <__ieee754_asin+0x410>)
 8008b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b2c:	f7f7 fb58 	bl	80001e0 <__aeabi_dsub>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4640      	mov	r0, r8
 8008b36:	4649      	mov	r1, r9
 8008b38:	f7f7 fb52 	bl	80001e0 <__aeabi_dsub>
 8008b3c:	465f      	mov	r7, fp
 8008b3e:	4604      	mov	r4, r0
 8008b40:	460d      	mov	r5, r1
 8008b42:	4632      	mov	r2, r6
 8008b44:	465b      	mov	r3, fp
 8008b46:	4630      	mov	r0, r6
 8008b48:	4639      	mov	r1, r7
 8008b4a:	f7f7 fb4b 	bl	80001e4 <__adddf3>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	a10b      	add	r1, pc, #44	; (adr r1, 8008b80 <__ieee754_asin+0x418>)
 8008b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b58:	f7f7 fb42 	bl	80001e0 <__aeabi_dsub>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4620      	mov	r0, r4
 8008b62:	4629      	mov	r1, r5
 8008b64:	f7f7 fb3c 	bl	80001e0 <__aeabi_dsub>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	a104      	add	r1, pc, #16	; (adr r1, 8008b80 <__ieee754_asin+0x418>)
 8008b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b72:	e6dd      	b.n	8008930 <__ieee754_asin+0x1c8>
 8008b74:	f3af 8000 	nop.w
 8008b78:	33145c07 	.word	0x33145c07
 8008b7c:	3c91a626 	.word	0x3c91a626
 8008b80:	54442d18 	.word	0x54442d18
 8008b84:	3fe921fb 	.word	0x3fe921fb

08008b88 <__ieee754_atan2>:
 8008b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b8c:	ec57 6b11 	vmov	r6, r7, d1
 8008b90:	4273      	negs	r3, r6
 8008b92:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008b96:	4333      	orrs	r3, r6
 8008b98:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8008d40 <__ieee754_atan2+0x1b8>
 8008b9c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008ba0:	4573      	cmp	r3, lr
 8008ba2:	ec51 0b10 	vmov	r0, r1, d0
 8008ba6:	ee11 8a10 	vmov	r8, s2
 8008baa:	d80a      	bhi.n	8008bc2 <__ieee754_atan2+0x3a>
 8008bac:	4244      	negs	r4, r0
 8008bae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008bb2:	4304      	orrs	r4, r0
 8008bb4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008bb8:	4574      	cmp	r4, lr
 8008bba:	468c      	mov	ip, r1
 8008bbc:	ee10 9a10 	vmov	r9, s0
 8008bc0:	d907      	bls.n	8008bd2 <__ieee754_atan2+0x4a>
 8008bc2:	4632      	mov	r2, r6
 8008bc4:	463b      	mov	r3, r7
 8008bc6:	f7f7 fb0d 	bl	80001e4 <__adddf3>
 8008bca:	ec41 0b10 	vmov	d0, r0, r1
 8008bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008bd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008bda:	4334      	orrs	r4, r6
 8008bdc:	d103      	bne.n	8008be6 <__ieee754_atan2+0x5e>
 8008bde:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be2:	f7ff bb61 	b.w	80082a8 <atan>
 8008be6:	17bc      	asrs	r4, r7, #30
 8008be8:	f004 0402 	and.w	r4, r4, #2
 8008bec:	ea53 0909 	orrs.w	r9, r3, r9
 8008bf0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008bf4:	d107      	bne.n	8008c06 <__ieee754_atan2+0x7e>
 8008bf6:	2c02      	cmp	r4, #2
 8008bf8:	d073      	beq.n	8008ce2 <__ieee754_atan2+0x15a>
 8008bfa:	2c03      	cmp	r4, #3
 8008bfc:	d1e5      	bne.n	8008bca <__ieee754_atan2+0x42>
 8008bfe:	a13e      	add	r1, pc, #248	; (adr r1, 8008cf8 <__ieee754_atan2+0x170>)
 8008c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c04:	e7e1      	b.n	8008bca <__ieee754_atan2+0x42>
 8008c06:	ea52 0808 	orrs.w	r8, r2, r8
 8008c0a:	d106      	bne.n	8008c1a <__ieee754_atan2+0x92>
 8008c0c:	f1bc 0f00 	cmp.w	ip, #0
 8008c10:	da6b      	bge.n	8008cea <__ieee754_atan2+0x162>
 8008c12:	a13b      	add	r1, pc, #236	; (adr r1, 8008d00 <__ieee754_atan2+0x178>)
 8008c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c18:	e7d7      	b.n	8008bca <__ieee754_atan2+0x42>
 8008c1a:	4572      	cmp	r2, lr
 8008c1c:	d120      	bne.n	8008c60 <__ieee754_atan2+0xd8>
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d111      	bne.n	8008c46 <__ieee754_atan2+0xbe>
 8008c22:	2c02      	cmp	r4, #2
 8008c24:	d007      	beq.n	8008c36 <__ieee754_atan2+0xae>
 8008c26:	2c03      	cmp	r4, #3
 8008c28:	d009      	beq.n	8008c3e <__ieee754_atan2+0xb6>
 8008c2a:	2c01      	cmp	r4, #1
 8008c2c:	d155      	bne.n	8008cda <__ieee754_atan2+0x152>
 8008c2e:	a136      	add	r1, pc, #216	; (adr r1, 8008d08 <__ieee754_atan2+0x180>)
 8008c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c34:	e7c9      	b.n	8008bca <__ieee754_atan2+0x42>
 8008c36:	a136      	add	r1, pc, #216	; (adr r1, 8008d10 <__ieee754_atan2+0x188>)
 8008c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c3c:	e7c5      	b.n	8008bca <__ieee754_atan2+0x42>
 8008c3e:	a136      	add	r1, pc, #216	; (adr r1, 8008d18 <__ieee754_atan2+0x190>)
 8008c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c44:	e7c1      	b.n	8008bca <__ieee754_atan2+0x42>
 8008c46:	2c02      	cmp	r4, #2
 8008c48:	d04b      	beq.n	8008ce2 <__ieee754_atan2+0x15a>
 8008c4a:	2c03      	cmp	r4, #3
 8008c4c:	d0d7      	beq.n	8008bfe <__ieee754_atan2+0x76>
 8008c4e:	2c01      	cmp	r4, #1
 8008c50:	f04f 0000 	mov.w	r0, #0
 8008c54:	d102      	bne.n	8008c5c <__ieee754_atan2+0xd4>
 8008c56:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008c5a:	e7b6      	b.n	8008bca <__ieee754_atan2+0x42>
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	e7b4      	b.n	8008bca <__ieee754_atan2+0x42>
 8008c60:	4573      	cmp	r3, lr
 8008c62:	d0d3      	beq.n	8008c0c <__ieee754_atan2+0x84>
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	151b      	asrs	r3, r3, #20
 8008c68:	2b3c      	cmp	r3, #60	; 0x3c
 8008c6a:	dc1e      	bgt.n	8008caa <__ieee754_atan2+0x122>
 8008c6c:	2f00      	cmp	r7, #0
 8008c6e:	da01      	bge.n	8008c74 <__ieee754_atan2+0xec>
 8008c70:	333c      	adds	r3, #60	; 0x3c
 8008c72:	db1e      	blt.n	8008cb2 <__ieee754_atan2+0x12a>
 8008c74:	4632      	mov	r2, r6
 8008c76:	463b      	mov	r3, r7
 8008c78:	f7f7 fd94 	bl	80007a4 <__aeabi_ddiv>
 8008c7c:	ec41 0b10 	vmov	d0, r0, r1
 8008c80:	f7ff fcb2 	bl	80085e8 <fabs>
 8008c84:	f7ff fb10 	bl	80082a8 <atan>
 8008c88:	ec51 0b10 	vmov	r0, r1, d0
 8008c8c:	2c01      	cmp	r4, #1
 8008c8e:	d013      	beq.n	8008cb8 <__ieee754_atan2+0x130>
 8008c90:	2c02      	cmp	r4, #2
 8008c92:	d015      	beq.n	8008cc0 <__ieee754_atan2+0x138>
 8008c94:	2c00      	cmp	r4, #0
 8008c96:	d098      	beq.n	8008bca <__ieee754_atan2+0x42>
 8008c98:	a321      	add	r3, pc, #132	; (adr r3, 8008d20 <__ieee754_atan2+0x198>)
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	f7f7 fa9f 	bl	80001e0 <__aeabi_dsub>
 8008ca2:	a321      	add	r3, pc, #132	; (adr r3, 8008d28 <__ieee754_atan2+0x1a0>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	e014      	b.n	8008cd4 <__ieee754_atan2+0x14c>
 8008caa:	a121      	add	r1, pc, #132	; (adr r1, 8008d30 <__ieee754_atan2+0x1a8>)
 8008cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cb0:	e7ec      	b.n	8008c8c <__ieee754_atan2+0x104>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	e7e9      	b.n	8008c8c <__ieee754_atan2+0x104>
 8008cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	e784      	b.n	8008bca <__ieee754_atan2+0x42>
 8008cc0:	a317      	add	r3, pc, #92	; (adr r3, 8008d20 <__ieee754_atan2+0x198>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f7f7 fa8b 	bl	80001e0 <__aeabi_dsub>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	a116      	add	r1, pc, #88	; (adr r1, 8008d28 <__ieee754_atan2+0x1a0>)
 8008cd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cd4:	f7f7 fa84 	bl	80001e0 <__aeabi_dsub>
 8008cd8:	e777      	b.n	8008bca <__ieee754_atan2+0x42>
 8008cda:	a117      	add	r1, pc, #92	; (adr r1, 8008d38 <__ieee754_atan2+0x1b0>)
 8008cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce0:	e773      	b.n	8008bca <__ieee754_atan2+0x42>
 8008ce2:	a111      	add	r1, pc, #68	; (adr r1, 8008d28 <__ieee754_atan2+0x1a0>)
 8008ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ce8:	e76f      	b.n	8008bca <__ieee754_atan2+0x42>
 8008cea:	a111      	add	r1, pc, #68	; (adr r1, 8008d30 <__ieee754_atan2+0x1a8>)
 8008cec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cf0:	e76b      	b.n	8008bca <__ieee754_atan2+0x42>
 8008cf2:	bf00      	nop
 8008cf4:	f3af 8000 	nop.w
 8008cf8:	54442d18 	.word	0x54442d18
 8008cfc:	c00921fb 	.word	0xc00921fb
 8008d00:	54442d18 	.word	0x54442d18
 8008d04:	bff921fb 	.word	0xbff921fb
 8008d08:	54442d18 	.word	0x54442d18
 8008d0c:	bfe921fb 	.word	0xbfe921fb
 8008d10:	7f3321d2 	.word	0x7f3321d2
 8008d14:	4002d97c 	.word	0x4002d97c
 8008d18:	7f3321d2 	.word	0x7f3321d2
 8008d1c:	c002d97c 	.word	0xc002d97c
 8008d20:	33145c07 	.word	0x33145c07
 8008d24:	3ca1a626 	.word	0x3ca1a626
 8008d28:	54442d18 	.word	0x54442d18
 8008d2c:	400921fb 	.word	0x400921fb
 8008d30:	54442d18 	.word	0x54442d18
 8008d34:	3ff921fb 	.word	0x3ff921fb
 8008d38:	54442d18 	.word	0x54442d18
 8008d3c:	3fe921fb 	.word	0x3fe921fb
 8008d40:	7ff00000 	.word	0x7ff00000

08008d44 <__ieee754_sqrt>:
 8008d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d48:	4955      	ldr	r1, [pc, #340]	; (8008ea0 <__ieee754_sqrt+0x15c>)
 8008d4a:	ec55 4b10 	vmov	r4, r5, d0
 8008d4e:	43a9      	bics	r1, r5
 8008d50:	462b      	mov	r3, r5
 8008d52:	462a      	mov	r2, r5
 8008d54:	d112      	bne.n	8008d7c <__ieee754_sqrt+0x38>
 8008d56:	ee10 2a10 	vmov	r2, s0
 8008d5a:	ee10 0a10 	vmov	r0, s0
 8008d5e:	4629      	mov	r1, r5
 8008d60:	f7f7 fbf6 	bl	8000550 <__aeabi_dmul>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4620      	mov	r0, r4
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	f7f7 fa3a 	bl	80001e4 <__adddf3>
 8008d70:	4604      	mov	r4, r0
 8008d72:	460d      	mov	r5, r1
 8008d74:	ec45 4b10 	vmov	d0, r4, r5
 8008d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d7c:	2d00      	cmp	r5, #0
 8008d7e:	ee10 0a10 	vmov	r0, s0
 8008d82:	4621      	mov	r1, r4
 8008d84:	dc0f      	bgt.n	8008da6 <__ieee754_sqrt+0x62>
 8008d86:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d8a:	4330      	orrs	r0, r6
 8008d8c:	d0f2      	beq.n	8008d74 <__ieee754_sqrt+0x30>
 8008d8e:	b155      	cbz	r5, 8008da6 <__ieee754_sqrt+0x62>
 8008d90:	ee10 2a10 	vmov	r2, s0
 8008d94:	4620      	mov	r0, r4
 8008d96:	4629      	mov	r1, r5
 8008d98:	f7f7 fa22 	bl	80001e0 <__aeabi_dsub>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	f7f7 fd00 	bl	80007a4 <__aeabi_ddiv>
 8008da4:	e7e4      	b.n	8008d70 <__ieee754_sqrt+0x2c>
 8008da6:	151b      	asrs	r3, r3, #20
 8008da8:	d073      	beq.n	8008e92 <__ieee754_sqrt+0x14e>
 8008daa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008dae:	07dd      	lsls	r5, r3, #31
 8008db0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008db4:	bf48      	it	mi
 8008db6:	0fc8      	lsrmi	r0, r1, #31
 8008db8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008dbc:	bf44      	itt	mi
 8008dbe:	0049      	lslmi	r1, r1, #1
 8008dc0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008dc4:	2500      	movs	r5, #0
 8008dc6:	1058      	asrs	r0, r3, #1
 8008dc8:	0fcb      	lsrs	r3, r1, #31
 8008dca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008dce:	0049      	lsls	r1, r1, #1
 8008dd0:	2316      	movs	r3, #22
 8008dd2:	462c      	mov	r4, r5
 8008dd4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008dd8:	19a7      	adds	r7, r4, r6
 8008dda:	4297      	cmp	r7, r2
 8008ddc:	bfde      	ittt	le
 8008dde:	19bc      	addle	r4, r7, r6
 8008de0:	1bd2      	suble	r2, r2, r7
 8008de2:	19ad      	addle	r5, r5, r6
 8008de4:	0fcf      	lsrs	r7, r1, #31
 8008de6:	3b01      	subs	r3, #1
 8008de8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008dec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008df0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008df4:	d1f0      	bne.n	8008dd8 <__ieee754_sqrt+0x94>
 8008df6:	f04f 0c20 	mov.w	ip, #32
 8008dfa:	469e      	mov	lr, r3
 8008dfc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008e00:	42a2      	cmp	r2, r4
 8008e02:	eb06 070e 	add.w	r7, r6, lr
 8008e06:	dc02      	bgt.n	8008e0e <__ieee754_sqrt+0xca>
 8008e08:	d112      	bne.n	8008e30 <__ieee754_sqrt+0xec>
 8008e0a:	428f      	cmp	r7, r1
 8008e0c:	d810      	bhi.n	8008e30 <__ieee754_sqrt+0xec>
 8008e0e:	2f00      	cmp	r7, #0
 8008e10:	eb07 0e06 	add.w	lr, r7, r6
 8008e14:	da42      	bge.n	8008e9c <__ieee754_sqrt+0x158>
 8008e16:	f1be 0f00 	cmp.w	lr, #0
 8008e1a:	db3f      	blt.n	8008e9c <__ieee754_sqrt+0x158>
 8008e1c:	f104 0801 	add.w	r8, r4, #1
 8008e20:	1b12      	subs	r2, r2, r4
 8008e22:	428f      	cmp	r7, r1
 8008e24:	bf88      	it	hi
 8008e26:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8008e2a:	1bc9      	subs	r1, r1, r7
 8008e2c:	4433      	add	r3, r6
 8008e2e:	4644      	mov	r4, r8
 8008e30:	0052      	lsls	r2, r2, #1
 8008e32:	f1bc 0c01 	subs.w	ip, ip, #1
 8008e36:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008e3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008e3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008e42:	d1dd      	bne.n	8008e00 <__ieee754_sqrt+0xbc>
 8008e44:	430a      	orrs	r2, r1
 8008e46:	d006      	beq.n	8008e56 <__ieee754_sqrt+0x112>
 8008e48:	1c5c      	adds	r4, r3, #1
 8008e4a:	bf13      	iteet	ne
 8008e4c:	3301      	addne	r3, #1
 8008e4e:	3501      	addeq	r5, #1
 8008e50:	4663      	moveq	r3, ip
 8008e52:	f023 0301 	bicne.w	r3, r3, #1
 8008e56:	106a      	asrs	r2, r5, #1
 8008e58:	085b      	lsrs	r3, r3, #1
 8008e5a:	07e9      	lsls	r1, r5, #31
 8008e5c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008e60:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008e64:	bf48      	it	mi
 8008e66:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008e6a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008e6e:	461c      	mov	r4, r3
 8008e70:	e780      	b.n	8008d74 <__ieee754_sqrt+0x30>
 8008e72:	0aca      	lsrs	r2, r1, #11
 8008e74:	3815      	subs	r0, #21
 8008e76:	0549      	lsls	r1, r1, #21
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	d0fa      	beq.n	8008e72 <__ieee754_sqrt+0x12e>
 8008e7c:	02d6      	lsls	r6, r2, #11
 8008e7e:	d50a      	bpl.n	8008e96 <__ieee754_sqrt+0x152>
 8008e80:	f1c3 0420 	rsb	r4, r3, #32
 8008e84:	fa21 f404 	lsr.w	r4, r1, r4
 8008e88:	1e5d      	subs	r5, r3, #1
 8008e8a:	4099      	lsls	r1, r3
 8008e8c:	4322      	orrs	r2, r4
 8008e8e:	1b43      	subs	r3, r0, r5
 8008e90:	e78b      	b.n	8008daa <__ieee754_sqrt+0x66>
 8008e92:	4618      	mov	r0, r3
 8008e94:	e7f0      	b.n	8008e78 <__ieee754_sqrt+0x134>
 8008e96:	0052      	lsls	r2, r2, #1
 8008e98:	3301      	adds	r3, #1
 8008e9a:	e7ef      	b.n	8008e7c <__ieee754_sqrt+0x138>
 8008e9c:	46a0      	mov	r8, r4
 8008e9e:	e7bf      	b.n	8008e20 <__ieee754_sqrt+0xdc>
 8008ea0:	7ff00000 	.word	0x7ff00000

08008ea4 <matherr>:
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	4770      	bx	lr

08008ea8 <nan>:
 8008ea8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008eb0 <nan+0x8>
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	00000000 	.word	0x00000000
 8008eb4:	7ff80000 	.word	0x7ff80000

08008eb8 <_init>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	bf00      	nop
 8008ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ebe:	bc08      	pop	{r3}
 8008ec0:	469e      	mov	lr, r3
 8008ec2:	4770      	bx	lr

08008ec4 <_fini>:
 8008ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ec6:	bf00      	nop
 8008ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eca:	bc08      	pop	{r3}
 8008ecc:	469e      	mov	lr, r3
 8008ece:	4770      	bx	lr
