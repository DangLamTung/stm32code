
RTOS drone test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006000  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061fc  080061fc  000204d8  2**0
                  CONTENTS
  4 .ARM          00000008  080061fc  080061fc  000161fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006204  08006204  000204d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006204  08006204  00016204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800620c  0800620c  0001620c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d8  20000000  08006214  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000156c  200004d8  080066ec  000204d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001a44  080066ec  00021a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010875  00000000  00000000  00020508  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f03  00000000  00000000  00030d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f58  00000000  00000000  00032c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021dc4  00000000  00000000  00034a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5ff  00000000  00000000  0005684c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c425c  00000000  00000000  00060e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001250a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004788  00000000  00000000  00125124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200004d8 	.word	0x200004d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006170 	.word	0x08006170

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200004dc 	.word	0x200004dc
 80001c4:	08006170 	.word	0x08006170

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e4c:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <MX_I2C1_Init+0x54>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <MX_I2C1_Init+0x4c>)
 8000e7e:	f002 f941 	bl	8003104 <HAL_I2C_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200004f4 	.word	0x200004f4
 8000e90:	40005400 	.word	0x40005400
 8000e94:	00061a80 	.word	0x00061a80

08000e98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_TIM4_Init+0x80>)
 8000eb6:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <MX_TIM4_Init+0x84>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <MX_TIM4_Init+0x80>)
 8000ebc:	22a7      	movs	r2, #167	; 0xa7
 8000ebe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_TIM4_Init+0x80>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_TIM4_Init+0x80>)
 8000ec8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ecc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <MX_TIM4_Init+0x80>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_TIM4_Init+0x80>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <MX_TIM4_Init+0x80>)
 8000edc:	f003 fe04 	bl	8004ae8 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
  {

  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <MX_TIM4_Init+0x80>)
 8000ef2:	f003 ff50 	bl	8004d96 <HAL_TIM_ConfigClockSource>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
  {

  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4804      	ldr	r0, [pc, #16]	; (8000f18 <MX_TIM4_Init+0x80>)
 8000f08:	f004 f95e 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000588 	.word	0x20000588
 8000f1c:	40000800 	.word	0x40000800

08000f20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_USART3_UART_Init+0x44>)
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <MX_USART3_UART_Init+0x48>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_USART3_UART_Init+0x44>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_USART3_UART_Init+0x44>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_USART3_UART_Init+0x44>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_USART3_UART_Init+0x44>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_USART3_UART_Init+0x44>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_USART3_UART_Init+0x44>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <MX_USART3_UART_Init+0x44>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <MX_USART3_UART_Init+0x44>)
 8000f58:	f004 f9c6 	bl	80052e8 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000548 	.word	0x20000548
 8000f68:	40004800 	.word	0x40004800

08000f6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <MX_GPIO_Init+0x104>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a39      	ldr	r2, [pc, #228]	; (8001070 <MX_GPIO_Init+0x104>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b37      	ldr	r3, [pc, #220]	; (8001070 <MX_GPIO_Init+0x104>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <MX_GPIO_Init+0x104>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a32      	ldr	r2, [pc, #200]	; (8001070 <MX_GPIO_Init+0x104>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <MX_GPIO_Init+0x104>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	; (8001070 <MX_GPIO_Init+0x104>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a2b      	ldr	r2, [pc, #172]	; (8001070 <MX_GPIO_Init+0x104>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <MX_GPIO_Init+0x104>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <MX_GPIO_Init+0x104>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a24      	ldr	r2, [pc, #144]	; (8001070 <MX_GPIO_Init+0x104>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_GPIO_Init+0x104>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2110      	movs	r1, #16
 8000ff6:	481f      	ldr	r0, [pc, #124]	; (8001074 <MX_GPIO_Init+0x108>)
 8000ff8:	f002 f850 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2130      	movs	r1, #48	; 0x30
 8001000:	481d      	ldr	r0, [pc, #116]	; (8001078 <MX_GPIO_Init+0x10c>)
 8001002:	f002 f84b 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f243 0104 	movw	r1, #12292	; 0x3004
 800100c:	481b      	ldr	r0, [pc, #108]	; (800107c <MX_GPIO_Init+0x110>)
 800100e:	f002 f845 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001012:	2310      	movs	r3, #16
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4812      	ldr	r0, [pc, #72]	; (8001074 <MX_GPIO_Init+0x108>)
 800102a:	f001 fe9d 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800102e:	2330      	movs	r3, #48	; 0x30
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_GPIO_Init+0x10c>)
 8001046:	f001 fe8f 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13;
 800104a:	f243 0304 	movw	r3, #12292	; 0x3004
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_GPIO_Init+0x110>)
 8001064:	f001 fe80 	bl	8002d68 <HAL_GPIO_Init>

}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40020000 	.word	0x40020000
 8001078:	40020800 	.word	0x40020800
 800107c:	40020400 	.word	0x40020400

08001080 <_ZSt4atanf>:
  using ::atan;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan(float __x)
  { return __builtin_atanf(__x); }
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	ed87 0a01 	vstr	s0, [r7, #4]
 800108a:	ed97 0a01 	vldr	s0, [r7, #4]
 800108e:	f004 fcf9 	bl	8005a84 <atanf>
 8001092:	eef0 7a40 	vmov.f32	s15, s0
 8001096:	eeb0 0a67 	vmov.f32	s0, s15
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010aa:	edc7 0a00 	vstr	s1, [r7]
 80010ae:	edd7 0a00 	vldr	s1, [r7]
 80010b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b6:	f004 fe1b 	bl	8005cf0 <atan2f>
 80010ba:	eef0 7a40 	vmov.f32	s15, s0
 80010be:	eeb0 0a67 	vmov.f32	s0, s15
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80010d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010d6:	f004 fe0d 	bl	8005cf4 <sqrtf>
 80010da:	eef0 7a40 	vmov.f32	s15, s0
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_Z8init_MPUv>:
float b2 = 1.0000;
float roll_acc;
float a1 = -1.9382;
float a2 = 0.9400;

char init_MPU(){
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b091      	sub	sp, #68	; 0x44
 80010ec:	af02      	add	r7, sp, #8
    char status = 1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    uint8_t d[2];
    uint8_t device_address = MPU_ADDRESS;
 80010f4:	23d0      	movs	r3, #208	; 0xd0
 80010f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint8_t magnet_address = MAG_ADRRESS;
 80010fa:	2318      	movs	r3, #24
 80010fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29



  	char rx_data[25];
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001100:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001104:	b299      	uxth	r1, r3
 8001106:	2302      	movs	r3, #2
 8001108:	2203      	movs	r2, #3
 800110a:	48bb      	ldr	r0, [pc, #748]	; (80013f8 <_Z8init_MPUv+0x310>)
 800110c:	f002 fc56 	bl	80039bc <HAL_I2C_IsDeviceReady>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf14      	ite	ne
 8001116:	2301      	movne	r3, #1
 8001118:	2300      	moveq	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d010      	beq.n	8001142 <_Z8init_MPUv+0x5a>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001126:	48b5      	ldr	r0, [pc, #724]	; (80013fc <_Z8init_MPUv+0x314>)
 8001128:	f001 ffb8 	bl	800309c <HAL_GPIO_WritePin>
    	HAL_Delay(500);
 800112c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001130:	f001 fce6 	bl	8002b00 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113a:	48b0      	ldr	r0, [pc, #704]	; (80013fc <_Z8init_MPUv+0x314>)
 800113c:	f001 ffae 	bl	800309c <HAL_GPIO_WritePin>
    while (HAL_I2C_IsDeviceReady(&hi2c1, device_address, 3, 2) != HAL_OK) {
 8001140:	e7de      	b.n	8001100 <_Z8init_MPUv+0x18>
      }

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001148:	48ac      	ldr	r0, [pc, #688]	; (80013fc <_Z8init_MPUv+0x314>)
 800114a:	f001 ffa7 	bl	800309c <HAL_GPIO_WritePin>


//    HAL_UART_Transmit(&huart3,rx_data, strlen(rx_data),1000);

	/* Try to transmit via I2C */
	d[0] = PWR_MGMT_1;
 800114e:	236b      	movs	r3, #107	; 0x6b
 8001150:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address , (uint8_t *)d, 2, 1000) != HAL_OK)
 800115a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800115e:	b299      	uxth	r1, r3
 8001160:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2302      	movs	r3, #2
 800116c:	48a2      	ldr	r0, [pc, #648]	; (80013f8 <_Z8init_MPUv+0x310>)
 800116e:	f002 f901 	bl	8003374 <HAL_I2C_Master_Transmit>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0

	}

	/* Set data sample rate */

	d[0] = SAMPLE_RATE;
 8001176:	2319      	movs	r3, #25
 8001178:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = sample_1khz;
 800117c:	2307      	movs	r3, #7
 800117e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001182:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001186:	b299      	uxth	r1, r3
 8001188:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2302      	movs	r3, #2
 8001194:	4898      	ldr	r0, [pc, #608]	; (80013f8 <_Z8init_MPUv+0x310>)
 8001196:	f002 f8ed 	bl	8003374 <HAL_I2C_Master_Transmit>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d000      	beq.n	80011ac <_Z8init_MPUv+0xc4>
 80011aa:	e7ea      	b.n	8001182 <_Z8init_MPUv+0x9a>

	d[0] = CONFIG;
 80011ac:	231a      	movs	r3, #26
 80011ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = lpf;
 80011b2:	2301      	movs	r3, #1
 80011b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80011b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80011bc:	b299      	uxth	r1, r3
 80011be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2302      	movs	r3, #2
 80011ca:	488b      	ldr	r0, [pc, #556]	; (80013f8 <_Z8init_MPUv+0x310>)
 80011cc:	f002 f8d2 	bl	8003374 <HAL_I2C_Master_Transmit>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bf14      	ite	ne
 80011d6:	2301      	movne	r3, #1
 80011d8:	2300      	moveq	r3, #0
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d000      	beq.n	80011e2 <_Z8init_MPUv+0xfa>
 80011e0:	e7ea      	b.n	80011b8 <_Z8init_MPUv+0xd0>

	d[0] = GYRO_CONFIG;
 80011e2:	231b      	movs	r3, #27
 80011e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = gyro_con;
 80011e8:	2318      	movs	r3, #24
 80011ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80011ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80011f2:	b299      	uxth	r1, r3
 80011f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2302      	movs	r3, #2
 8001200:	487d      	ldr	r0, [pc, #500]	; (80013f8 <_Z8init_MPUv+0x310>)
 8001202:	f002 f8b7 	bl	8003374 <HAL_I2C_Master_Transmit>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	bf14      	ite	ne
 800120c:	2301      	movne	r3, #1
 800120e:	2300      	moveq	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d000      	beq.n	8001218 <_Z8init_MPUv+0x130>
 8001216:	e7ea      	b.n	80011ee <_Z8init_MPUv+0x106>

	d[0] = ACCEL_CONFIG;
 8001218:	231c      	movs	r3, #28
 800121a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x00;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001224:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001228:	b299      	uxth	r1, r3
 800122a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2302      	movs	r3, #2
 8001236:	4870      	ldr	r0, [pc, #448]	; (80013f8 <_Z8init_MPUv+0x310>)
 8001238:	f002 f89c 	bl	8003374 <HAL_I2C_Master_Transmit>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d000      	beq.n	800124e <_Z8init_MPUv+0x166>
 800124c:	e7ea      	b.n	8001224 <_Z8init_MPUv+0x13c>

	d[0] = ACCEL_CONFIG2;
 800124e:	231d      	movs	r3, #29
 8001250:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = 0x02;
 8001254:	2302      	movs	r3, #2
 8001256:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800125a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800125e:	b299      	uxth	r1, r3
 8001260:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2302      	movs	r3, #2
 800126c:	4862      	ldr	r0, [pc, #392]	; (80013f8 <_Z8init_MPUv+0x310>)
 800126e:	f002 f881 	bl	8003374 <HAL_I2C_Master_Transmit>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d000      	beq.n	8001284 <_Z8init_MPUv+0x19c>
 8001282:	e7ea      	b.n	800125a <_Z8init_MPUv+0x172>


	d[0] = INIT_ENB;
 8001284:	2338      	movs	r3, #56	; 0x38
 8001286:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = inter;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001290:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001294:	b299      	uxth	r1, r3
 8001296:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2302      	movs	r3, #2
 80012a2:	4855      	ldr	r0, [pc, #340]	; (80013f8 <_Z8init_MPUv+0x310>)
 80012a4:	f002 f866 	bl	8003374 <HAL_I2C_Master_Transmit>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	bf14      	ite	ne
 80012ae:	2301      	movne	r3, #1
 80012b0:	2300      	moveq	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d000      	beq.n	80012ba <_Z8init_MPUv+0x1d2>
 80012b8:	e7ea      	b.n	8001290 <_Z8init_MPUv+0x1a8>

	d[0] = USER_CTRL;
 80012ba:	236a      	movs	r3, #106	; 0x6a
 80012bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    d[1] = zero;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80012c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80012ca:	b299      	uxth	r1, r3
 80012cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2302      	movs	r3, #2
 80012d8:	4847      	ldr	r0, [pc, #284]	; (80013f8 <_Z8init_MPUv+0x310>)
 80012da:	f002 f84b 	bl	8003374 <HAL_I2C_Master_Transmit>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf14      	ite	ne
 80012e4:	2301      	movne	r3, #1
 80012e6:	2300      	moveq	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <_Z8init_MPUv+0x208>
 80012ee:	e7ea      	b.n	80012c6 <_Z8init_MPUv+0x1de>

	d[0] = INT_BYPASS;
 80012f0:	2337      	movs	r3, #55	; 0x37
 80012f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	d[1] = stop_i2c_master;
 80012f6:	2322      	movs	r3, #34	; 0x22
 80012f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address,(uint8_t *)d,2,1000)!=HAL_OK);
 80012fc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001300:	b299      	uxth	r1, r3
 8001302:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2302      	movs	r3, #2
 800130e:	483a      	ldr	r0, [pc, #232]	; (80013f8 <_Z8init_MPUv+0x310>)
 8001310:	f002 f830 	bl	8003374 <HAL_I2C_Master_Transmit>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf14      	ite	ne
 800131a:	2301      	movne	r3, #1
 800131c:	2300      	moveq	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d000      	beq.n	8001326 <_Z8init_MPUv+0x23e>
 8001324:	e7ea      	b.n	80012fc <_Z8init_MPUv+0x214>

	if (HAL_I2C_IsDeviceReady(&hi2c1, magnet_address, 3, 200) != HAL_OK) {
 8001326:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800132a:	b299      	uxth	r1, r3
 800132c:	23c8      	movs	r3, #200	; 0xc8
 800132e:	2203      	movs	r2, #3
 8001330:	4831      	ldr	r0, [pc, #196]	; (80013f8 <_Z8init_MPUv+0x310>)
 8001332:	f002 fb43 	bl	80039bc <HAL_I2C_IsDeviceReady>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf14      	ite	ne
 800133c:	2301      	movne	r3, #1
 800133e:	2300      	moveq	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d01e      	beq.n	8001384 <_Z8init_MPUv+0x29c>
	    	strcpy( rx_data, "No Device \r \n");
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	4a2d      	ldr	r2, [pc, #180]	; (8001400 <_Z8init_MPUv+0x318>)
 800134c:	461c      	mov	r4, r3
 800134e:	4613      	mov	r3, r2
 8001350:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001352:	c407      	stmia	r4!, {r0, r1, r2}
 8001354:	8023      	strh	r3, [r4, #0]
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135c:	4827      	ldr	r0, [pc, #156]	; (80013fc <_Z8init_MPUv+0x314>)
 800135e:	f001 fe9d 	bl	800309c <HAL_GPIO_WritePin>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001368:	4824      	ldr	r0, [pc, #144]	; (80013fc <_Z8init_MPUv+0x314>)
 800136a:	f001 fe97 	bl	800309c <HAL_GPIO_WritePin>
	    	HAL_Delay(500);
 800136e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001372:	f001 fbc5 	bl	8002b00 <HAL_Delay>
	    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137c:	481f      	ldr	r0, [pc, #124]	; (80013fc <_Z8init_MPUv+0x314>)
 800137e:	f001 fe8d 	bl	800309c <HAL_GPIO_WritePin>
 8001382:	e10c      	b.n	800159e <_Z8init_MPUv+0x4b6>
	      }
	      else{
	    	    d[0] = CNTL1_AD;
 8001384:	230a      	movs	r3, #10
 8001386:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	  	d[1] = ROM_MODE;
 800138a:	231f      	movs	r3, #31
 800138c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	  	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t) magnet_address,(uint8_t *)d,2,2)!=HAL_OK);
 8001390:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001394:	b299      	uxth	r1, r3
 8001396:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800139a:	2302      	movs	r3, #2
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2302      	movs	r3, #2
 80013a0:	4815      	ldr	r0, [pc, #84]	; (80013f8 <_Z8init_MPUv+0x310>)
 80013a2:	f001 ffe7 	bl	8003374 <HAL_I2C_Master_Transmit>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bf14      	ite	ne
 80013ac:	2301      	movne	r3, #1
 80013ae:	2300      	moveq	r3, #0
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d000      	beq.n	80013b8 <_Z8init_MPUv+0x2d0>
 80013b6:	e7eb      	b.n	8001390 <_Z8init_MPUv+0x2a8>

	    	  //	HAL_Delay(100);
	    	  	 for(long i = 1000000; i>0 ;i--){
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <_Z8init_MPUv+0x31c>)
 80013ba:	637b      	str	r3, [r7, #52]	; 0x34
 80013bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013be:	2b00      	cmp	r3, #0
 80013c0:	dd03      	ble.n	80013ca <_Z8init_MPUv+0x2e2>
 80013c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c4:	3b01      	subs	r3, #1
 80013c6:	637b      	str	r3, [r7, #52]	; 0x34
 80013c8:	e7f8      	b.n	80013bc <_Z8init_MPUv+0x2d4>

	    	  		    	      }

	    	  	uint8_t sensitive = ASAX_AD;
 80013ca:	2310      	movs	r3, #16
 80013cc:	71fb      	strb	r3, [r7, #7]
	    	  	uint8_t asa [3];
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address, &sensitive, 1, 1000) != HAL_OK);
 80013ce:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80013d2:	b299      	uxth	r1, r3
 80013d4:	1dfa      	adds	r2, r7, #7
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <_Z8init_MPUv+0x310>)
 80013e0:	f001 ffc8 	bl	8003374 <HAL_I2C_Master_Transmit>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bf14      	ite	ne
 80013ea:	2301      	movne	r3, #1
 80013ec:	2300      	moveq	r3, #0
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d009      	beq.n	8001408 <_Z8init_MPUv+0x320>
 80013f4:	e7eb      	b.n	80013ce <_Z8init_MPUv+0x2e6>
 80013f6:	bf00      	nop
 80013f8:	200004f4 	.word	0x200004f4
 80013fc:	40020400 	.word	0x40020400
 8001400:	08006188 	.word	0x08006188
 8001404:	000f4240 	.word	0x000f4240
	    	      while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)magnet_address, (uint8_t *)asa,(uint16_t) 3, 1000) != HAL_OK);
 8001408:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800140c:	b299      	uxth	r1, r3
 800140e:	1d3a      	adds	r2, r7, #4
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2303      	movs	r3, #3
 8001418:	4864      	ldr	r0, [pc, #400]	; (80015ac <_Z8init_MPUv+0x4c4>)
 800141a:	f002 f8a9 	bl	8003570 <HAL_I2C_Master_Receive>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d000      	beq.n	8001430 <_Z8init_MPUv+0x348>
 800142e:	e7eb      	b.n	8001408 <_Z8init_MPUv+0x320>

	    	      asax = (asa[0]-128)*0.5/128+1;
 8001430:	793b      	ldrb	r3, [r7, #4]
 8001432:	3b80      	subs	r3, #128	; 0x80
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f819 	bl	800046c <__aeabi_i2d>
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	4b5c      	ldr	r3, [pc, #368]	; (80015b0 <_Z8init_MPUv+0x4c8>)
 8001440:	f7ff f87e 	bl	8000540 <__aeabi_dmul>
 8001444:	4603      	mov	r3, r0
 8001446:	460c      	mov	r4, r1
 8001448:	4618      	mov	r0, r3
 800144a:	4621      	mov	r1, r4
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <_Z8init_MPUv+0x4cc>)
 8001452:	f7ff f99f 	bl	8000794 <__aeabi_ddiv>
 8001456:	4603      	mov	r3, r0
 8001458:	460c      	mov	r4, r1
 800145a:	4618      	mov	r0, r3
 800145c:	4621      	mov	r1, r4
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <_Z8init_MPUv+0x4d0>)
 8001464:	f7fe feb6 	bl	80001d4 <__adddf3>
 8001468:	4603      	mov	r3, r0
 800146a:	460c      	mov	r4, r1
 800146c:	4618      	mov	r0, r3
 800146e:	4621      	mov	r1, r4
 8001470:	f7ff fb16 	bl	8000aa0 <__aeabi_d2f>
 8001474:	4602      	mov	r2, r0
 8001476:	4b51      	ldr	r3, [pc, #324]	; (80015bc <_Z8init_MPUv+0x4d4>)
 8001478:	601a      	str	r2, [r3, #0]
	    	      asay = (asa[1]-128)*0.5/128+1;
 800147a:	797b      	ldrb	r3, [r7, #5]
 800147c:	3b80      	subs	r3, #128	; 0x80
 800147e:	4618      	mov	r0, r3
 8001480:	f7fe fff4 	bl	800046c <__aeabi_i2d>
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <_Z8init_MPUv+0x4c8>)
 800148a:	f7ff f859 	bl	8000540 <__aeabi_dmul>
 800148e:	4603      	mov	r3, r0
 8001490:	460c      	mov	r4, r1
 8001492:	4618      	mov	r0, r3
 8001494:	4621      	mov	r1, r4
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b46      	ldr	r3, [pc, #280]	; (80015b4 <_Z8init_MPUv+0x4cc>)
 800149c:	f7ff f97a 	bl	8000794 <__aeabi_ddiv>
 80014a0:	4603      	mov	r3, r0
 80014a2:	460c      	mov	r4, r1
 80014a4:	4618      	mov	r0, r3
 80014a6:	4621      	mov	r1, r4
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <_Z8init_MPUv+0x4d0>)
 80014ae:	f7fe fe91 	bl	80001d4 <__adddf3>
 80014b2:	4603      	mov	r3, r0
 80014b4:	460c      	mov	r4, r1
 80014b6:	4618      	mov	r0, r3
 80014b8:	4621      	mov	r1, r4
 80014ba:	f7ff faf1 	bl	8000aa0 <__aeabi_d2f>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b3f      	ldr	r3, [pc, #252]	; (80015c0 <_Z8init_MPUv+0x4d8>)
 80014c2:	601a      	str	r2, [r3, #0]
	    	      asaz = (asa[2]-128)*0.5/128+1;
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	3b80      	subs	r3, #128	; 0x80
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7fe ffcf 	bl	800046c <__aeabi_i2d>
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <_Z8init_MPUv+0x4c8>)
 80014d4:	f7ff f834 	bl	8000540 <__aeabi_dmul>
 80014d8:	4603      	mov	r3, r0
 80014da:	460c      	mov	r4, r1
 80014dc:	4618      	mov	r0, r3
 80014de:	4621      	mov	r1, r4
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	4b33      	ldr	r3, [pc, #204]	; (80015b4 <_Z8init_MPUv+0x4cc>)
 80014e6:	f7ff f955 	bl	8000794 <__aeabi_ddiv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	4618      	mov	r0, r3
 80014f0:	4621      	mov	r1, r4
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <_Z8init_MPUv+0x4d0>)
 80014f8:	f7fe fe6c 	bl	80001d4 <__adddf3>
 80014fc:	4603      	mov	r3, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	4618      	mov	r0, r3
 8001502:	4621      	mov	r1, r4
 8001504:	f7ff facc 	bl	8000aa0 <__aeabi_d2f>
 8001508:	4602      	mov	r2, r0
 800150a:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <_Z8init_MPUv+0x4dc>)
 800150c:	601a      	str	r2, [r3, #0]

	    	      d[0] = CNTL1_AD;
 800150e:	230a      	movs	r3, #10
 8001510:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = zero;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 800151a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800151e:	b299      	uxth	r1, r3
 8001520:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2302      	movs	r3, #2
 800152c:	481f      	ldr	r0, [pc, #124]	; (80015ac <_Z8init_MPUv+0x4c4>)
 800152e:	f001 ff21 	bl	8003374 <HAL_I2C_Master_Transmit>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	bf14      	ite	ne
 8001538:	2301      	movne	r3, #1
 800153a:	2300      	moveq	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d000      	beq.n	8001544 <_Z8init_MPUv+0x45c>
 8001542:	e7ea      	b.n	800151a <_Z8init_MPUv+0x432>

	    	      for(long i = 1000000; i>0 ;i--){
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <_Z8init_MPUv+0x4e0>)
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
 8001548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154a:	2b00      	cmp	r3, #0
 800154c:	dd03      	ble.n	8001556 <_Z8init_MPUv+0x46e>
 800154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001550:	3b01      	subs	r3, #1
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
 8001554:	e7f8      	b.n	8001548 <_Z8init_MPUv+0x460>

	    	      }

	    	      d[0] = CNTL1_AD;
 8001556:	230a      	movs	r3, #10
 8001558:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	    	      d[1] = 0x16;
 800155c:	2316      	movs	r3, #22
 800155e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	    	      while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)magnet_address,(uint8_t *)d,2,1000)!=HAL_OK);
 8001562:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001566:	b299      	uxth	r1, r3
 8001568:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800156c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2302      	movs	r3, #2
 8001574:	480d      	ldr	r0, [pc, #52]	; (80015ac <_Z8init_MPUv+0x4c4>)
 8001576:	f001 fefd 	bl	8003374 <HAL_I2C_Master_Transmit>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf14      	ite	ne
 8001580:	2301      	movne	r3, #1
 8001582:	2300      	moveq	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d000      	beq.n	800158c <_Z8init_MPUv+0x4a4>
 800158a:	e7ea      	b.n	8001562 <_Z8init_MPUv+0x47a>
	    	      for(long i = 1000000; i>0 ;i--){
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <_Z8init_MPUv+0x4e0>)
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	2b00      	cmp	r3, #0
 8001594:	dd03      	ble.n	800159e <_Z8init_MPUv+0x4b6>
 8001596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001598:	3b01      	subs	r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800159c:	e7f8      	b.n	8001590 <_Z8init_MPUv+0x4a8>

	    	    }
	    	      //HAL_Delay(100);
	      }
  return status;
 800159e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	373c      	adds	r7, #60	; 0x3c
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200004f4 	.word	0x200004f4
 80015b0:	3fe00000 	.word	0x3fe00000
 80015b4:	40600000 	.word	0x40600000
 80015b8:	3ff00000 	.word	0x3ff00000
 80015bc:	200005cc 	.word	0x200005cc
 80015c0:	200005d0 	.word	0x200005d0
 80015c4:	200005d4 	.word	0x200005d4
 80015c8:	000f4240 	.word	0x000f4240
 80015cc:	00000000 	.word	0x00000000

080015d0 <_Z11process_MPUb>:
	  Acc_z_  = 0;

}


IMU_data process_MPU(bool EKF){
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	70fb      	strb	r3, [r7, #3]
	IMU_data data_raw;
	uint8_t data[13];

	uint8_t reg = ACCEL_XOUT_H;
 80015dc:	233b      	movs	r3, #59	; 0x3b
 80015de:	73fb      	strb	r3, [r7, #15]
	uint8_t device_address = MPU_ADDRESS;
 80015e0:	23d0      	movs	r3, #208	; 0xd0
 80015e2:	77fb      	strb	r3, [r7, #31]


	while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 80015e4:	7ffb      	ldrb	r3, [r7, #31]
 80015e6:	b299      	uxth	r1, r3
 80015e8:	f107 020f 	add.w	r2, r7, #15
 80015ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2301      	movs	r3, #1
 80015f4:	48a0      	ldr	r0, [pc, #640]	; (8001878 <_Z11process_MPUb+0x2a8>)
 80015f6:	f001 febd 	bl	8003374 <HAL_I2C_Master_Transmit>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d000      	beq.n	800160c <_Z11process_MPUb+0x3c>
 800160a:	e7eb      	b.n	80015e4 <_Z11process_MPUb+0x14>
	while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 800160c:	7ffb      	ldrb	r3, [r7, #31]
 800160e:	b299      	uxth	r1, r3
 8001610:	f107 0210 	add.w	r2, r7, #16
 8001614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	230e      	movs	r3, #14
 800161c:	4896      	ldr	r0, [pc, #600]	; (8001878 <_Z11process_MPUb+0x2a8>)
 800161e:	f001 ffa7 	bl	8003570 <HAL_I2C_Master_Receive>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d000      	beq.n	8001634 <_Z11process_MPUb+0x64>
 8001632:	e7eb      	b.n	800160c <_Z11process_MPUb+0x3c>

	Acc_x = (int16_t)(data[0] << 8 | data[1]);
 8001634:	7c3b      	ldrb	r3, [r7, #16]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b21a      	sxth	r2, r3
 800163a:	7c7b      	ldrb	r3, [r7, #17]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21b      	sxth	r3, r3
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164a:	4b8c      	ldr	r3, [pc, #560]	; (800187c <_Z11process_MPUb+0x2ac>)
 800164c:	edc3 7a00 	vstr	s15, [r3]
	Acc_y = (int16_t)(data[2] << 8 | data[3]);
 8001650:	7cbb      	ldrb	r3, [r7, #18]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21a      	sxth	r2, r3
 8001656:	7cfb      	ldrb	r3, [r7, #19]
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21b      	sxth	r3, r3
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	4b86      	ldr	r3, [pc, #536]	; (8001880 <_Z11process_MPUb+0x2b0>)
 8001668:	edc3 7a00 	vstr	s15, [r3]
	Acc_z = (int16_t)(data[4] << 8 | data[5]);
 800166c:	7d3b      	ldrb	r3, [r7, #20]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	b21a      	sxth	r2, r3
 8001672:	7d7b      	ldrb	r3, [r7, #21]
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21b      	sxth	r3, r3
 800167a:	ee07 3a90 	vmov	s15, r3
 800167e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001682:	4b80      	ldr	r3, [pc, #512]	; (8001884 <_Z11process_MPUb+0x2b4>)
 8001684:	edc3 7a00 	vstr	s15, [r3]

    temp = (int16_t)(data[6] << 8 | data[7]);
 8001688:	7dbb      	ldrb	r3, [r7, #22]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	b21a      	sxth	r2, r3
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	b21b      	sxth	r3, r3
 8001692:	4313      	orrs	r3, r2
 8001694:	b21b      	sxth	r3, r3
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	4b7a      	ldr	r3, [pc, #488]	; (8001888 <_Z11process_MPUb+0x2b8>)
 80016a0:	edc3 7a00 	vstr	s15, [r3]

    Gyro_x = (int16_t)(data[8] << 8 | data[9]);
 80016a4:	7e3b      	ldrb	r3, [r7, #24]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b21a      	sxth	r2, r3
 80016aa:	7e7b      	ldrb	r3, [r7, #25]
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ba:	4b74      	ldr	r3, [pc, #464]	; (800188c <_Z11process_MPUb+0x2bc>)
 80016bc:	edc3 7a00 	vstr	s15, [r3]
    Gyro_y = (int16_t)(data[10] << 8 | data[11]);
 80016c0:	7ebb      	ldrb	r3, [r7, #26]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	7efb      	ldrb	r3, [r7, #27]
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d6:	4b6e      	ldr	r3, [pc, #440]	; (8001890 <_Z11process_MPUb+0x2c0>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
    Gyro_z = (int16_t)(data[12] << 8 | data[13]);
 80016dc:	7f3b      	ldrb	r3, [r7, #28]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	7f7b      	ldrb	r3, [r7, #29]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f2:	4b68      	ldr	r3, [pc, #416]	; (8001894 <_Z11process_MPUb+0x2c4>)
 80016f4:	edc3 7a00 	vstr	s15, [r3]

	Acc_x= (Acc_x)/16384.0 - bAx ;
 80016f8:	4b60      	ldr	r3, [pc, #384]	; (800187c <_Z11process_MPUb+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fec7 	bl	8000490 <__aeabi_f2d>
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b64      	ldr	r3, [pc, #400]	; (8001898 <_Z11process_MPUb+0x2c8>)
 8001708:	f7ff f844 	bl	8000794 <__aeabi_ddiv>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	4618      	mov	r0, r3
 8001712:	4621      	mov	r1, r4
 8001714:	4b61      	ldr	r3, [pc, #388]	; (800189c <_Z11process_MPUb+0x2cc>)
 8001716:	e9d3 3400 	ldrd	r3, r4, [r3]
 800171a:	461a      	mov	r2, r3
 800171c:	4623      	mov	r3, r4
 800171e:	f7fe fd57 	bl	80001d0 <__aeabi_dsub>
 8001722:	4603      	mov	r3, r0
 8001724:	460c      	mov	r4, r1
 8001726:	4618      	mov	r0, r3
 8001728:	4621      	mov	r1, r4
 800172a:	f7ff f9b9 	bl	8000aa0 <__aeabi_d2f>
 800172e:	4602      	mov	r2, r0
 8001730:	4b52      	ldr	r3, [pc, #328]	; (800187c <_Z11process_MPUb+0x2ac>)
 8001732:	601a      	str	r2, [r3, #0]
	Acc_y = (Acc_y)/16384.0 - bAy;
 8001734:	4b52      	ldr	r3, [pc, #328]	; (8001880 <_Z11process_MPUb+0x2b0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe fea9 	bl	8000490 <__aeabi_f2d>
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b55      	ldr	r3, [pc, #340]	; (8001898 <_Z11process_MPUb+0x2c8>)
 8001744:	f7ff f826 	bl	8000794 <__aeabi_ddiv>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	4618      	mov	r0, r3
 800174e:	4621      	mov	r1, r4
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <_Z11process_MPUb+0x2d0>)
 8001752:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001756:	461a      	mov	r2, r3
 8001758:	4623      	mov	r3, r4
 800175a:	f7fe fd39 	bl	80001d0 <__aeabi_dsub>
 800175e:	4603      	mov	r3, r0
 8001760:	460c      	mov	r4, r1
 8001762:	4618      	mov	r0, r3
 8001764:	4621      	mov	r1, r4
 8001766:	f7ff f99b 	bl	8000aa0 <__aeabi_d2f>
 800176a:	4602      	mov	r2, r0
 800176c:	4b44      	ldr	r3, [pc, #272]	; (8001880 <_Z11process_MPUb+0x2b0>)
 800176e:	601a      	str	r2, [r3, #0]
	Acc_z = (Acc_z)/16384.0 + bAz;
 8001770:	4b44      	ldr	r3, [pc, #272]	; (8001884 <_Z11process_MPUb+0x2b4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fe8b 	bl	8000490 <__aeabi_f2d>
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b46      	ldr	r3, [pc, #280]	; (8001898 <_Z11process_MPUb+0x2c8>)
 8001780:	f7ff f808 	bl	8000794 <__aeabi_ddiv>
 8001784:	4603      	mov	r3, r0
 8001786:	460c      	mov	r4, r1
 8001788:	4618      	mov	r0, r3
 800178a:	4621      	mov	r1, r4
 800178c:	4b45      	ldr	r3, [pc, #276]	; (80018a4 <_Z11process_MPUb+0x2d4>)
 800178e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001792:	461a      	mov	r2, r3
 8001794:	4623      	mov	r3, r4
 8001796:	f7fe fd1d 	bl	80001d4 <__adddf3>
 800179a:	4603      	mov	r3, r0
 800179c:	460c      	mov	r4, r1
 800179e:	4618      	mov	r0, r3
 80017a0:	4621      	mov	r1, r4
 80017a2:	f7ff f97d 	bl	8000aa0 <__aeabi_d2f>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b36      	ldr	r3, [pc, #216]	; (8001884 <_Z11process_MPUb+0x2b4>)
 80017aa:	601a      	str	r2, [r3, #0]
    if(!EKF){
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	f083 0301 	eor.w	r3, r3, #1
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d07d      	beq.n	80018b4 <_Z11process_MPUb+0x2e4>
	Gyro_x = (Gyro_x )/16.4- bGx;
 80017b8:	4b34      	ldr	r3, [pc, #208]	; (800188c <_Z11process_MPUb+0x2bc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fe67 	bl	8000490 <__aeabi_f2d>
 80017c2:	a32b      	add	r3, pc, #172	; (adr r3, 8001870 <_Z11process_MPUb+0x2a0>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ffe4 	bl	8000794 <__aeabi_ddiv>
 80017cc:	4603      	mov	r3, r0
 80017ce:	460c      	mov	r4, r1
 80017d0:	4618      	mov	r0, r3
 80017d2:	4621      	mov	r1, r4
 80017d4:	4b34      	ldr	r3, [pc, #208]	; (80018a8 <_Z11process_MPUb+0x2d8>)
 80017d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017da:	461a      	mov	r2, r3
 80017dc:	4623      	mov	r3, r4
 80017de:	f7fe fcf7 	bl	80001d0 <__aeabi_dsub>
 80017e2:	4603      	mov	r3, r0
 80017e4:	460c      	mov	r4, r1
 80017e6:	4618      	mov	r0, r3
 80017e8:	4621      	mov	r1, r4
 80017ea:	f7ff f959 	bl	8000aa0 <__aeabi_d2f>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <_Z11process_MPUb+0x2bc>)
 80017f2:	601a      	str	r2, [r3, #0]
	Gyro_y = (Gyro_y )/16.4- bGy;
 80017f4:	4b26      	ldr	r3, [pc, #152]	; (8001890 <_Z11process_MPUb+0x2c0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe49 	bl	8000490 <__aeabi_f2d>
 80017fe:	a31c      	add	r3, pc, #112	; (adr r3, 8001870 <_Z11process_MPUb+0x2a0>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe ffc6 	bl	8000794 <__aeabi_ddiv>
 8001808:	4603      	mov	r3, r0
 800180a:	460c      	mov	r4, r1
 800180c:	4618      	mov	r0, r3
 800180e:	4621      	mov	r1, r4
 8001810:	4b26      	ldr	r3, [pc, #152]	; (80018ac <_Z11process_MPUb+0x2dc>)
 8001812:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001816:	461a      	mov	r2, r3
 8001818:	4623      	mov	r3, r4
 800181a:	f7fe fcd9 	bl	80001d0 <__aeabi_dsub>
 800181e:	4603      	mov	r3, r0
 8001820:	460c      	mov	r4, r1
 8001822:	4618      	mov	r0, r3
 8001824:	4621      	mov	r1, r4
 8001826:	f7ff f93b 	bl	8000aa0 <__aeabi_d2f>
 800182a:	4602      	mov	r2, r0
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <_Z11process_MPUb+0x2c0>)
 800182e:	601a      	str	r2, [r3, #0]
	Gyro_z = (Gyro_z )/16.4- bGz;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <_Z11process_MPUb+0x2c4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe2b 	bl	8000490 <__aeabi_f2d>
 800183a:	a30d      	add	r3, pc, #52	; (adr r3, 8001870 <_Z11process_MPUb+0x2a0>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe ffa8 	bl	8000794 <__aeabi_ddiv>
 8001844:	4603      	mov	r3, r0
 8001846:	460c      	mov	r4, r1
 8001848:	4618      	mov	r0, r3
 800184a:	4621      	mov	r1, r4
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <_Z11process_MPUb+0x2e0>)
 800184e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001852:	461a      	mov	r2, r3
 8001854:	4623      	mov	r3, r4
 8001856:	f7fe fcbb 	bl	80001d0 <__aeabi_dsub>
 800185a:	4603      	mov	r3, r0
 800185c:	460c      	mov	r4, r1
 800185e:	4618      	mov	r0, r3
 8001860:	4621      	mov	r1, r4
 8001862:	f7ff f91d 	bl	8000aa0 <__aeabi_d2f>
 8001866:	4602      	mov	r2, r0
 8001868:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <_Z11process_MPUb+0x2c4>)
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e05b      	b.n	8001926 <_Z11process_MPUb+0x356>
 800186e:	bf00      	nop
 8001870:	66666666 	.word	0x66666666
 8001874:	40306666 	.word	0x40306666
 8001878:	200004f4 	.word	0x200004f4
 800187c:	20000610 	.word	0x20000610
 8001880:	20000614 	.word	0x20000614
 8001884:	20000618 	.word	0x20000618
 8001888:	200005c8 	.word	0x200005c8
 800188c:	2000061c 	.word	0x2000061c
 8001890:	20000620 	.word	0x20000620
 8001894:	20000624 	.word	0x20000624
 8001898:	40d00000 	.word	0x40d00000
 800189c:	200005d8 	.word	0x200005d8
 80018a0:	200005e0 	.word	0x200005e0
 80018a4:	200005e8 	.word	0x200005e8
 80018a8:	200005f0 	.word	0x200005f0
 80018ac:	200005f8 	.word	0x200005f8
 80018b0:	20000600 	.word	0x20000600
    }
    else{
    	Gyro_x = (Gyro_x )/16.4;
 80018b4:	4b2c      	ldr	r3, [pc, #176]	; (8001968 <_Z11process_MPUb+0x398>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fde9 	bl	8000490 <__aeabi_f2d>
 80018be:	a328      	add	r3, pc, #160	; (adr r3, 8001960 <_Z11process_MPUb+0x390>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe ff66 	bl	8000794 <__aeabi_ddiv>
 80018c8:	4603      	mov	r3, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	4618      	mov	r0, r3
 80018ce:	4621      	mov	r1, r4
 80018d0:	f7ff f8e6 	bl	8000aa0 <__aeabi_d2f>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <_Z11process_MPUb+0x398>)
 80018d8:	601a      	str	r2, [r3, #0]
    	Gyro_y = (Gyro_y )/16.4;
 80018da:	4b24      	ldr	r3, [pc, #144]	; (800196c <_Z11process_MPUb+0x39c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fdd6 	bl	8000490 <__aeabi_f2d>
 80018e4:	a31e      	add	r3, pc, #120	; (adr r3, 8001960 <_Z11process_MPUb+0x390>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe ff53 	bl	8000794 <__aeabi_ddiv>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	4618      	mov	r0, r3
 80018f4:	4621      	mov	r1, r4
 80018f6:	f7ff f8d3 	bl	8000aa0 <__aeabi_d2f>
 80018fa:	4602      	mov	r2, r0
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <_Z11process_MPUb+0x39c>)
 80018fe:	601a      	str	r2, [r3, #0]
    	Gyro_z = (Gyro_z )/16.4;
 8001900:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <_Z11process_MPUb+0x3a0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fdc3 	bl	8000490 <__aeabi_f2d>
 800190a:	a315      	add	r3, pc, #84	; (adr r3, 8001960 <_Z11process_MPUb+0x390>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	f7fe ff40 	bl	8000794 <__aeabi_ddiv>
 8001914:	4603      	mov	r3, r0
 8001916:	460c      	mov	r4, r1
 8001918:	4618      	mov	r0, r3
 800191a:	4621      	mov	r1, r4
 800191c:	f7ff f8c0 	bl	8000aa0 <__aeabi_d2f>
 8001920:	4602      	mov	r2, r0
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <_Z11process_MPUb+0x3a0>)
 8001924:	601a      	str	r2, [r3, #0]
    }
    data_raw.Gyro_x = Gyro_x;
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_Z11process_MPUb+0x398>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	601a      	str	r2, [r3, #0]
    data_raw.Gyro_y = Gyro_y;
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <_Z11process_MPUb+0x39c>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	605a      	str	r2, [r3, #4]
    data_raw.Gyro_z = Gyro_z;
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <_Z11process_MPUb+0x3a0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]
    data_raw.Acc_x = Acc_x;
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <_Z11process_MPUb+0x3a4>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60da      	str	r2, [r3, #12]
    data_raw.Acc_y = Acc_y;
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <_Z11process_MPUb+0x3a8>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	611a      	str	r2, [r3, #16]
    data_raw.Acc_z = Acc_z;
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <_Z11process_MPUb+0x3ac>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	615a      	str	r2, [r3, #20]
    return data_raw;
 8001956:	bf00      	nop
}
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	3724      	adds	r7, #36	; 0x24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	66666666 	.word	0x66666666
 8001964:	40306666 	.word	0x40306666
 8001968:	2000061c 	.word	0x2000061c
 800196c:	20000620 	.word	0x20000620
 8001970:	20000624 	.word	0x20000624
 8001974:	20000610 	.word	0x20000610
 8001978:	20000614 	.word	0x20000614
 800197c:	20000618 	.word	0x20000618

08001980 <_Z20complementary_filter8IMU_dataff>:
	    temp.Mag_x = magnet_calib[0];
	    temp.Mag_y = magnet_calib[1];
	    temp.Mag_z = magnet_calib[2];
	    return temp;
}
EULER_angle complementary_filter(IMU_data data, float dt, float alpha){
 8001980:	b084      	sub	sp, #16
 8001982:	b590      	push	{r4, r7, lr}
 8001984:	ed2d 8b02 	vpush	{d8}
 8001988:	b08f      	sub	sp, #60	; 0x3c
 800198a:	af00      	add	r7, sp, #0
 800198c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001990:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001994:	ed87 0a05 	vstr	s0, [r7, #20]
 8001998:	edc7 0a04 	vstr	s1, [r7, #16]
	EULER_angle temp;
	float pitch_acc, roll_acc;
	if(data.Acc_x != 0 && data.Acc_y != 0 && data.Acc_z !=0){
 800199c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80019a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a8:	f000 80b5 	beq.w	8001b16 <_Z20complementary_filter8IMU_dataff+0x196>
 80019ac:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	f000 80ad 	beq.w	8001b16 <_Z20complementary_filter8IMU_dataff+0x196>
 80019bc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80019c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	f000 80a5 	beq.w	8001b16 <_Z20complementary_filter8IMU_dataff+0x196>
    roll_acc = atan2(data.Acc_y,data.Acc_z)*RAD2DEC;
 80019cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80019d0:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80019d4:	eef0 0a47 	vmov.f32	s1, s14
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	f7ff fb60 	bl	80010a0 <_ZSt5atan2ff>
 80019e0:	ee10 3a10 	vmov	r3, s0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe fd53 	bl	8000490 <__aeabi_f2d>
 80019ea:	a35d      	add	r3, pc, #372	; (adr r3, 8001b60 <_Z20complementary_filter8IMU_dataff+0x1e0>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	f7fe fda6 	bl	8000540 <__aeabi_dmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	460c      	mov	r4, r1
 80019f8:	4618      	mov	r0, r3
 80019fa:	4621      	mov	r1, r4
 80019fc:	f7ff f850 	bl	8000aa0 <__aeabi_d2f>
 8001a00:	4603      	mov	r3, r0
 8001a02:	637b      	str	r3, [r7, #52]	; 0x34
    if(roll_acc<0){
 8001a04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d508      	bpl.n	8001a24 <_Z20complementary_filter8IMU_dataff+0xa4>
    	roll_acc+=180;
 8001a12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a16:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001b68 <_Z20complementary_filter8IMU_dataff+0x1e8>
 8001a1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a1e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 8001a22:	e00e      	b.n	8001a42 <_Z20complementary_filter8IMU_dataff+0xc2>
    }
    else{
    	if(roll_acc!=0){
 8001a24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	d007      	beq.n	8001a42 <_Z20complementary_filter8IMU_dataff+0xc2>
    		roll_acc-=180;
 8001a32:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a36:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001b68 <_Z20complementary_filter8IMU_dataff+0x1e8>
 8001a3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a3e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    	}
    }
    pitch_acc = atan(data.Acc_x/sqrt(data.Acc_y*data.Acc_y + data.Acc_z*data.Acc_z))*RAD2DEC;
 8001a42:	ed97 8a17 	vldr	s16, [r7, #92]	; 0x5c
 8001a46:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001a4a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a52:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 8001a56:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	eeb0 0a67 	vmov.f32	s0, s15
 8001a66:	f7ff fb2f 	bl	80010c8 <_ZSt4sqrtf>
 8001a6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001a72:	eeb0 0a67 	vmov.f32	s0, s15
 8001a76:	f7ff fb03 	bl	8001080 <_ZSt4atanf>
 8001a7a:	ee10 3a10 	vmov	r3, s0
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd06 	bl	8000490 <__aeabi_f2d>
 8001a84:	a336      	add	r3, pc, #216	; (adr r3, 8001b60 <_Z20complementary_filter8IMU_dataff+0x1e0>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fd59 	bl	8000540 <__aeabi_dmul>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460c      	mov	r4, r1
 8001a92:	4618      	mov	r0, r3
 8001a94:	4621      	mov	r1, r4
 8001a96:	f7ff f803 	bl	8000aa0 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30

	com_angle_r = alpha*(com_angle_r + dt*data.Gyro_x) + (1-alpha)*roll_acc;
 8001a9e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001aa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <_Z20complementary_filter8IMU_dataff+0x1ec>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001abc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ac0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ac8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <_Z20complementary_filter8IMU_dataff+0x1ec>)
 8001ad6:	edc3 7a00 	vstr	s15, [r3]
	com_angle_p = alpha*(com_angle_p + dt*data.Gyro_y) + (1-alpha)*pitch_acc;
 8001ada:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ade:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <_Z20complementary_filter8IMU_dataff+0x1f0>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001afc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b04:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <_Z20complementary_filter8IMU_dataff+0x1f0>)
 8001b12:	edc3 7a00 	vstr	s15, [r3]
	}
    temp.pitch = com_angle_p;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <_Z20complementary_filter8IMU_dataff+0x1f0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61fb      	str	r3, [r7, #28]
    temp.roll = com_angle_r;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_Z20complementary_filter8IMU_dataff+0x1ec>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]

    return temp;
 8001b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b26:	f107 0218 	add.w	r2, r7, #24
 8001b2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b36:	ee06 1a90 	vmov	s13, r1
 8001b3a:	ee07 2a10 	vmov	s14, r2
 8001b3e:	ee07 3a90 	vmov	s15, r3
}
 8001b42:	eeb0 0a66 	vmov.f32	s0, s13
 8001b46:	eef0 0a47 	vmov.f32	s1, s14
 8001b4a:	eeb0 1a67 	vmov.f32	s2, s15
 8001b4e:	373c      	adds	r7, #60	; 0x3c
 8001b50:	46bd      	mov	sp, r7
 8001b52:	ecbd 8b02 	vpop	{d8}
 8001b56:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001b5a:	b004      	add	sp, #16
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	1a5d2372 	.word	0x1a5d2372
 8001b64:	404ca5dc 	.word	0x404ca5dc
 8001b68:	43340000 	.word	0x43340000
 8001b6c:	20000628 	.word	0x20000628
 8001b70:	2000062c 	.word	0x2000062c
 8001b74:	00000000 	.word	0x00000000

08001b78 <_Z15calibration_IMUv>:
		angle_e.roll = r*RAD2DEC;
		angle_e.pitch = p*RAD2DEC;
		angle_e.yaw = y*RAD2DEC;
		return angle_e;
}
void calibration_IMU(){
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af02      	add	r7, sp, #8
    /*This function is performed when the sensor is fully stationary, we assume that MPU has been inited*/
//	    print_msg("Calibrating the sensor....\n");
		uint8_t data[13];
		uint8_t reg = ACCEL_XOUT_H;
 8001b7e:	233b      	movs	r3, #59	; 0x3b
 8001b80:	70fb      	strb	r3, [r7, #3]
		uint8_t device_address = MPU_ADDRESS;
 8001b82:	23d0      	movs	r3, #208	; 0xd0
 8001b84:	74fb      	strb	r3, [r7, #19]

        for(int i = 0; i<200; i++){
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2bc7      	cmp	r3, #199	; 0xc7
 8001b8e:	f300 8163 	bgt.w	8001e58 <_Z15calibration_IMUv+0x2e0>

		while(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)device_address, &reg, 1, 1000) != HAL_OK);
 8001b92:	7cfb      	ldrb	r3, [r7, #19]
 8001b94:	b299      	uxth	r1, r3
 8001b96:	1cfa      	adds	r2, r7, #3
 8001b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	489d      	ldr	r0, [pc, #628]	; (8001e18 <_Z15calibration_IMUv+0x2a0>)
 8001ba2:	f001 fbe7 	bl	8003374 <HAL_I2C_Master_Transmit>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d000      	beq.n	8001bb8 <_Z15calibration_IMUv+0x40>
 8001bb6:	e7ec      	b.n	8001b92 <_Z15calibration_IMUv+0x1a>
		while(HAL_I2C_Master_Receive(&hi2c1,(uint16_t)device_address, data,14, 1000) != HAL_OK);
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	b299      	uxth	r1, r3
 8001bbc:	1d3a      	adds	r2, r7, #4
 8001bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	230e      	movs	r3, #14
 8001bc6:	4894      	ldr	r0, [pc, #592]	; (8001e18 <_Z15calibration_IMUv+0x2a0>)
 8001bc8:	f001 fcd2 	bl	8003570 <HAL_I2C_Master_Receive>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d000      	beq.n	8001bde <_Z15calibration_IMUv+0x66>
 8001bdc:	e7ec      	b.n	8001bb8 <_Z15calibration_IMUv+0x40>

		Acc_x = (int16_t)(data[0] << 8 | data[1])/accel_factor;
 8001bde:	793b      	ldrb	r3, [r7, #4]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	797b      	ldrb	r3, [r7, #5]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fc3d 	bl	800046c <__aeabi_i2d>
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4b89      	ldr	r3, [pc, #548]	; (8001e1c <_Z15calibration_IMUv+0x2a4>)
 8001bf8:	f7fe fdcc 	bl	8000794 <__aeabi_ddiv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	460c      	mov	r4, r1
 8001c00:	4618      	mov	r0, r3
 8001c02:	4621      	mov	r1, r4
 8001c04:	f7fe ff4c 	bl	8000aa0 <__aeabi_d2f>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	4b85      	ldr	r3, [pc, #532]	; (8001e20 <_Z15calibration_IMUv+0x2a8>)
 8001c0c:	601a      	str	r2, [r3, #0]
		Acc_y = (int16_t)(data[2] << 8 | data[3])/accel_factor;
 8001c0e:	79bb      	ldrb	r3, [r7, #6]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7fe fc25 	bl	800046c <__aeabi_i2d>
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b7d      	ldr	r3, [pc, #500]	; (8001e1c <_Z15calibration_IMUv+0x2a4>)
 8001c28:	f7fe fdb4 	bl	8000794 <__aeabi_ddiv>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	460c      	mov	r4, r1
 8001c30:	4618      	mov	r0, r3
 8001c32:	4621      	mov	r1, r4
 8001c34:	f7fe ff34 	bl	8000aa0 <__aeabi_d2f>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b7a      	ldr	r3, [pc, #488]	; (8001e24 <_Z15calibration_IMUv+0x2ac>)
 8001c3c:	601a      	str	r2, [r3, #0]
		Acc_z = (int16_t)(data[4] << 8 | data[5])/accel_factor;
 8001c3e:	7a3b      	ldrb	r3, [r7, #8]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	7a7b      	ldrb	r3, [r7, #9]
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fc0d 	bl	800046c <__aeabi_i2d>
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	4b71      	ldr	r3, [pc, #452]	; (8001e1c <_Z15calibration_IMUv+0x2a4>)
 8001c58:	f7fe fd9c 	bl	8000794 <__aeabi_ddiv>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	460c      	mov	r4, r1
 8001c60:	4618      	mov	r0, r3
 8001c62:	4621      	mov	r1, r4
 8001c64:	f7fe ff1c 	bl	8000aa0 <__aeabi_d2f>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <_Z15calibration_IMUv+0x2b0>)
 8001c6c:	601a      	str	r2, [r3, #0]

	    temp = (int16_t)(data[6] << 8 | data[7]);
 8001c6e:	7abb      	ldrb	r3, [r7, #10]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	b21a      	sxth	r2, r3
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	b21b      	sxth	r3, r3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	b21b      	sxth	r3, r3
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	4b69      	ldr	r3, [pc, #420]	; (8001e2c <_Z15calibration_IMUv+0x2b4>)
 8001c86:	edc3 7a00 	vstr	s15, [r3]

	    Gyro_x = (int16_t)(data[8] << 8 | data[9])/gyro_factor;
 8001c8a:	7b3b      	ldrb	r3, [r7, #12]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	7b7b      	ldrb	r3, [r7, #13]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fbe7 	bl	800046c <__aeabi_i2d>
 8001c9e:	a35c      	add	r3, pc, #368	; (adr r3, 8001e10 <_Z15calibration_IMUv+0x298>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fd76 	bl	8000794 <__aeabi_ddiv>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	460c      	mov	r4, r1
 8001cac:	4618      	mov	r0, r3
 8001cae:	4621      	mov	r1, r4
 8001cb0:	f7fe fef6 	bl	8000aa0 <__aeabi_d2f>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b5e      	ldr	r3, [pc, #376]	; (8001e30 <_Z15calibration_IMUv+0x2b8>)
 8001cb8:	601a      	str	r2, [r3, #0]
	    Gyro_y = (int16_t)(data[10] << 8 | data[11])/gyro_factor;
 8001cba:	7bbb      	ldrb	r3, [r7, #14]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b21a      	sxth	r2, r3
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fbcf 	bl	800046c <__aeabi_i2d>
 8001cce:	a350      	add	r3, pc, #320	; (adr r3, 8001e10 <_Z15calibration_IMUv+0x298>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fd5e 	bl	8000794 <__aeabi_ddiv>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	460c      	mov	r4, r1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	4621      	mov	r1, r4
 8001ce0:	f7fe fede 	bl	8000aa0 <__aeabi_d2f>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <_Z15calibration_IMUv+0x2bc>)
 8001ce8:	601a      	str	r2, [r3, #0]
	    Gyro_z = (int16_t)(data[12] << 8 | data[13])/gyro_factor;
 8001cea:	7c3b      	ldrb	r3, [r7, #16]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	b21a      	sxth	r2, r3
 8001cf0:	7c7b      	ldrb	r3, [r7, #17]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b21b      	sxth	r3, r3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fbb7 	bl	800046c <__aeabi_i2d>
 8001cfe:	a344      	add	r3, pc, #272	; (adr r3, 8001e10 <_Z15calibration_IMUv+0x298>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fd46 	bl	8000794 <__aeabi_ddiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4621      	mov	r1, r4
 8001d10:	f7fe fec6 	bl	8000aa0 <__aeabi_d2f>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b48      	ldr	r3, [pc, #288]	; (8001e38 <_Z15calibration_IMUv+0x2c0>)
 8001d18:	601a      	str	r2, [r3, #0]

	    bAx += Acc_x;
 8001d1a:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <_Z15calibration_IMUv+0x2a8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fbb6 	bl	8000490 <__aeabi_f2d>
 8001d24:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <_Z15calibration_IMUv+0x2c4>)
 8001d26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	f7fe fa51 	bl	80001d4 <__adddf3>
 8001d32:	4603      	mov	r3, r0
 8001d34:	460c      	mov	r4, r1
 8001d36:	4a41      	ldr	r2, [pc, #260]	; (8001e3c <_Z15calibration_IMUv+0x2c4>)
 8001d38:	e9c2 3400 	strd	r3, r4, [r2]
	    bAy += Acc_y;
 8001d3c:	4b39      	ldr	r3, [pc, #228]	; (8001e24 <_Z15calibration_IMUv+0x2ac>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fba5 	bl	8000490 <__aeabi_f2d>
 8001d46:	4b3e      	ldr	r3, [pc, #248]	; (8001e40 <_Z15calibration_IMUv+0x2c8>)
 8001d48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	f7fe fa40 	bl	80001d4 <__adddf3>
 8001d54:	4603      	mov	r3, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	4a39      	ldr	r2, [pc, #228]	; (8001e40 <_Z15calibration_IMUv+0x2c8>)
 8001d5a:	e9c2 3400 	strd	r3, r4, [r2]
	    bAz += Acc_z;
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <_Z15calibration_IMUv+0x2b0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fb94 	bl	8000490 <__aeabi_f2d>
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <_Z15calibration_IMUv+0x2cc>)
 8001d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4623      	mov	r3, r4
 8001d72:	f7fe fa2f 	bl	80001d4 <__adddf3>
 8001d76:	4603      	mov	r3, r0
 8001d78:	460c      	mov	r4, r1
 8001d7a:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <_Z15calibration_IMUv+0x2cc>)
 8001d7c:	e9c2 3400 	strd	r3, r4, [r2]

	    bGx += Gyro_x;
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <_Z15calibration_IMUv+0x2b8>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fb83 	bl	8000490 <__aeabi_f2d>
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <_Z15calibration_IMUv+0x2d0>)
 8001d8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	f7fe fa1e 	bl	80001d4 <__adddf3>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	4a2a      	ldr	r2, [pc, #168]	; (8001e48 <_Z15calibration_IMUv+0x2d0>)
 8001d9e:	e9c2 3400 	strd	r3, r4, [r2]
	    bGy += Gyro_y;
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <_Z15calibration_IMUv+0x2bc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fb72 	bl	8000490 <__aeabi_f2d>
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <_Z15calibration_IMUv+0x2d4>)
 8001dae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4623      	mov	r3, r4
 8001db6:	f7fe fa0d 	bl	80001d4 <__adddf3>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	460c      	mov	r4, r1
 8001dbe:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <_Z15calibration_IMUv+0x2d4>)
 8001dc0:	e9c2 3400 	strd	r3, r4, [r2]
	    bGz += Gyro_z;
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <_Z15calibration_IMUv+0x2c0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fb61 	bl	8000490 <__aeabi_f2d>
 8001dce:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <_Z15calibration_IMUv+0x2d8>)
 8001dd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	f7fe f9fc 	bl	80001d4 <__adddf3>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	460c      	mov	r4, r1
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <_Z15calibration_IMUv+0x2d8>)
 8001de2:	e9c2 3400 	strd	r3, r4, [r2]
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dea:	481a      	ldr	r0, [pc, #104]	; (8001e54 <_Z15calibration_IMUv+0x2dc>)
 8001dec:	f001 f96f 	bl	80030ce <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df4:	4817      	ldr	r0, [pc, #92]	; (8001e54 <_Z15calibration_IMUv+0x2dc>)
 8001df6:	f001 f96a 	bl	80030ce <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8001dfa:	2104      	movs	r1, #4
 8001dfc:	4815      	ldr	r0, [pc, #84]	; (8001e54 <_Z15calibration_IMUv+0x2dc>)
 8001dfe:	f001 f966 	bl	80030ce <HAL_GPIO_TogglePin>
	    HAL_Delay(30);
 8001e02:	201e      	movs	r0, #30
 8001e04:	f000 fe7c 	bl	8002b00 <HAL_Delay>
        for(int i = 0; i<200; i++){
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e6bc      	b.n	8001b8a <_Z15calibration_IMUv+0x12>
 8001e10:	66666666 	.word	0x66666666
 8001e14:	40306666 	.word	0x40306666
 8001e18:	200004f4 	.word	0x200004f4
 8001e1c:	40d00000 	.word	0x40d00000
 8001e20:	20000610 	.word	0x20000610
 8001e24:	20000614 	.word	0x20000614
 8001e28:	20000618 	.word	0x20000618
 8001e2c:	200005c8 	.word	0x200005c8
 8001e30:	2000061c 	.word	0x2000061c
 8001e34:	20000620 	.word	0x20000620
 8001e38:	20000624 	.word	0x20000624
 8001e3c:	200005d8 	.word	0x200005d8
 8001e40:	200005e0 	.word	0x200005e0
 8001e44:	200005e8 	.word	0x200005e8
 8001e48:	200005f0 	.word	0x200005f0
 8001e4c:	200005f8 	.word	0x200005f8
 8001e50:	20000600 	.word	0x20000600
 8001e54:	40020400 	.word	0x40020400
        }

     bAx /= 200;
 8001e58:	4b5c      	ldr	r3, [pc, #368]	; (8001fcc <_Z15calibration_IMUv+0x454>)
 8001e5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b5b      	ldr	r3, [pc, #364]	; (8001fd0 <_Z15calibration_IMUv+0x458>)
 8001e64:	f7fe fc96 	bl	8000794 <__aeabi_ddiv>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	460c      	mov	r4, r1
 8001e6c:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <_Z15calibration_IMUv+0x454>)
 8001e6e:	e9c2 3400 	strd	r3, r4, [r2]
     bAy /= 200;
 8001e72:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <_Z15calibration_IMUv+0x45c>)
 8001e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <_Z15calibration_IMUv+0x458>)
 8001e7e:	f7fe fc89 	bl	8000794 <__aeabi_ddiv>
 8001e82:	4603      	mov	r3, r0
 8001e84:	460c      	mov	r4, r1
 8001e86:	4a53      	ldr	r2, [pc, #332]	; (8001fd4 <_Z15calibration_IMUv+0x45c>)
 8001e88:	e9c2 3400 	strd	r3, r4, [r2]
     bAz /= 200;
 8001e8c:	4b52      	ldr	r3, [pc, #328]	; (8001fd8 <_Z15calibration_IMUv+0x460>)
 8001e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	4b4e      	ldr	r3, [pc, #312]	; (8001fd0 <_Z15calibration_IMUv+0x458>)
 8001e98:	f7fe fc7c 	bl	8000794 <__aeabi_ddiv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4a4d      	ldr	r2, [pc, #308]	; (8001fd8 <_Z15calibration_IMUv+0x460>)
 8001ea2:	e9c2 3400 	strd	r3, r4, [r2]
     g = sqrt(bAx*bAx + bAy*bAy + bAz*bAz);
 8001ea6:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <_Z15calibration_IMUv+0x454>)
 8001ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eac:	4b47      	ldr	r3, [pc, #284]	; (8001fcc <_Z15calibration_IMUv+0x454>)
 8001eae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	f7fe fb43 	bl	8000540 <__aeabi_dmul>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	4626      	mov	r6, r4
 8001ec2:	4b44      	ldr	r3, [pc, #272]	; (8001fd4 <_Z15calibration_IMUv+0x45c>)
 8001ec4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <_Z15calibration_IMUv+0x45c>)
 8001eca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	f7fe fb35 	bl	8000540 <__aeabi_dmul>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	460c      	mov	r4, r1
 8001eda:	461a      	mov	r2, r3
 8001edc:	4623      	mov	r3, r4
 8001ede:	4628      	mov	r0, r5
 8001ee0:	4631      	mov	r1, r6
 8001ee2:	f7fe f977 	bl	80001d4 <__adddf3>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460c      	mov	r4, r1
 8001eea:	461d      	mov	r5, r3
 8001eec:	4626      	mov	r6, r4
 8001eee:	4b3a      	ldr	r3, [pc, #232]	; (8001fd8 <_Z15calibration_IMUv+0x460>)
 8001ef0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef4:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <_Z15calibration_IMUv+0x460>)
 8001ef6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4623      	mov	r3, r4
 8001efe:	f7fe fb1f 	bl	8000540 <__aeabi_dmul>
 8001f02:	4603      	mov	r3, r0
 8001f04:	460c      	mov	r4, r1
 8001f06:	461a      	mov	r2, r3
 8001f08:	4623      	mov	r3, r4
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	4631      	mov	r1, r6
 8001f0e:	f7fe f961 	bl	80001d4 <__adddf3>
 8001f12:	4603      	mov	r3, r0
 8001f14:	460c      	mov	r4, r1
 8001f16:	ec44 3b17 	vmov	d7, r3, r4
 8001f1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f1e:	eef0 0a67 	vmov.f32	s1, s15
 8001f22:	f003 fe8b 	bl	8005c3c <sqrt>
 8001f26:	eeb0 7a40 	vmov.f32	s14, s0
 8001f2a:	eef0 7a60 	vmov.f32	s15, s1
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <_Z15calibration_IMUv+0x464>)
 8001f30:	ed83 7b00 	vstr	d7, [r3]
     bAz = -1 - bAz;
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <_Z15calibration_IMUv+0x460>)
 8001f36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4623      	mov	r3, r4
 8001f3e:	f04f 0000 	mov.w	r0, #0
 8001f42:	4927      	ldr	r1, [pc, #156]	; (8001fe0 <_Z15calibration_IMUv+0x468>)
 8001f44:	f7fe f944 	bl	80001d0 <__aeabi_dsub>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <_Z15calibration_IMUv+0x460>)
 8001f4e:	e9c2 3400 	strd	r3, r4, [r2]
     bGx /= 200;
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <_Z15calibration_IMUv+0x46c>)
 8001f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <_Z15calibration_IMUv+0x458>)
 8001f5e:	f7fe fc19 	bl	8000794 <__aeabi_ddiv>
 8001f62:	4603      	mov	r3, r0
 8001f64:	460c      	mov	r4, r1
 8001f66:	4a1f      	ldr	r2, [pc, #124]	; (8001fe4 <_Z15calibration_IMUv+0x46c>)
 8001f68:	e9c2 3400 	strd	r3, r4, [r2]
     bGy /= 200;
 8001f6c:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <_Z15calibration_IMUv+0x470>)
 8001f6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <_Z15calibration_IMUv+0x458>)
 8001f78:	f7fe fc0c 	bl	8000794 <__aeabi_ddiv>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	460c      	mov	r4, r1
 8001f80:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <_Z15calibration_IMUv+0x470>)
 8001f82:	e9c2 3400 	strd	r3, r4, [r2]
     bGz /= 200;
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <_Z15calibration_IMUv+0x474>)
 8001f88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <_Z15calibration_IMUv+0x458>)
 8001f92:	f7fe fbff 	bl	8000794 <__aeabi_ddiv>
 8001f96:	4603      	mov	r3, r0
 8001f98:	460c      	mov	r4, r1
 8001f9a:	4a14      	ldr	r2, [pc, #80]	; (8001fec <_Z15calibration_IMUv+0x474>)
 8001f9c:	e9c2 3400 	strd	r3, r4, [r2]

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa6:	4812      	ldr	r0, [pc, #72]	; (8001ff0 <_Z15calibration_IMUv+0x478>)
 8001fa8:	f001 f878 	bl	800309c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fb2:	480f      	ldr	r0, [pc, #60]	; (8001ff0 <_Z15calibration_IMUv+0x478>)
 8001fb4:	f001 f872 	bl	800309c <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2104      	movs	r1, #4
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <_Z15calibration_IMUv+0x478>)
 8001fbe:	f001 f86d 	bl	800309c <HAL_GPIO_WritePin>
}
 8001fc2:	bf00      	nop
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	200005d8 	.word	0x200005d8
 8001fd0:	40690000 	.word	0x40690000
 8001fd4:	200005e0 	.word	0x200005e0
 8001fd8:	200005e8 	.word	0x200005e8
 8001fdc:	20000608 	.word	0x20000608
 8001fe0:	bff00000 	.word	0xbff00000
 8001fe4:	200005f0 	.word	0x200005f0
 8001fe8:	200005f8 	.word	0x200005f8
 8001fec:	20000600 	.word	0x20000600
 8001ff0:	40020400 	.word	0x40020400

08001ff4 <_ZN6Matrix9get_valueEPd>:
	int col;
	double data[49];
	bool inv = true;
	Matrix(int row, int col);
	virtual ~Matrix();
    int get_value(double* data){
 8001ff4:	b490      	push	{r4, r7}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
    	for (int i = 0; i < row; i++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	429a      	cmp	r2, r3
 800200a:	da27      	bge.n	800205c <_ZN6Matrix9get_valueEPd+0x68>
    	    for (int j = 0; j < col; j++)
 800200c:	2300      	movs	r3, #0
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	da1c      	bge.n	8002054 <_ZN6Matrix9get_valueEPd+0x60>
    	    	this->data[i*col + j] = data[i*col + j];
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	fb02 f203 	mul.w	r2, r2, r3
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	4413      	add	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4413      	add	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6892      	ldr	r2, [r2, #8]
 8002032:	68f9      	ldr	r1, [r7, #12]
 8002034:	fb01 f102 	mul.w	r1, r1, r2
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	440a      	add	r2, r1
 800203c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	3202      	adds	r2, #2
 8002044:	00d2      	lsls	r2, r2, #3
 8002046:	440a      	add	r2, r1
 8002048:	e9c2 3400 	strd	r3, r4, [r2]
    	    for (int j = 0; j < col; j++)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	3301      	adds	r3, #1
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	e7dd      	b.n	8002010 <_ZN6Matrix9get_valueEPd+0x1c>
    	for (int i = 0; i < row; i++)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3301      	adds	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e7d2      	b.n	8002002 <_ZN6Matrix9get_valueEPd+0xe>
    	return 0;
 800205c:	2300      	movs	r3, #0
    }
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bc90      	pop	{r4, r7}
 8002066:	4770      	bx	lr

08002068 <_ZN6MatrixC1Eii>:
    	return 0;
    }
    double det();
};

Matrix::Matrix(int row, int col){
 8002068:	b490      	push	{r4, r7}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	4a1b      	ldr	r2, [pc, #108]	; (80020e4 <_ZN6MatrixC1Eii+0x7c>)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2198 	strb.w	r2, [r3, #408]	; 0x198
	    this->row = row;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	605a      	str	r2, [r3, #4]
	    this->col = col;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	609a      	str	r2, [r3, #8]


	    for (int i = 0; i < row; i++)
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	429a      	cmp	r2, r3
 8002098:	da1d      	bge.n	80020d6 <_ZN6MatrixC1Eii+0x6e>
	    	   for (int j = 0; j < col; j++){
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	da13      	bge.n	80020ce <_ZN6MatrixC1Eii+0x66>
	    		   this->data[i*col + j] = 0;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	fb02 f203 	mul.w	r2, r2, r3
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	3302      	adds	r3, #2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	441a      	add	r2, r3
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	f04f 0400 	mov.w	r4, #0
 80020c2:	e9c2 3400 	strd	r3, r4, [r2]
	    	   for (int j = 0; j < col; j++){
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	3301      	adds	r3, #1
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e7e7      	b.n	800209e <_ZN6MatrixC1Eii+0x36>
	    for (int i = 0; i < row; i++)
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	3301      	adds	r3, #1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e7dd      	b.n	8002092 <_ZN6MatrixC1Eii+0x2a>
	    	   }
//	    			  this->data[i*col + j] = 0;
	}
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc90      	pop	{r4, r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	080061b0 	.word	0x080061b0

080020e8 <_ZN6MatrixD1Ev>:

Matrix::~Matrix() {
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <_ZN6MatrixD1Ev+0x1c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub

}
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	080061b0 	.word	0x080061b0

08002108 <_ZN6MatrixD0Ev>:
Matrix::~Matrix() {
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
}
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ffe9 	bl	80020e8 <_ZN6MatrixD1Ev>
 8002116:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f003 fcae 	bl	8005a7c <_ZdlPvj>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <_Z8diag_matii>:

Matrix diag_mat(int row, int col) {
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]

	// TODO Auto-generated constructor stub
	Matrix m = Matrix(row,col);
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff ff93 	bl	8002068 <_ZN6MatrixC1Eii>
	for (int i = 0; i < row; i++)
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	429a      	cmp	r2, r3
 800214c:	da20      	bge.n	8002190 <_Z8diag_matii+0x64>
		for (int j = 0; j < col; j++)
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	429a      	cmp	r2, r3
 8002158:	da16      	bge.n	8002188 <_Z8diag_matii+0x5c>
           if(i==j)
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	429a      	cmp	r2, r3
 8002160:	d10e      	bne.n	8002180 <_Z8diag_matii+0x54>
			 m.data[i*col + j] = 1;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	fb02 f203 	mul.w	r2, r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	3302      	adds	r3, #2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	441a      	add	r2, r3
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	4c08      	ldr	r4, [pc, #32]	; (800219c <_Z8diag_matii+0x70>)
 800217c:	e9c2 3400 	strd	r3, r4, [r2]
		for (int j = 0; j < col; j++)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3301      	adds	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	e7e4      	b.n	8002152 <_Z8diag_matii+0x26>
	for (int i = 0; i < row; i++)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	3301      	adds	r3, #1
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e7da      	b.n	8002146 <_Z8diag_matii+0x1a>
   return m;
 8002190:	bf00      	nop
}
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	bd90      	pop	{r4, r7, pc}
 800219a:	bf00      	nop
 800219c:	3ff00000 	.word	0x3ff00000

080021a0 <_ZN3EKF7loadEKFEPdS0_S0_S0_>:
	Matrix S = Matrix(3,3);
	Matrix R = Matrix(3,3);
	Matrix I = diag_mat(7, 7);
	Matrix w = Matrix(3,1);
public:
	void loadEKF(double* x_, double *P_, double* Q_, double*R_){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
	      this->x.get_value(x_);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3308      	adds	r3, #8
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff1d 	bl	8001ff4 <_ZN6Matrix9get_valueEPd>
	      this->P.get_value(P_);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff16 	bl	8001ff4 <_ZN6Matrix9get_valueEPd>
	      this->Q.get_value(Q_);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f603 0328 	addw	r3, r3, #2088	; 0x828
 80021ce:	6839      	ldr	r1, [r7, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff0f 	bl	8001ff4 <_ZN6Matrix9get_valueEPd>
	      this->R.get_value(R_);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 80021dc:	69b9      	ldr	r1, [r7, #24]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff08 	bl	8001ff4 <_ZN6Matrix9get_valueEPd>
	}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <_ZN3EKFC1Ev>:
			angle_e.yaw = y*RAD2DEC;
			return angle_e;
	}
	virtual ~EKF();
};
EKF::EKF(){
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <_ZN3EKFC1Ev+0xdc>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3308      	adds	r3, #8
 80021fe:	2201      	movs	r2, #1
 8002200:	2107      	movs	r1, #7
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff ff30 	bl	8002068 <_ZN6MatrixC1Eii>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800220e:	2201      	movs	r2, #1
 8002210:	2103      	movs	r1, #3
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff28 	bl	8002068 <_ZN6MatrixC1Eii>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800221e:	2207      	movs	r2, #7
 8002220:	2107      	movs	r1, #7
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff20 	bl	8002068 <_ZN6MatrixC1Eii>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 800222e:	2203      	movs	r2, #3
 8002230:	2107      	movs	r1, #7
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff18 	bl	8002068 <_ZN6MatrixC1Eii>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 800223e:	2207      	movs	r2, #7
 8002240:	2107      	movs	r1, #7
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff10 	bl	8002068 <_ZN6MatrixC1Eii>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f603 0328 	addw	r3, r3, #2088	; 0x828
 800224e:	2207      	movs	r2, #7
 8002250:	2107      	movs	r1, #7
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff ff08 	bl	8002068 <_ZN6MatrixC1Eii>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 800225e:	2207      	movs	r2, #7
 8002260:	2103      	movs	r1, #3
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff00 	bl	8002068 <_ZN6MatrixC1Eii>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 800226e:	2203      	movs	r2, #3
 8002270:	2107      	movs	r1, #7
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fef8 	bl	8002068 <_ZN6MatrixC1Eii>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 800227e:	2203      	movs	r2, #3
 8002280:	2103      	movs	r1, #3
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fef0 	bl	8002068 <_ZN6MatrixC1Eii>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 800228e:	2203      	movs	r2, #3
 8002290:	2103      	movs	r1, #3
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fee8 	bl	8002068 <_ZN6MatrixC1Eii>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 800229e:	3308      	adds	r3, #8
 80022a0:	2207      	movs	r2, #7
 80022a2:	2107      	movs	r1, #7
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff41 	bl	800212c <_Z8diag_matii>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 80022b0:	3308      	adds	r3, #8
 80022b2:	2201      	movs	r2, #1
 80022b4:	2103      	movs	r1, #3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff fed6 	bl	8002068 <_ZN6MatrixC1Eii>

}
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	080061a0 	.word	0x080061a0

080022cc <_ZN3EKFD1Ev>:
EKF::~EKF() {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	4a28      	ldr	r2, [pc, #160]	; (8002378 <_ZN3EKFD1Ev+0xac>)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 80022e0:	3308      	adds	r3, #8
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff00 	bl	80020e8 <_ZN6MatrixD1Ev>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80022ee:	3308      	adds	r3, #8
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fef9 	bl	80020e8 <_ZN6MatrixD1Ev>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f603 63a8 	addw	r3, r3, #3752	; 0xea8
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fef3 	bl	80020e8 <_ZN6MatrixD1Ev>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f603 5308 	addw	r3, r3, #3336	; 0xd08
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff feed 	bl	80020e8 <_ZN6MatrixD1Ev>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f603 3368 	addw	r3, r3, #2920	; 0xb68
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff fee7 	bl	80020e8 <_ZN6MatrixD1Ev>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f603 13c8 	addw	r3, r3, #2504	; 0x9c8
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fee1 	bl	80020e8 <_ZN6MatrixD1Ev>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f603 0328 	addw	r3, r3, #2088	; 0x828
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fedb 	bl	80020e8 <_ZN6MatrixD1Ev>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fed5 	bl	80020e8 <_ZN6MatrixD1Ev>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fecf 	bl	80020e8 <_ZN6MatrixD1Ev>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fec9 	bl	80020e8 <_ZN6MatrixD1Ev>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fec3 	bl	80020e8 <_ZN6MatrixD1Ev>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3308      	adds	r3, #8
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff febe 	bl	80020e8 <_ZN6MatrixD1Ev>
	// TODO Auto-generated destructor stub
	 // free(this->data);
}
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	080061a0 	.word	0x080061a0

0800237c <_ZN3EKFD0Ev>:
EKF::~EKF() {
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
}
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ffa1 	bl	80022cc <_ZN3EKFD1Ev>
 800238a:	f241 3188 	movw	r1, #5000	; 0x1388
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f003 fb74 	bl	8005a7c <_ZdlPvj>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	b08c      	sub	sp, #48	; 0x30
 80023a4:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a6:	f000 fb39 	bl	8002a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023aa:	f000 f897 	bl	80024dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ae:	f7fe fddd 	bl	8000f6c <MX_GPIO_Init>
  MX_I2C1_Init();
 80023b2:	f7fe fd45 	bl	8000e40 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80023b6:	f7fe fdb3 	bl	8000f20 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80023ba:	f000 f903 	bl	80025c4 <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80023be:	f7fe fd6b 	bl	8000e98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

    init_MPU();
 80023c2:	f7fe fe91 	bl	80010e8 <_Z8init_MPUv>
    calibration_IMU();
 80023c6:	f7ff fbd7 	bl	8001b78 <_Z15calibration_IMUv>

    x[4] = bGx*DEC2RAD;
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <main+0x108>)
 80023cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d0:	a333      	add	r3, pc, #204	; (adr r3, 80024a0 <main+0x100>)
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	f7fe f8b3 	bl	8000540 <__aeabi_dmul>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	4a33      	ldr	r2, [pc, #204]	; (80024ac <main+0x10c>)
 80023e0:	e9c2 3408 	strd	r3, r4, [r2, #32]
    x[5] = bGy*DEC2RAD;
 80023e4:	4b32      	ldr	r3, [pc, #200]	; (80024b0 <main+0x110>)
 80023e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ea:	a32d      	add	r3, pc, #180	; (adr r3, 80024a0 <main+0x100>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f8a6 	bl	8000540 <__aeabi_dmul>
 80023f4:	4603      	mov	r3, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <main+0x10c>)
 80023fa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    x[6] = bGz*DEC2RAD;
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <main+0x114>)
 8002400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002404:	a326      	add	r3, pc, #152	; (adr r3, 80024a0 <main+0x100>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f7fe f899 	bl	8000540 <__aeabi_dmul>
 800240e:	4603      	mov	r3, r0
 8002410:	460c      	mov	r4, r1
 8002412:	4a26      	ldr	r2, [pc, #152]	; (80024ac <main+0x10c>)
 8002414:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    ekf.loadEKF(x,P,Q, R_full);
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <main+0x118>)
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <main+0x11c>)
 800241e:	4a28      	ldr	r2, [pc, #160]	; (80024c0 <main+0x120>)
 8002420:	4922      	ldr	r1, [pc, #136]	; (80024ac <main+0x10c>)
 8002422:	4828      	ldr	r0, [pc, #160]	; (80024c4 <main+0x124>)
 8002424:	f7ff febc 	bl	80021a0 <_ZN3EKF7loadEKFEPdS0_S0_S0_>

    HAL_TIM_Base_Start(&htim4);
 8002428:	4827      	ldr	r0, [pc, #156]	; (80024c8 <main+0x128>)
 800242a:	f002 fb88 	bl	8004b3e <HAL_TIM_Base_Start>
	//	  gyro_angle_y += (data_imu_buffer.Gyro_z - bGz)*0.01;
	//
	//	  magd_state.roll = gyro_angle_r;
	//	  magd_state.pitch = gyro_angle_p;
	//	  magd_state.yaw = gyro_angle_y;
	          data_imu_raw = process_MPU(true);
 800242e:	4c27      	ldr	r4, [pc, #156]	; (80024cc <main+0x12c>)
 8002430:	463b      	mov	r3, r7
 8002432:	2101      	movs	r1, #1
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff f8cb 	bl	80015d0 <_Z11process_MPUb>
 800243a:	4625      	mov	r5, r4
 800243c:	463c      	mov	r4, r7
 800243e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002442:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002446:	e885 0003 	stmia.w	r5, {r0, r1}
              int start,end,time;
              start = htim4.Instance->CNT;
 800244a:	4b1f      	ldr	r3, [pc, #124]	; (80024c8 <main+0x128>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	627b      	str	r3, [r7, #36]	; 0x24

			 //
			 //		  data_imu_buffer.Acc_x =  gyro_angle_r;
			 //		  data_imu_buffer.Acc_y =  gyro_angle_p;
			 //		  data_imu_buffer.Acc_z =  gyro_angle_y;
			 	  drone_state = complementary_filter(data_imu_raw, 0.01, 0.99);
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <main+0x12c>)
 8002454:	466c      	mov	r4, sp
 8002456:	f103 0210 	add.w	r2, r3, #16
 800245a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800245e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002464:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80024d0 <main+0x130>
 8002468:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80024d4 <main+0x134>
 800246c:	f7ff fa88 	bl	8001980 <_Z20complementary_filter8IMU_dataff>
 8002470:	eef0 6a40 	vmov.f32	s13, s0
 8002474:	eeb0 7a60 	vmov.f32	s14, s1
 8002478:	eef0 7a41 	vmov.f32	s15, s2
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <main+0x138>)
 800247e:	edc3 6a00 	vstr	s13, [r3]
 8002482:	ed83 7a01 	vstr	s14, [r3, #4]
 8002486:	edc3 7a02 	vstr	s15, [r3, #8]
			 	 end = htim4.Instance->CNT;
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <main+0x128>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	623b      	str	r3, [r7, #32]
			 	 time = end -start;
 8002492:	6a3a      	ldr	r2, [r7, #32]
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	61fb      	str	r3, [r7, #28]

//
//		  drone_state = IMU_EKF(x, 0.01,P,Q,R_full,data_imu_buffer);


  }
 800249a:	e7c8      	b.n	800242e <main+0x8e>
 800249c:	f3af 8000 	nop.w
 80024a0:	a226e211 	.word	0xa226e211
 80024a4:	3f91df46 	.word	0x3f91df46
 80024a8:	200005f0 	.word	0x200005f0
 80024ac:	20000430 	.word	0x20000430
 80024b0:	200005f8 	.word	0x200005f8
 80024b4:	20000600 	.word	0x20000600
 80024b8:	20000310 	.word	0x20000310
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000188 	.word	0x20000188
 80024c4:	200006b0 	.word	0x200006b0
 80024c8:	20000588 	.word	0x20000588
 80024cc:	20000670 	.word	0x20000670
 80024d0:	3f7d70a4 	.word	0x3f7d70a4
 80024d4:	3c23d70a 	.word	0x3c23d70a
 80024d8:	200006a0 	.word	0x200006a0

080024dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b094      	sub	sp, #80	; 0x50
 80024e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e2:	f107 0320 	add.w	r3, r7, #32
 80024e6:	2230      	movs	r2, #48	; 0x30
 80024e8:	2100      	movs	r1, #0
 80024ea:	4618      	mov	r0, r3
 80024ec:	f003 fde8 	bl	80060c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	60bb      	str	r3, [r7, #8]
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <_Z18SystemClock_Configv+0xe0>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	4a2c      	ldr	r2, [pc, #176]	; (80025bc <_Z18SystemClock_Configv+0xe0>)
 800250a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800250e:	6413      	str	r3, [r2, #64]	; 0x40
 8002510:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <_Z18SystemClock_Configv+0xe0>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800251c:	2300      	movs	r3, #0
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <_Z18SystemClock_Configv+0xe4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <_Z18SystemClock_Configv+0xe4>)
 8002526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <_Z18SystemClock_Configv+0xe4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002538:	2302      	movs	r3, #2
 800253a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800253c:	2301      	movs	r3, #1
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002540:	2310      	movs	r3, #16
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002544:	2302      	movs	r3, #2
 8002546:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002548:	2300      	movs	r3, #0
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800254c:	2308      	movs	r3, #8
 800254e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002550:	23a8      	movs	r3, #168	; 0xa8
 8002552:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002554:	2302      	movs	r3, #2
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002558:	2304      	movs	r3, #4
 800255a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800255c:	f107 0320 	add.w	r3, r7, #32
 8002560:	4618      	mov	r0, r3
 8002562:	f001 fe85 	bl	8004270 <HAL_RCC_OscConfig>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8002576:	f000 f8a9 	bl	80026cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800257a:	230f      	movs	r3, #15
 800257c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800257e:	2302      	movs	r3, #2
 8002580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002586:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800258a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800258c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002590:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	2105      	movs	r1, #5
 8002598:	4618      	mov	r0, r3
 800259a:	f002 f8d9 	bl	8004750 <HAL_RCC_ClockConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf14      	ite	ne
 80025a4:	2301      	movne	r3, #1
 80025a6:	2300      	moveq	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80025ae:	f000 f88d 	bl	80026cc <Error_Handler>
  }
}
 80025b2:	bf00      	nop
 80025b4:	3750      	adds	r7, #80	; 0x50
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40007000 	.word	0x40007000

080025c4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d8:	463b      	mov	r3, r7
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <_ZL12MX_TIM3_Initv+0xb0>)
 80025e2:	4a25      	ldr	r2, [pc, #148]	; (8002678 <_ZL12MX_TIM3_Initv+0xb4>)
 80025e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <_ZL12MX_TIM3_Initv+0xb0>)
 80025e8:	22a7      	movs	r2, #167	; 0xa7
 80025ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ec:	4b21      	ldr	r3, [pc, #132]	; (8002674 <_ZL12MX_TIM3_Initv+0xb0>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <_ZL12MX_TIM3_Initv+0xb0>)
 80025f4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80025f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <_ZL12MX_TIM3_Initv+0xb0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002600:	4b1c      	ldr	r3, [pc, #112]	; (8002674 <_ZL12MX_TIM3_Initv+0xb0>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002606:	481b      	ldr	r0, [pc, #108]	; (8002674 <_ZL12MX_TIM3_Initv+0xb0>)
 8002608:	f002 fa6e 	bl	8004ae8 <HAL_TIM_Base_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <_ZL12MX_TIM3_Initv+0x5c>
  {
    Error_Handler();
 800261c:	f000 f856 	bl	80026cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002624:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002626:	f107 0308 	add.w	r3, r7, #8
 800262a:	4619      	mov	r1, r3
 800262c:	4811      	ldr	r0, [pc, #68]	; (8002674 <_ZL12MX_TIM3_Initv+0xb0>)
 800262e:	f002 fbb2 	bl	8004d96 <HAL_TIM_ConfigClockSource>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <_ZL12MX_TIM3_Initv+0x82>
  {
    Error_Handler();
 8002642:	f000 f843 	bl	80026cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800264e:	463b      	mov	r3, r7
 8002650:	4619      	mov	r1, r3
 8002652:	4808      	ldr	r0, [pc, #32]	; (8002674 <_ZL12MX_TIM3_Initv+0xb0>)
 8002654:	f002 fdb8 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <_ZL12MX_TIM3_Initv+0xa8>
  {
    Error_Handler();
 8002668:	f000 f830 	bl	80026cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000630 	.word	0x20000630
 8002678:	40000400 	.word	0x40000400

0800267c <HAL_TIM_PeriodElapsedCallback>:
  * @retval None
  */


/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d10d      	bne.n	80026aa <HAL_TIM_PeriodElapsedCallback+0x2e>
		if(i != 0){
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_TIM_PeriodElapsedCallback+0x2e>
			  data_imu_buffer.Gyro_x = 0.5;
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002698:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800269c:	601a      	str	r2, [r3, #0]
			  data_imu_buffer.Gyro_y = 0.9;
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80026a0:	4a08      	ldr	r2, [pc, #32]	; (80026c4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026a2:	605a      	str	r2, [r3, #4]
			  data_imu_buffer.Gyro_z = 0.8;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026a8:	609a      	str	r2, [r3, #8]
	//
//		  drone_state = IMU_EKF(x, 0.01,P,Q,R_full,data_imu_buffer);

		}
	}
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40000400 	.word	0x40000400
 80026bc:	20001a38 	.word	0x20001a38
 80026c0:	20000688 	.word	0x20000688
 80026c4:	3f666666 	.word	0x3f666666
 80026c8:	3f4ccccd 	.word	0x3f4ccccd

080026cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <_Z41__static_initialization_and_destruction_0ii>:
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d107      	bne.n	80026fc <_Z41__static_initialization_and_destruction_0ii+0x20>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d102      	bne.n	80026fc <_Z41__static_initialization_and_destruction_0ii+0x20>
EKF ekf;
 80026f6:	4809      	ldr	r0, [pc, #36]	; (800271c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80026f8:	f7ff fd78 	bl	80021ec <_ZN3EKFC1Ev>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d107      	bne.n	8002712 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002708:	4293      	cmp	r3, r2
 800270a:	d102      	bne.n	8002712 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800270c:	4803      	ldr	r0, [pc, #12]	; (800271c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800270e:	f7ff fddd 	bl	80022cc <_ZN3EKFD1Ev>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200006b0 	.word	0x200006b0

08002720 <_GLOBAL__sub_I_hi2c1>:
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
 8002724:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002728:	2001      	movs	r0, #1
 800272a:	f7ff ffd7 	bl	80026dc <_Z41__static_initialization_and_destruction_0ii>
 800272e:	bd80      	pop	{r7, pc}

08002730 <_GLOBAL__sub_D_hi2c1>:
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
 8002734:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff ffcf 	bl	80026dc <_Z41__static_initialization_and_destruction_0ii>
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_MspInit+0x4c>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	4a0f      	ldr	r2, [pc, #60]	; (800278c <HAL_MspInit+0x4c>)
 8002750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002754:	6453      	str	r3, [r2, #68]	; 0x44
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <HAL_MspInit+0x4c>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_MspInit+0x4c>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_MspInit+0x4c>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_MspInit+0x4c>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800

08002790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 0314 	add.w	r3, r7, #20
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_I2C_MspInit+0x84>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d12c      	bne.n	800280c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	4b18      	ldr	r3, [pc, #96]	; (8002818 <HAL_I2C_MspInit+0x88>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <HAL_I2C_MspInit+0x88>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_I2C_MspInit+0x88>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027d4:	2312      	movs	r3, #18
 80027d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d8:	2301      	movs	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027e0:	2304      	movs	r3, #4
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	480c      	ldr	r0, [pc, #48]	; (800281c <HAL_I2C_MspInit+0x8c>)
 80027ec:	f000 fabc 	bl	8002d68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_I2C_MspInit+0x88>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	4a07      	ldr	r2, [pc, #28]	; (8002818 <HAL_I2C_MspInit+0x88>)
 80027fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <HAL_I2C_MspInit+0x88>)
 8002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800280c:	bf00      	nop
 800280e:	3728      	adds	r7, #40	; 0x28
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40005400 	.word	0x40005400
 8002818:	40023800 	.word	0x40023800
 800281c:	40020400 	.word	0x40020400

08002820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a18      	ldr	r2, [pc, #96]	; (8002890 <HAL_TIM_Base_MspInit+0x70>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d116      	bne.n	8002860 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <HAL_TIM_Base_MspInit+0x74>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_TIM_Base_MspInit+0x74>)
 800283c:	f043 0302 	orr.w	r3, r3, #2
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <HAL_TIM_Base_MspInit+0x74>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	201d      	movs	r0, #29
 8002854:	f000 fa51 	bl	8002cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002858:	201d      	movs	r0, #29
 800285a:	f000 fa6a 	bl	8002d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800285e:	e012      	b.n	8002886 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0c      	ldr	r2, [pc, #48]	; (8002898 <HAL_TIM_Base_MspInit+0x78>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10d      	bne.n	8002886 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <HAL_TIM_Base_MspInit+0x74>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a08      	ldr	r2, [pc, #32]	; (8002894 <HAL_TIM_Base_MspInit+0x74>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b06      	ldr	r3, [pc, #24]	; (8002894 <HAL_TIM_Base_MspInit+0x74>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
}
 8002886:	bf00      	nop
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40000400 	.word	0x40000400
 8002894:	40023800 	.word	0x40023800
 8002898:	40000800 	.word	0x40000800

0800289c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_UART_MspInit+0x84>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d12c      	bne.n	8002918 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_UART_MspInit+0x88>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_UART_MspInit+0x88>)
 80028c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_UART_MspInit+0x88>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_UART_MspInit+0x88>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <HAL_UART_MspInit+0x88>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_UART_MspInit+0x88>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002904:	2303      	movs	r3, #3
 8002906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002908:	2307      	movs	r3, #7
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4619      	mov	r1, r3
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <HAL_UART_MspInit+0x8c>)
 8002914:	f000 fa28 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002918:	bf00      	nop
 800291a:	3728      	adds	r7, #40	; 0x28
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40004800 	.word	0x40004800
 8002924:	40023800 	.word	0x40023800
 8002928:	40020400 	.word	0x40020400

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293e:	e7fe      	b.n	800293e <HardFault_Handler+0x4>

08002940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002944:	e7fe      	b.n	8002944 <MemManage_Handler+0x4>

08002946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294a:	e7fe      	b.n	800294a <BusFault_Handler+0x4>

0800294c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002950:	e7fe      	b.n	8002950 <UsageFault_Handler+0x4>

08002952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002980:	f000 f89e 	bl	8002ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}

08002988 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <TIM3_IRQHandler+0x10>)
 800298e:	f002 f8fa 	bl	8004b86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000630 	.word	0x20000630

0800299c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <SystemInit+0x28>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <SystemInit+0x28>)
 80029a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <SystemInit+0x28>)
 80029b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029b6:	609a      	str	r2, [r3, #8]
#endif
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80029c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ce:	e003      	b.n	80029d8 <LoopCopyDataInit>

080029d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029d6:	3104      	adds	r1, #4

080029d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d8:	480b      	ldr	r0, [pc, #44]	; (8002a08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029e0:	d3f6      	bcc.n	80029d0 <CopyDataInit>
  ldr  r2, =_sbss
 80029e2:	4a0b      	ldr	r2, [pc, #44]	; (8002a10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029e4:	e002      	b.n	80029ec <LoopFillZerobss>

080029e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e8:	f842 3b04 	str.w	r3, [r2], #4

080029ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029ec:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029f0:	d3f9      	bcc.n	80029e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80029f2:	f7ff ffd3 	bl	800299c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029f6:	f003 fb37 	bl	8006068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029fa:	f7ff fcd1 	bl	80023a0 <main>
  bx  lr    
 80029fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002a00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a04:	08006214 	.word	0x08006214
  ldr  r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a0c:	200004d8 	.word	0x200004d8
  ldr  r2, =_sbss
 8002a10:	200004d8 	.word	0x200004d8
  ldr  r3, = _ebss
 8002a14:	20001a44 	.word	0x20001a44

08002a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a18:	e7fe      	b.n	8002a18 <ADC_IRQHandler>
	...

08002a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a20:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_Init+0x40>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0d      	ldr	r2, [pc, #52]	; (8002a5c <HAL_Init+0x40>)
 8002a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_Init+0x40>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <HAL_Init+0x40>)
 8002a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <HAL_Init+0x40>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <HAL_Init+0x40>)
 8002a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a44:	2003      	movs	r0, #3
 8002a46:	f000 f94d 	bl	8002ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	f000 f808 	bl	8002a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a50:	f7ff fe76 	bl	8002740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023c00 	.word	0x40023c00

08002a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <HAL_InitTick+0x54>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <HAL_InitTick+0x58>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f965 	bl	8002d4e <HAL_SYSTICK_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00e      	b.n	8002aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b0f      	cmp	r3, #15
 8002a92:	d80a      	bhi.n	8002aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a94:	2200      	movs	r2, #0
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a9c:	f000 f92d 	bl	8002cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aa0:	4a06      	ldr	r2, [pc, #24]	; (8002abc <HAL_InitTick+0x5c>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e000      	b.n	8002aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000468 	.word	0x20000468
 8002ab8:	20000470 	.word	0x20000470
 8002abc:	2000046c 	.word	0x2000046c

08002ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_IncTick+0x20>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_IncTick+0x24>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_IncTick+0x24>)
 8002ad2:	6013      	str	r3, [r2, #0]
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000470 	.word	0x20000470
 8002ae4:	20001a40 	.word	0x20001a40

08002ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return uwTick;
 8002aec:	4b03      	ldr	r3, [pc, #12]	; (8002afc <HAL_GetTick+0x14>)
 8002aee:	681b      	ldr	r3, [r3, #0]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20001a40 	.word	0x20001a40

08002b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b08:	f7ff ffee 	bl	8002ae8 <HAL_GetTick>
 8002b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b18:	d005      	beq.n	8002b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <HAL_Delay+0x40>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b26:	bf00      	nop
 8002b28:	f7ff ffde 	bl	8002ae8 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d8f7      	bhi.n	8002b28 <HAL_Delay+0x28>
  {
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000470 	.word	0x20000470

08002b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b60:	4013      	ands	r3, r2
 8002b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b76:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <__NVIC_SetPriorityGrouping+0x44>)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	60d3      	str	r3, [r2, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	f003 0307 	and.w	r3, r3, #7
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	db0b      	blt.n	8002bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f003 021f 	and.w	r2, r3, #31
 8002bc0:	4907      	ldr	r1, [pc, #28]	; (8002be0 <__NVIC_EnableIRQ+0x38>)
 8002bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2001      	movs	r0, #1
 8002bca:	fa00 f202 	lsl.w	r2, r0, r2
 8002bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	e000e100 	.word	0xe000e100

08002be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	db0a      	blt.n	8002c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	490c      	ldr	r1, [pc, #48]	; (8002c30 <__NVIC_SetPriority+0x4c>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	0112      	lsls	r2, r2, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c0c:	e00a      	b.n	8002c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	4908      	ldr	r1, [pc, #32]	; (8002c34 <__NVIC_SetPriority+0x50>)
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	0112      	lsls	r2, r2, #4
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	440b      	add	r3, r1
 8002c22:	761a      	strb	r2, [r3, #24]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b089      	sub	sp, #36	; 0x24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f1c3 0307 	rsb	r3, r3, #7
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf28      	it	cs
 8002c56:	2304      	movcs	r3, #4
 8002c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2b06      	cmp	r3, #6
 8002c60:	d902      	bls.n	8002c68 <NVIC_EncodePriority+0x30>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3b03      	subs	r3, #3
 8002c66:	e000      	b.n	8002c6a <NVIC_EncodePriority+0x32>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	4313      	orrs	r3, r2
         );
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3724      	adds	r7, #36	; 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb0:	d301      	bcc.n	8002cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00f      	b.n	8002cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <SysTick_Config+0x40>)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc4:	f7ff ff8e 	bl	8002be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cc8:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <SysTick_Config+0x40>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cce:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <SysTick_Config+0x40>)
 8002cd0:	2207      	movs	r2, #7
 8002cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	e000e010 	.word	0xe000e010

08002ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff29 	bl	8002b44 <__NVIC_SetPriorityGrouping>
}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b086      	sub	sp, #24
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d0c:	f7ff ff3e 	bl	8002b8c <__NVIC_GetPriorityGrouping>
 8002d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68b9      	ldr	r1, [r7, #8]
 8002d16:	6978      	ldr	r0, [r7, #20]
 8002d18:	f7ff ff8e 	bl	8002c38 <NVIC_EncodePriority>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff5d 	bl	8002be4 <__NVIC_SetPriority>
}
 8002d2a:	bf00      	nop
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff31 	bl	8002ba8 <__NVIC_EnableIRQ>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ffa2 	bl	8002ca0 <SysTick_Config>
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e16b      	b.n	800305c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 815a 	bne.w	8003056 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d00b      	beq.n	8002dc2 <HAL_GPIO_Init+0x5a>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db6:	2b11      	cmp	r3, #17
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b12      	cmp	r3, #18
 8002dc0:	d130      	bne.n	8002e24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0201 	and.w	r2, r3, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0xfc>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b12      	cmp	r3, #18
 8002e62:	d123      	bne.n	8002eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80b4 	beq.w	8003056 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b5f      	ldr	r3, [pc, #380]	; (8003070 <HAL_GPIO_Init+0x308>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a5e      	ldr	r2, [pc, #376]	; (8003070 <HAL_GPIO_Init+0x308>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b5c      	ldr	r3, [pc, #368]	; (8003070 <HAL_GPIO_Init+0x308>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f0a:	4a5a      	ldr	r2, [pc, #360]	; (8003074 <HAL_GPIO_Init+0x30c>)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a51      	ldr	r2, [pc, #324]	; (8003078 <HAL_GPIO_Init+0x310>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02b      	beq.n	8002f8e <HAL_GPIO_Init+0x226>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a50      	ldr	r2, [pc, #320]	; (800307c <HAL_GPIO_Init+0x314>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d025      	beq.n	8002f8a <HAL_GPIO_Init+0x222>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4f      	ldr	r2, [pc, #316]	; (8003080 <HAL_GPIO_Init+0x318>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <HAL_GPIO_Init+0x21e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_GPIO_Init+0x31c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d019      	beq.n	8002f82 <HAL_GPIO_Init+0x21a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <HAL_GPIO_Init+0x320>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_GPIO_Init+0x216>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4c      	ldr	r2, [pc, #304]	; (800308c <HAL_GPIO_Init+0x324>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00d      	beq.n	8002f7a <HAL_GPIO_Init+0x212>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4b      	ldr	r2, [pc, #300]	; (8003090 <HAL_GPIO_Init+0x328>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <HAL_GPIO_Init+0x20e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <HAL_GPIO_Init+0x32c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_GPIO_Init+0x20a>
 8002f6e:	2307      	movs	r3, #7
 8002f70:	e00e      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f72:	2308      	movs	r3, #8
 8002f74:	e00c      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f76:	2306      	movs	r3, #6
 8002f78:	e00a      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	e008      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	e006      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e004      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e002      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	f002 0203 	and.w	r2, r2, #3
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	4093      	lsls	r3, r2
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa0:	4934      	ldr	r1, [pc, #208]	; (8003074 <HAL_GPIO_Init+0x30c>)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fae:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd2:	4a31      	ldr	r2, [pc, #196]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ffc:	4a26      	ldr	r2, [pc, #152]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003002:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_GPIO_Init+0x330>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003026:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_GPIO_Init+0x330>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_GPIO_Init+0x330>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003050:	4a11      	ldr	r2, [pc, #68]	; (8003098 <HAL_GPIO_Init+0x330>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3301      	adds	r3, #1
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	f67f ae90 	bls.w	8002d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003064:	bf00      	nop
 8003066:	3724      	adds	r7, #36	; 0x24
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40023800 	.word	0x40023800
 8003074:	40013800 	.word	0x40013800
 8003078:	40020000 	.word	0x40020000
 800307c:	40020400 	.word	0x40020400
 8003080:	40020800 	.word	0x40020800
 8003084:	40020c00 	.word	0x40020c00
 8003088:	40021000 	.word	0x40021000
 800308c:	40021400 	.word	0x40021400
 8003090:	40021800 	.word	0x40021800
 8003094:	40021c00 	.word	0x40021c00
 8003098:	40013c00 	.word	0x40013c00

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	401a      	ands	r2, r3
 80030e2:	887b      	ldrh	r3, [r7, #2]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d104      	bne.n	80030f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	041a      	lsls	r2, r3, #16
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80030f0:	e002      	b.n	80030f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	619a      	str	r2, [r3, #24]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e11f      	b.n	8003356 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff fb30 	bl	8002790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2224      	movs	r2, #36	; 0x24
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003168:	f001 fc96 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 800316c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a7b      	ldr	r2, [pc, #492]	; (8003360 <HAL_I2C_Init+0x25c>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d807      	bhi.n	8003188 <HAL_I2C_Init+0x84>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a7a      	ldr	r2, [pc, #488]	; (8003364 <HAL_I2C_Init+0x260>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e006      	b.n	8003196 <HAL_I2C_Init+0x92>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a77      	ldr	r2, [pc, #476]	; (8003368 <HAL_I2C_Init+0x264>)
 800318c:	4293      	cmp	r3, r2
 800318e:	bf94      	ite	ls
 8003190:	2301      	movls	r3, #1
 8003192:	2300      	movhi	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0db      	b.n	8003356 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a72      	ldr	r2, [pc, #456]	; (800336c <HAL_I2C_Init+0x268>)
 80031a2:	fba2 2303 	umull	r2, r3, r2, r3
 80031a6:	0c9b      	lsrs	r3, r3, #18
 80031a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a64      	ldr	r2, [pc, #400]	; (8003360 <HAL_I2C_Init+0x25c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d802      	bhi.n	80031d8 <HAL_I2C_Init+0xd4>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3301      	adds	r3, #1
 80031d6:	e009      	b.n	80031ec <HAL_I2C_Init+0xe8>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	4a63      	ldr	r2, [pc, #396]	; (8003370 <HAL_I2C_Init+0x26c>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	3301      	adds	r3, #1
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4956      	ldr	r1, [pc, #344]	; (8003360 <HAL_I2C_Init+0x25c>)
 8003208:	428b      	cmp	r3, r1
 800320a:	d80d      	bhi.n	8003228 <HAL_I2C_Init+0x124>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e59      	subs	r1, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fbb1 f3f3 	udiv	r3, r1, r3
 800321a:	3301      	adds	r3, #1
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	2b04      	cmp	r3, #4
 8003222:	bf38      	it	cc
 8003224:	2304      	movcc	r3, #4
 8003226:	e04f      	b.n	80032c8 <HAL_I2C_Init+0x1c4>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d111      	bne.n	8003254 <HAL_I2C_Init+0x150>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1e58      	subs	r0, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	440b      	add	r3, r1
 800323e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf0c      	ite	eq
 800324c:	2301      	moveq	r3, #1
 800324e:	2300      	movne	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e012      	b.n	800327a <HAL_I2C_Init+0x176>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	0099      	lsls	r1, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	fbb0 f3f3 	udiv	r3, r0, r3
 800326a:	3301      	adds	r3, #1
 800326c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf0c      	ite	eq
 8003274:	2301      	moveq	r3, #1
 8003276:	2300      	movne	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Init+0x17e>
 800327e:	2301      	movs	r3, #1
 8003280:	e022      	b.n	80032c8 <HAL_I2C_Init+0x1c4>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10e      	bne.n	80032a8 <HAL_I2C_Init+0x1a4>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1e58      	subs	r0, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	440b      	add	r3, r1
 8003298:	fbb0 f3f3 	udiv	r3, r0, r3
 800329c:	3301      	adds	r3, #1
 800329e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a6:	e00f      	b.n	80032c8 <HAL_I2C_Init+0x1c4>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1e58      	subs	r0, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	0099      	lsls	r1, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80032be:	3301      	adds	r3, #1
 80032c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	6809      	ldr	r1, [r1, #0]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69da      	ldr	r2, [r3, #28]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6911      	ldr	r1, [r2, #16]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68d2      	ldr	r2, [r2, #12]
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	430b      	orrs	r3, r1
 800330a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	000186a0 	.word	0x000186a0
 8003364:	001e847f 	.word	0x001e847f
 8003368:	003d08ff 	.word	0x003d08ff
 800336c:	431bde83 	.word	0x431bde83
 8003370:	10624dd3 	.word	0x10624dd3

08003374 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	461a      	mov	r2, r3
 8003380:	460b      	mov	r3, r1
 8003382:	817b      	strh	r3, [r7, #10]
 8003384:	4613      	mov	r3, r2
 8003386:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff fbae 	bl	8002ae8 <HAL_GetTick>
 800338c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b20      	cmp	r3, #32
 8003398:	f040 80e0 	bne.w	800355c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2319      	movs	r3, #25
 80033a2:	2201      	movs	r2, #1
 80033a4:	4970      	ldr	r1, [pc, #448]	; (8003568 <HAL_I2C_Master_Transmit+0x1f4>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fd84 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033b2:	2302      	movs	r3, #2
 80033b4:	e0d3      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_I2C_Master_Transmit+0x50>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0cc      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d007      	beq.n	80033ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2221      	movs	r2, #33	; 0x21
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2210      	movs	r2, #16
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	893a      	ldrh	r2, [r7, #8]
 800341a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a50      	ldr	r2, [pc, #320]	; (800356c <HAL_I2C_Master_Transmit+0x1f8>)
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800342c:	8979      	ldrh	r1, [r7, #10]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fbf0 	bl	8003c18 <I2C_MasterRequestWrite>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e08d      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003458:	e066      	b.n	8003528 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	6a39      	ldr	r1, [r7, #32]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fdfe 	bl	8004060 <I2C_WaitOnTXEFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00d      	beq.n	8003486 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	2b04      	cmp	r3, #4
 8003470:	d107      	bne.n	8003482 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003480:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06b      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	781a      	ldrb	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d11b      	bne.n	80034fc <HAL_I2C_Master_Transmit+0x188>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d017      	beq.n	80034fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	6a39      	ldr	r1, [r7, #32]
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fdee 	bl	80040e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	2b04      	cmp	r3, #4
 8003512:	d107      	bne.n	8003524 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003522:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e01a      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	d194      	bne.n	800345a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	00100002 	.word	0x00100002
 800356c:	ffff0000 	.word	0xffff0000

08003570 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	; 0x30
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	460b      	mov	r3, r1
 800357e:	817b      	strh	r3, [r7, #10]
 8003580:	4613      	mov	r3, r2
 8003582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7ff fab0 	bl	8002ae8 <HAL_GetTick>
 8003588:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	f040 820b 	bne.w	80039ae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2319      	movs	r3, #25
 800359e:	2201      	movs	r2, #1
 80035a0:	497c      	ldr	r1, [pc, #496]	; (8003794 <HAL_I2C_Master_Receive+0x224>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fc86 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	e1fe      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_I2C_Master_Receive+0x50>
 80035bc:	2302      	movs	r3, #2
 80035be:	e1f7      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d007      	beq.n	80035e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2222      	movs	r2, #34	; 0x22
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2210      	movs	r2, #16
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a5c      	ldr	r2, [pc, #368]	; (8003798 <HAL_I2C_Master_Receive+0x228>)
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003628:	8979      	ldrh	r1, [r7, #10]
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fb74 	bl	8003d1c <I2C_MasterRequestRead>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1b8      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d113      	bne.n	800366e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	623b      	str	r3, [r7, #32]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e18c      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	2b01      	cmp	r3, #1
 8003674:	d11b      	bne.n	80036ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	e16c      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d11b      	bne.n	80036ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	e14c      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695b      	ldr	r3, [r3, #20]
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003714:	e138      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371a:	2b03      	cmp	r3, #3
 800371c:	f200 80f1 	bhi.w	8003902 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	2b01      	cmp	r3, #1
 8003726:	d123      	bne.n	8003770 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fd19 	bl	8004164 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e139      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691a      	ldr	r2, [r3, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29a      	uxth	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800376e:	e10b      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	2b02      	cmp	r3, #2
 8003776:	d14e      	bne.n	8003816 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	2200      	movs	r2, #0
 8003780:	4906      	ldr	r1, [pc, #24]	; (800379c <HAL_I2C_Master_Receive+0x22c>)
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fb96 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e10e      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
 8003792:	bf00      	nop
 8003794:	00100002 	.word	0x00100002
 8003798:	ffff0000 	.word	0xffff0000
 800379c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003814:	e0b8      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	2200      	movs	r2, #0
 800381e:	4966      	ldr	r1, [pc, #408]	; (80039b8 <HAL_I2C_Master_Receive+0x448>)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fb47 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0bf      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	691a      	ldr	r2, [r3, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	2200      	movs	r2, #0
 800387a:	494f      	ldr	r1, [pc, #316]	; (80039b8 <HAL_I2C_Master_Receive+0x448>)
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fb19 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e091      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800389a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	b2d2      	uxtb	r2, r2
 80038da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003900:	e042      	b.n	8003988 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fc2c 	bl	8004164 <I2C_WaitOnRXNEFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e04c      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d118      	bne.n	8003988 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	2b00      	cmp	r3, #0
 800398e:	f47f aec2 	bne.w	8003716 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
  }
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	; 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	00010004 	.word	0x00010004

080039bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08a      	sub	sp, #40	; 0x28
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
 80039c8:	460b      	mov	r3, r1
 80039ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039cc:	f7ff f88c 	bl	8002ae8 <HAL_GetTick>
 80039d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80039d2:	2301      	movs	r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	f040 8110 	bne.w	8003c04 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2319      	movs	r3, #25
 80039ea:	2201      	movs	r2, #1
 80039ec:	4988      	ldr	r1, [pc, #544]	; (8003c10 <HAL_I2C_IsDeviceReady+0x254>)
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fa60 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
 80039fc:	e103      	b.n	8003c06 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_I2C_IsDeviceReady+0x50>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e0fc      	b.n	8003c06 <HAL_I2C_IsDeviceReady+0x24a>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d007      	beq.n	8003a32 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a40:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2224      	movs	r2, #36	; 0x24
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4a70      	ldr	r2, [pc, #448]	; (8003c14 <HAL_I2C_IsDeviceReady+0x258>)
 8003a54:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a64:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fa1e 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00c      	beq.n	8003a98 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0b6      	b.n	8003c06 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a98:	897b      	ldrh	r3, [r7, #10]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aa6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003aa8:	f7ff f81e 	bl	8002ae8 <HAL_GetTick>
 8003aac:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003adc:	e025      	b.n	8003b2a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7ff f803 	bl	8002ae8 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <HAL_I2C_IsDeviceReady+0x138>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	22a0      	movs	r2, #160	; 0xa0
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	bf0c      	ite	eq
 8003b0a:	2301      	moveq	r3, #1
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2ba0      	cmp	r3, #160	; 0xa0
 8003b34:	d005      	beq.n	8003b42 <HAL_I2C_IsDeviceReady+0x186>
 8003b36:	7dfb      	ldrb	r3, [r7, #23]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d102      	bne.n	8003b42 <HAL_I2C_IsDeviceReady+0x186>
 8003b3c:	7dbb      	ldrb	r3, [r7, #22]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0cd      	beq.n	8003ade <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2220      	movs	r2, #32
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d129      	bne.n	8003bac <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b66:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b68:	2300      	movs	r3, #0
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	613b      	str	r3, [r7, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2319      	movs	r3, #25
 8003b84:	2201      	movs	r2, #1
 8003b86:	4922      	ldr	r1, [pc, #136]	; (8003c10 <HAL_I2C_IsDeviceReady+0x254>)
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f993 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e036      	b.n	8003c06 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e02c      	b.n	8003c06 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bba:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bc4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2319      	movs	r3, #25
 8003bcc:	2201      	movs	r2, #1
 8003bce:	4910      	ldr	r1, [pc, #64]	; (8003c10 <HAL_I2C_IsDeviceReady+0x254>)
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f96f 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e012      	b.n	8003c06 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	f4ff af33 	bcc.w	8003a56 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003c04:	2302      	movs	r3, #2
  }
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	00100002 	.word	0x00100002
 8003c14:	ffff0000 	.word	0xffff0000

08003c18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	607a      	str	r2, [r7, #4]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	460b      	mov	r3, r1
 8003c26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d006      	beq.n	8003c42 <I2C_MasterRequestWrite+0x2a>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d003      	beq.n	8003c42 <I2C_MasterRequestWrite+0x2a>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c40:	d108      	bne.n	8003c54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e00b      	b.n	8003c6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	2b12      	cmp	r3, #18
 8003c5a:	d107      	bne.n	8003c6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f91b 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00c      	beq.n	8003c9e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e035      	b.n	8003d0a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ca6:	d108      	bne.n	8003cba <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ca8:	897b      	ldrh	r3, [r7, #10]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cb6:	611a      	str	r2, [r3, #16]
 8003cb8:	e01b      	b.n	8003cf2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cba:	897b      	ldrh	r3, [r7, #10]
 8003cbc:	11db      	asrs	r3, r3, #7
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	f003 0306 	and.w	r3, r3, #6
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f063 030f 	orn	r3, r3, #15
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	490f      	ldr	r1, [pc, #60]	; (8003d14 <I2C_MasterRequestWrite+0xfc>)
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 f942 	bl	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e010      	b.n	8003d0a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ce8:	897b      	ldrh	r3, [r7, #10]
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	4908      	ldr	r1, [pc, #32]	; (8003d18 <I2C_MasterRequestWrite+0x100>)
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f932 	bl	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	00010008 	.word	0x00010008
 8003d18:	00010002 	.word	0x00010002

08003d1c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	603b      	str	r3, [r7, #0]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d30:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d40:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d006      	beq.n	8003d56 <I2C_MasterRequestRead+0x3a>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d003      	beq.n	8003d56 <I2C_MasterRequestRead+0x3a>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d54:	d108      	bne.n	8003d68 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e00b      	b.n	8003d80 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	2b11      	cmp	r3, #17
 8003d6e:	d107      	bne.n	8003d80 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f891 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00c      	beq.n	8003db2 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e078      	b.n	8003ea4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dba:	d108      	bne.n	8003dce <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003dbc:	897b      	ldrh	r3, [r7, #10]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]
 8003dcc:	e05e      	b.n	8003e8c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003dce:	897b      	ldrh	r3, [r7, #10]
 8003dd0:	11db      	asrs	r3, r3, #7
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 0306 	and.w	r3, r3, #6
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f063 030f 	orn	r3, r3, #15
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4930      	ldr	r1, [pc, #192]	; (8003eac <I2C_MasterRequestRead+0x190>)
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f8b8 	bl	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e053      	b.n	8003ea4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dfc:	897b      	ldrh	r3, [r7, #10]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4929      	ldr	r1, [pc, #164]	; (8003eb0 <I2C_MasterRequestRead+0x194>)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f8a8 	bl	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e043      	b.n	8003ea4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e40:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f000 f830 	bl	8003eb4 <I2C_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00c      	beq.n	8003e74 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e017      	b.n	8003ea4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003e74:	897b      	ldrh	r3, [r7, #10]
 8003e76:	11db      	asrs	r3, r3, #7
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	f003 0306 	and.w	r3, r3, #6
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f063 030e 	orn	r3, r3, #14
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4907      	ldr	r1, [pc, #28]	; (8003eb0 <I2C_MasterRequestRead+0x194>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 f865 	bl	8003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d001      	beq.n	8003ea2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	00010008 	.word	0x00010008
 8003eb0:	00010002 	.word	0x00010002

08003eb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	603b      	str	r3, [r7, #0]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ec4:	e025      	b.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ecc:	d021      	beq.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fe fe0b 	bl	8002ae8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d116      	bne.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2220      	movs	r2, #32
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f043 0220 	orr.w	r2, r3, #32
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e023      	b.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d10d      	bne.n	8003f38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	43da      	mvns	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2301      	moveq	r3, #1
 8003f30:	2300      	movne	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	e00c      	b.n	8003f52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	4013      	ands	r3, r2
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	bf0c      	ite	eq
 8003f4a:	2301      	moveq	r3, #1
 8003f4c:	2300      	movne	r3, #0
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	79fb      	ldrb	r3, [r7, #7]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d0b6      	beq.n	8003ec6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f70:	e051      	b.n	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f80:	d123      	bne.n	8003fca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e046      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fd0:	d021      	beq.n	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd2:	f7fe fd89 	bl	8002ae8 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d116      	bne.n	8004016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f043 0220 	orr.w	r2, r3, #32
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e020      	b.n	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10c      	bne.n	800403a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	43da      	mvns	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	e00b      	b.n	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	43da      	mvns	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d18d      	bne.n	8003f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406c:	e02d      	b.n	80040ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 f8ce 	bl	8004210 <I2C_IsAcknowledgeFailed>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e02d      	b.n	80040da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004084:	d021      	beq.n	80040ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004086:	f7fe fd2f 	bl	8002ae8 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	d302      	bcc.n	800409c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d116      	bne.n	80040ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e007      	b.n	80040da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d1ca      	bne.n	800406e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	60b9      	str	r1, [r7, #8]
 80040ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ee:	e02d      	b.n	800414c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f88d 	bl	8004210 <I2C_IsAcknowledgeFailed>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e02d      	b.n	800415c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004106:	d021      	beq.n	800414c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004108:	f7fe fcee 	bl	8002ae8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	429a      	cmp	r2, r3
 8004116:	d302      	bcc.n	800411e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d116      	bne.n	800414c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e007      	b.n	800415c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b04      	cmp	r3, #4
 8004158:	d1ca      	bne.n	80040f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004170:	e042      	b.n	80041f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f003 0310 	and.w	r3, r3, #16
 800417c:	2b10      	cmp	r3, #16
 800417e:	d119      	bne.n	80041b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0210 	mvn.w	r2, #16
 8004188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e029      	b.n	8004208 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b4:	f7fe fc98 	bl	8002ae8 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d302      	bcc.n	80041ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d116      	bne.n	80041f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f043 0220 	orr.w	r2, r3, #32
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e007      	b.n	8004208 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004202:	2b40      	cmp	r3, #64	; 0x40
 8004204:	d1b5      	bne.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d11b      	bne.n	8004260 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004230:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f043 0204 	orr.w	r2, r3, #4
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e25b      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d075      	beq.n	800437a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800428e:	4ba3      	ldr	r3, [pc, #652]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b04      	cmp	r3, #4
 8004298:	d00c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429a:	4ba0      	ldr	r3, [pc, #640]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d112      	bne.n	80042cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042a6:	4b9d      	ldr	r3, [pc, #628]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b2:	d10b      	bne.n	80042cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	4b99      	ldr	r3, [pc, #612]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d05b      	beq.n	8004378 <HAL_RCC_OscConfig+0x108>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d157      	bne.n	8004378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e236      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d106      	bne.n	80042e4 <HAL_RCC_OscConfig+0x74>
 80042d6:	4b91      	ldr	r3, [pc, #580]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a90      	ldr	r2, [pc, #576]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e01d      	b.n	8004320 <HAL_RCC_OscConfig+0xb0>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x98>
 80042ee:	4b8b      	ldr	r3, [pc, #556]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a8a      	ldr	r2, [pc, #552]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b88      	ldr	r3, [pc, #544]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a87      	ldr	r2, [pc, #540]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0xb0>
 8004308:	4b84      	ldr	r3, [pc, #528]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a83      	ldr	r2, [pc, #524]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800430e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b81      	ldr	r3, [pc, #516]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a80      	ldr	r2, [pc, #512]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800431a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fe fbde 	bl	8002ae8 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004330:	f7fe fbda 	bl	8002ae8 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1fb      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b76      	ldr	r3, [pc, #472]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0xc0>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fe fbca 	bl	8002ae8 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f7fe fbc6 	bl	8002ae8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e1e7      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	4b6c      	ldr	r3, [pc, #432]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0xe8>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d063      	beq.n	800444e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004386:	4b65      	ldr	r3, [pc, #404]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004392:	4b62      	ldr	r3, [pc, #392]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439a:	2b08      	cmp	r3, #8
 800439c:	d11c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439e:	4b5f      	ldr	r3, [pc, #380]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	4b5c      	ldr	r3, [pc, #368]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_RCC_OscConfig+0x152>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e1bb      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	4b56      	ldr	r3, [pc, #344]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4952      	ldr	r1, [pc, #328]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d6:	e03a      	b.n	800444e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e0:	4b4f      	ldr	r3, [pc, #316]	; (8004520 <HAL_RCC_OscConfig+0x2b0>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fe fb7f 	bl	8002ae8 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ee:	f7fe fb7b 	bl	8002ae8 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e19c      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	4b46      	ldr	r3, [pc, #280]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440c:	4b43      	ldr	r3, [pc, #268]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4940      	ldr	r1, [pc, #256]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 800441c:	4313      	orrs	r3, r2
 800441e:	600b      	str	r3, [r1, #0]
 8004420:	e015      	b.n	800444e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004422:	4b3f      	ldr	r3, [pc, #252]	; (8004520 <HAL_RCC_OscConfig+0x2b0>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fe fb5e 	bl	8002ae8 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004430:	f7fe fb5a 	bl	8002ae8 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e17b      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d030      	beq.n	80044bc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d016      	beq.n	8004490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004462:	4b30      	ldr	r3, [pc, #192]	; (8004524 <HAL_RCC_OscConfig+0x2b4>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fe fb3e 	bl	8002ae8 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004470:	f7fe fb3a 	bl	8002ae8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e15b      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	4b26      	ldr	r3, [pc, #152]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 8004484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0x200>
 800448e:	e015      	b.n	80044bc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004490:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_OscConfig+0x2b4>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004496:	f7fe fb27 	bl	8002ae8 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800449e:	f7fe fb23 	bl	8002ae8 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e144      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 80a0 	beq.w	800460a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ce:	4b13      	ldr	r3, [pc, #76]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	4a0e      	ldr	r2, [pc, #56]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044f6:	2301      	movs	r3, #1
 80044f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fa:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_OscConfig+0x2b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d121      	bne.n	800454a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004506:	4b08      	ldr	r3, [pc, #32]	; (8004528 <HAL_RCC_OscConfig+0x2b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a07      	ldr	r2, [pc, #28]	; (8004528 <HAL_RCC_OscConfig+0x2b8>)
 800450c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004512:	f7fe fae9 	bl	8002ae8 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	e011      	b.n	800453e <HAL_RCC_OscConfig+0x2ce>
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800
 8004520:	42470000 	.word	0x42470000
 8004524:	42470e80 	.word	0x42470e80
 8004528:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452c:	f7fe fadc 	bl	8002ae8 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e0fd      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453e:	4b81      	ldr	r3, [pc, #516]	; (8004744 <HAL_RCC_OscConfig+0x4d4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d106      	bne.n	8004560 <HAL_RCC_OscConfig+0x2f0>
 8004552:	4b7d      	ldr	r3, [pc, #500]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a7c      	ldr	r2, [pc, #496]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	6713      	str	r3, [r2, #112]	; 0x70
 800455e:	e01c      	b.n	800459a <HAL_RCC_OscConfig+0x32a>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b05      	cmp	r3, #5
 8004566:	d10c      	bne.n	8004582 <HAL_RCC_OscConfig+0x312>
 8004568:	4b77      	ldr	r3, [pc, #476]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a76      	ldr	r2, [pc, #472]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800456e:	f043 0304 	orr.w	r3, r3, #4
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
 8004574:	4b74      	ldr	r3, [pc, #464]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004578:	4a73      	ldr	r2, [pc, #460]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6713      	str	r3, [r2, #112]	; 0x70
 8004580:	e00b      	b.n	800459a <HAL_RCC_OscConfig+0x32a>
 8004582:	4b71      	ldr	r3, [pc, #452]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a70      	ldr	r2, [pc, #448]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
 800458e:	4b6e      	ldr	r3, [pc, #440]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	4a6d      	ldr	r2, [pc, #436]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004594:	f023 0304 	bic.w	r3, r3, #4
 8004598:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a2:	f7fe faa1 	bl	8002ae8 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	e00a      	b.n	80045c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045aa:	f7fe fa9d 	bl	8002ae8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e0bc      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	4b61      	ldr	r3, [pc, #388]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0ee      	beq.n	80045aa <HAL_RCC_OscConfig+0x33a>
 80045cc:	e014      	b.n	80045f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fe fa8b 	bl	8002ae8 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fe fa87 	bl	8002ae8 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e0a6      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	4b56      	ldr	r3, [pc, #344]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d105      	bne.n	800460a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fe:	4b52      	ldr	r3, [pc, #328]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	4a51      	ldr	r2, [pc, #324]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004608:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8092 	beq.w	8004738 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004614:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 030c 	and.w	r3, r3, #12
 800461c:	2b08      	cmp	r3, #8
 800461e:	d05c      	beq.n	80046da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d141      	bne.n	80046ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004628:	4b48      	ldr	r3, [pc, #288]	; (800474c <HAL_RCC_OscConfig+0x4dc>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7fe fa5b 	bl	8002ae8 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004636:	f7fe fa57 	bl	8002ae8 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e078      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004648:	4b3f      	ldr	r3, [pc, #252]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	019b      	lsls	r3, r3, #6
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	061b      	lsls	r3, r3, #24
 8004678:	4933      	ldr	r1, [pc, #204]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 800467a:	4313      	orrs	r3, r2
 800467c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467e:	4b33      	ldr	r3, [pc, #204]	; (800474c <HAL_RCC_OscConfig+0x4dc>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fe fa30 	bl	8002ae8 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800468c:	f7fe fa2c 	bl	8002ae8 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e04d      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469e:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f0      	beq.n	800468c <HAL_RCC_OscConfig+0x41c>
 80046aa:	e045      	b.n	8004738 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_OscConfig+0x4dc>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b2:	f7fe fa19 	bl	8002ae8 <HAL_GetTick>
 80046b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ba:	f7fe fa15 	bl	8002ae8 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e036      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_OscConfig+0x44a>
 80046d8:	e02e      	b.n	8004738 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e029      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e6:	4b18      	ldr	r3, [pc, #96]	; (8004748 <HAL_RCC_OscConfig+0x4d8>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d11c      	bne.n	8004734 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004704:	429a      	cmp	r2, r3
 8004706:	d115      	bne.n	8004734 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800470e:	4013      	ands	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004714:	4293      	cmp	r3, r2
 8004716:	d10d      	bne.n	8004734 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004722:	429a      	cmp	r2, r3
 8004724:	d106      	bne.n	8004734 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40007000 	.word	0x40007000
 8004748:	40023800 	.word	0x40023800
 800474c:	42470060 	.word	0x42470060

08004750 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0cc      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b68      	ldr	r3, [pc, #416]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d90c      	bls.n	800478c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b65      	ldr	r3, [pc, #404]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800477a:	4b63      	ldr	r3, [pc, #396]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d001      	beq.n	800478c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e0b8      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d020      	beq.n	80047da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047a4:	4b59      	ldr	r3, [pc, #356]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4a58      	ldr	r2, [pc, #352]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047bc:	4b53      	ldr	r3, [pc, #332]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a52      	ldr	r2, [pc, #328]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c8:	4b50      	ldr	r3, [pc, #320]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	494d      	ldr	r1, [pc, #308]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d044      	beq.n	8004870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d107      	bne.n	80047fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b47      	ldr	r3, [pc, #284]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d119      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e07f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d003      	beq.n	800480e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800480a:	2b03      	cmp	r3, #3
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480e:	4b3f      	ldr	r3, [pc, #252]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e06f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481e:	4b3b      	ldr	r3, [pc, #236]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e067      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482e:	4b37      	ldr	r3, [pc, #220]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 0203 	bic.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4934      	ldr	r1, [pc, #208]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	4313      	orrs	r3, r2
 800483e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004840:	f7fe f952 	bl	8002ae8 <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	e00a      	b.n	800485e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004848:	f7fe f94e 	bl	8002ae8 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e04f      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	4b2b      	ldr	r3, [pc, #172]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 020c 	and.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	429a      	cmp	r2, r3
 800486e:	d1eb      	bne.n	8004848 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004870:	4b25      	ldr	r3, [pc, #148]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d20c      	bcs.n	8004898 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b22      	ldr	r3, [pc, #136]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004886:	4b20      	ldr	r3, [pc, #128]	; (8004908 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d001      	beq.n	8004898 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e032      	b.n	80048fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4916      	ldr	r1, [pc, #88]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048c2:	4b12      	ldr	r3, [pc, #72]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	490e      	ldr	r1, [pc, #56]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048d6:	f000 f821 	bl	800491c <HAL_RCC_GetSysClockFreq>
 80048da:	4601      	mov	r1, r0
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 80048e8:	5cd3      	ldrb	r3, [r2, r3]
 80048ea:	fa21 f303 	lsr.w	r3, r1, r3
 80048ee:	4a09      	ldr	r2, [pc, #36]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048f2:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_RCC_ClockConfig+0x1c8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fe f8b2 	bl	8002a60 <HAL_InitTick>

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023c00 	.word	0x40023c00
 800490c:	40023800 	.word	0x40023800
 8004910:	080061b8 	.word	0x080061b8
 8004914:	20000468 	.word	0x20000468
 8004918:	2000046c 	.word	0x2000046c

0800491c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800491c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	607b      	str	r3, [r7, #4]
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	2300      	movs	r3, #0
 800492c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004932:	4b50      	ldr	r3, [pc, #320]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
 800493a:	2b04      	cmp	r3, #4
 800493c:	d007      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0x32>
 800493e:	2b08      	cmp	r3, #8
 8004940:	d008      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x38>
 8004942:	2b00      	cmp	r3, #0
 8004944:	f040 808d 	bne.w	8004a62 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x15c>)
 800494a:	60bb      	str	r3, [r7, #8]
       break;
 800494c:	e08c      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800494e:	4b4b      	ldr	r3, [pc, #300]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x160>)
 8004950:	60bb      	str	r3, [r7, #8]
      break;
 8004952:	e089      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004954:	4b47      	ldr	r3, [pc, #284]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800495c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800495e:	4b45      	ldr	r3, [pc, #276]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d023      	beq.n	80049b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496a:	4b42      	ldr	r3, [pc, #264]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x158>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	099b      	lsrs	r3, r3, #6
 8004970:	f04f 0400 	mov.w	r4, #0
 8004974:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	ea03 0501 	and.w	r5, r3, r1
 8004980:	ea04 0602 	and.w	r6, r4, r2
 8004984:	4a3d      	ldr	r2, [pc, #244]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x160>)
 8004986:	fb02 f106 	mul.w	r1, r2, r6
 800498a:	2200      	movs	r2, #0
 800498c:	fb02 f205 	mul.w	r2, r2, r5
 8004990:	440a      	add	r2, r1
 8004992:	493a      	ldr	r1, [pc, #232]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x160>)
 8004994:	fba5 0101 	umull	r0, r1, r5, r1
 8004998:	1853      	adds	r3, r2, r1
 800499a:	4619      	mov	r1, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f04f 0400 	mov.w	r4, #0
 80049a2:	461a      	mov	r2, r3
 80049a4:	4623      	mov	r3, r4
 80049a6:	f7fc f8cb 	bl	8000b40 <__aeabi_uldivmod>
 80049aa:	4603      	mov	r3, r0
 80049ac:	460c      	mov	r4, r1
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e049      	b.n	8004a46 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b2:	4b30      	ldr	r3, [pc, #192]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x158>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	099b      	lsrs	r3, r3, #6
 80049b8:	f04f 0400 	mov.w	r4, #0
 80049bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	ea03 0501 	and.w	r5, r3, r1
 80049c8:	ea04 0602 	and.w	r6, r4, r2
 80049cc:	4629      	mov	r1, r5
 80049ce:	4632      	mov	r2, r6
 80049d0:	f04f 0300 	mov.w	r3, #0
 80049d4:	f04f 0400 	mov.w	r4, #0
 80049d8:	0154      	lsls	r4, r2, #5
 80049da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049de:	014b      	lsls	r3, r1, #5
 80049e0:	4619      	mov	r1, r3
 80049e2:	4622      	mov	r2, r4
 80049e4:	1b49      	subs	r1, r1, r5
 80049e6:	eb62 0206 	sbc.w	r2, r2, r6
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	f04f 0400 	mov.w	r4, #0
 80049f2:	0194      	lsls	r4, r2, #6
 80049f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049f8:	018b      	lsls	r3, r1, #6
 80049fa:	1a5b      	subs	r3, r3, r1
 80049fc:	eb64 0402 	sbc.w	r4, r4, r2
 8004a00:	f04f 0100 	mov.w	r1, #0
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	00e2      	lsls	r2, r4, #3
 8004a0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a0e:	00d9      	lsls	r1, r3, #3
 8004a10:	460b      	mov	r3, r1
 8004a12:	4614      	mov	r4, r2
 8004a14:	195b      	adds	r3, r3, r5
 8004a16:	eb44 0406 	adc.w	r4, r4, r6
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	02a2      	lsls	r2, r4, #10
 8004a24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a28:	0299      	lsls	r1, r3, #10
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4614      	mov	r4, r2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	4621      	mov	r1, r4
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f04f 0400 	mov.w	r4, #0
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	f7fc f880 	bl	8000b40 <__aeabi_uldivmod>
 8004a40:	4603      	mov	r3, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	0c1b      	lsrs	r3, r3, #16
 8004a4c:	f003 0303 	and.w	r3, r3, #3
 8004a50:	3301      	adds	r3, #1
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	60bb      	str	r3, [r7, #8]
      break;
 8004a60:	e002      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a64:	60bb      	str	r3, [r7, #8]
      break;
 8004a66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a68:	68bb      	ldr	r3, [r7, #8]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800
 8004a78:	00f42400 	.word	0x00f42400
 8004a7c:	00b71b00 	.word	0x00b71b00

08004a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000468 	.word	0x20000468

08004a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a9c:	f7ff fff0 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4601      	mov	r1, r0
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	0a9b      	lsrs	r3, r3, #10
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	4a03      	ldr	r2, [pc, #12]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aae:	5cd3      	ldrb	r3, [r2, r3]
 8004ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	080061c8 	.word	0x080061c8

08004ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ac4:	f7ff ffdc 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4601      	mov	r1, r0
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0b5b      	lsrs	r3, r3, #13
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4a03      	ldr	r2, [pc, #12]	; (8004ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
 8004ad8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	080061c8 	.word	0x080061c8

08004ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e01d      	b.n	8004b36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d106      	bne.n	8004b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fd fe86 	bl	8002820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f000 fa14 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b06      	cmp	r3, #6
 8004b5e:	d007      	beq.n	8004b70 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d122      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d11b      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f06f 0202 	mvn.w	r2, #2
 8004bb2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f9a5 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004bce:	e005      	b.n	8004bdc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f997 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f9a8 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d122      	bne.n	8004c36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d11b      	bne.n	8004c36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f06f 0204 	mvn.w	r2, #4
 8004c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f97b 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004c22:	e005      	b.n	8004c30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f96d 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f97e 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d122      	bne.n	8004c8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d11b      	bne.n	8004c8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0208 	mvn.w	r2, #8
 8004c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2204      	movs	r2, #4
 8004c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f003 0303 	and.w	r3, r3, #3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f951 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004c76:	e005      	b.n	8004c84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f943 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f954 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d122      	bne.n	8004cde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d11b      	bne.n	8004cde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f06f 0210 	mvn.w	r2, #16
 8004cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2208      	movs	r2, #8
 8004cb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f927 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004cca:	e005      	b.n	8004cd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f919 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f92a 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d10e      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d107      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f06f 0201 	mvn.w	r2, #1
 8004d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fd fcb9 	bl	800267c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d10e      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d107      	bne.n	8004d36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 facf 	bl	80052d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b40      	cmp	r3, #64	; 0x40
 8004d42:	d10e      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d107      	bne.n	8004d62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f8ef 	bl	8004f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b20      	cmp	r3, #32
 8004d6e:	d10e      	bne.n	8004d8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d107      	bne.n	8004d8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f06f 0220 	mvn.w	r2, #32
 8004d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fa99 	bl	80052c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_ConfigClockSource+0x18>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e0a6      	b.n	8004efc <HAL_TIM_ConfigClockSource+0x166>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dcc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dd4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b40      	cmp	r3, #64	; 0x40
 8004de4:	d067      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x120>
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d80b      	bhi.n	8004e02 <HAL_TIM_ConfigClockSource+0x6c>
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d073      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x140>
 8004dee:	2b10      	cmp	r3, #16
 8004df0:	d802      	bhi.n	8004df8 <HAL_TIM_ConfigClockSource+0x62>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d06f      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004df6:	e078      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d06c      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x140>
 8004dfc:	2b30      	cmp	r3, #48	; 0x30
 8004dfe:	d06a      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e00:	e073      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e02:	2b70      	cmp	r3, #112	; 0x70
 8004e04:	d00d      	beq.n	8004e22 <HAL_TIM_ConfigClockSource+0x8c>
 8004e06:	2b70      	cmp	r3, #112	; 0x70
 8004e08:	d804      	bhi.n	8004e14 <HAL_TIM_ConfigClockSource+0x7e>
 8004e0a:	2b50      	cmp	r3, #80	; 0x50
 8004e0c:	d033      	beq.n	8004e76 <HAL_TIM_ConfigClockSource+0xe0>
 8004e0e:	2b60      	cmp	r3, #96	; 0x60
 8004e10:	d041      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e12:	e06a      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	d066      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x152>
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1e:	d017      	beq.n	8004e50 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e20:	e063      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	6899      	ldr	r1, [r3, #8]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f000 f9a9 	bl	8005188 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	609a      	str	r2, [r3, #8]
      break;
 8004e4e:	e04c      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	6899      	ldr	r1, [r3, #8]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f000 f992 	bl	8005188 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e72:	609a      	str	r2, [r3, #8]
      break;
 8004e74:	e039      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6818      	ldr	r0, [r3, #0]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f000 f906 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2150      	movs	r1, #80	; 0x50
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f95f 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004e94:	e029      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 f925 	bl	80050f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2160      	movs	r1, #96	; 0x60
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 f94f 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e019      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 f8e6 	bl	8005094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2140      	movs	r1, #64	; 0x40
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f93f 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e009      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f000 f936 	bl	8005152 <TIM_ITRx_SetConfig>
      break;
 8004ee6:	e000      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a40      	ldr	r2, [pc, #256]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d00f      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3d      	ldr	r2, [pc, #244]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d00b      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3c      	ldr	r2, [pc, #240]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d007      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a3b      	ldr	r2, [pc, #236]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_Base_SetConfig+0x40>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a3a      	ldr	r2, [pc, #232]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d108      	bne.n	8004fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d02b      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb4:	d027      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2c      	ldr	r2, [pc, #176]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d023      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01f      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <TIM_Base_SetConfig+0x120>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d01b      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a29      	ldr	r2, [pc, #164]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d017      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a28      	ldr	r2, [pc, #160]	; (800507c <TIM_Base_SetConfig+0x128>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a27      	ldr	r2, [pc, #156]	; (8005080 <TIM_Base_SetConfig+0x12c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00f      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a26      	ldr	r2, [pc, #152]	; (8005084 <TIM_Base_SetConfig+0x130>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d00b      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a25      	ldr	r2, [pc, #148]	; (8005088 <TIM_Base_SetConfig+0x134>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d007      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a24      	ldr	r2, [pc, #144]	; (800508c <TIM_Base_SetConfig+0x138>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a23      	ldr	r2, [pc, #140]	; (8005090 <TIM_Base_SetConfig+0x13c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689a      	ldr	r2, [r3, #8]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0xf8>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <TIM_Base_SetConfig+0x124>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d103      	bne.n	8005054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	615a      	str	r2, [r3, #20]
}
 800505a:	bf00      	nop
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	40010000 	.word	0x40010000
 800506c:	40000400 	.word	0x40000400
 8005070:	40000800 	.word	0x40000800
 8005074:	40000c00 	.word	0x40000c00
 8005078:	40010400 	.word	0x40010400
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800
 8005088:	40001800 	.word	0x40001800
 800508c:	40001c00 	.word	0x40001c00
 8005090:	40002000 	.word	0x40002000

08005094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	f023 0201 	bic.w	r2, r3, #1
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f023 030a 	bic.w	r3, r3, #10
 80050d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b087      	sub	sp, #28
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	60f8      	str	r0, [r7, #12]
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	f023 0210 	bic.w	r2, r3, #16
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800511c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	031b      	lsls	r3, r3, #12
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800512e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
 800515a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	f043 0307 	orr.w	r3, r3, #7
 8005174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	021a      	lsls	r2, r3, #8
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051dc:	2302      	movs	r3, #2
 80051de:	e05a      	b.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d022      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522c:	d01d      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d018      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a17      	ldr	r2, [pc, #92]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a15      	ldr	r2, [pc, #84]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10c      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40010000 	.word	0x40010000
 80052a8:	40000400 	.word	0x40000400
 80052ac:	40000800 	.word	0x40000800
 80052b0:	40000c00 	.word	0x40000c00
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40014000 	.word	0x40014000
 80052bc:	40001800 	.word	0x40001800

080052c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e03f      	b.n	800537a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fd fac4 	bl	800289c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2224      	movs	r2, #36	; 0x24
 8005318:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800532a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f829 	bl	8005384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691a      	ldr	r2, [r3, #16]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005340:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695a      	ldr	r2, [r3, #20]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005350:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005360:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80053c6:	f023 030c 	bic.w	r3, r3, #12
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053f2:	f040 818b 	bne.w	800570c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4ac1      	ldr	r2, [pc, #772]	; (8005700 <UART_SetConfig+0x37c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d005      	beq.n	800540c <UART_SetConfig+0x88>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4abf      	ldr	r2, [pc, #764]	; (8005704 <UART_SetConfig+0x380>)
 8005406:	4293      	cmp	r3, r2
 8005408:	f040 80bd 	bne.w	8005586 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800540c:	f7ff fb58 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 8005410:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	461d      	mov	r5, r3
 8005416:	f04f 0600 	mov.w	r6, #0
 800541a:	46a8      	mov	r8, r5
 800541c:	46b1      	mov	r9, r6
 800541e:	eb18 0308 	adds.w	r3, r8, r8
 8005422:	eb49 0409 	adc.w	r4, r9, r9
 8005426:	4698      	mov	r8, r3
 8005428:	46a1      	mov	r9, r4
 800542a:	eb18 0805 	adds.w	r8, r8, r5
 800542e:	eb49 0906 	adc.w	r9, r9, r6
 8005432:	f04f 0100 	mov.w	r1, #0
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800543e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005442:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005446:	4688      	mov	r8, r1
 8005448:	4691      	mov	r9, r2
 800544a:	eb18 0005 	adds.w	r0, r8, r5
 800544e:	eb49 0106 	adc.w	r1, r9, r6
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	461d      	mov	r5, r3
 8005458:	f04f 0600 	mov.w	r6, #0
 800545c:	196b      	adds	r3, r5, r5
 800545e:	eb46 0406 	adc.w	r4, r6, r6
 8005462:	461a      	mov	r2, r3
 8005464:	4623      	mov	r3, r4
 8005466:	f7fb fb6b 	bl	8000b40 <__aeabi_uldivmod>
 800546a:	4603      	mov	r3, r0
 800546c:	460c      	mov	r4, r1
 800546e:	461a      	mov	r2, r3
 8005470:	4ba5      	ldr	r3, [pc, #660]	; (8005708 <UART_SetConfig+0x384>)
 8005472:	fba3 2302 	umull	r2, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	461d      	mov	r5, r3
 8005480:	f04f 0600 	mov.w	r6, #0
 8005484:	46a9      	mov	r9, r5
 8005486:	46b2      	mov	sl, r6
 8005488:	eb19 0309 	adds.w	r3, r9, r9
 800548c:	eb4a 040a 	adc.w	r4, sl, sl
 8005490:	4699      	mov	r9, r3
 8005492:	46a2      	mov	sl, r4
 8005494:	eb19 0905 	adds.w	r9, r9, r5
 8005498:	eb4a 0a06 	adc.w	sl, sl, r6
 800549c:	f04f 0100 	mov.w	r1, #0
 80054a0:	f04f 0200 	mov.w	r2, #0
 80054a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054b0:	4689      	mov	r9, r1
 80054b2:	4692      	mov	sl, r2
 80054b4:	eb19 0005 	adds.w	r0, r9, r5
 80054b8:	eb4a 0106 	adc.w	r1, sl, r6
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	461d      	mov	r5, r3
 80054c2:	f04f 0600 	mov.w	r6, #0
 80054c6:	196b      	adds	r3, r5, r5
 80054c8:	eb46 0406 	adc.w	r4, r6, r6
 80054cc:	461a      	mov	r2, r3
 80054ce:	4623      	mov	r3, r4
 80054d0:	f7fb fb36 	bl	8000b40 <__aeabi_uldivmod>
 80054d4:	4603      	mov	r3, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	461a      	mov	r2, r3
 80054da:	4b8b      	ldr	r3, [pc, #556]	; (8005708 <UART_SetConfig+0x384>)
 80054dc:	fba3 1302 	umull	r1, r3, r3, r2
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	2164      	movs	r1, #100	; 0x64
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	3332      	adds	r3, #50	; 0x32
 80054ee:	4a86      	ldr	r2, [pc, #536]	; (8005708 <UART_SetConfig+0x384>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054fc:	4498      	add	r8, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	461d      	mov	r5, r3
 8005502:	f04f 0600 	mov.w	r6, #0
 8005506:	46a9      	mov	r9, r5
 8005508:	46b2      	mov	sl, r6
 800550a:	eb19 0309 	adds.w	r3, r9, r9
 800550e:	eb4a 040a 	adc.w	r4, sl, sl
 8005512:	4699      	mov	r9, r3
 8005514:	46a2      	mov	sl, r4
 8005516:	eb19 0905 	adds.w	r9, r9, r5
 800551a:	eb4a 0a06 	adc.w	sl, sl, r6
 800551e:	f04f 0100 	mov.w	r1, #0
 8005522:	f04f 0200 	mov.w	r2, #0
 8005526:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800552a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800552e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005532:	4689      	mov	r9, r1
 8005534:	4692      	mov	sl, r2
 8005536:	eb19 0005 	adds.w	r0, r9, r5
 800553a:	eb4a 0106 	adc.w	r1, sl, r6
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	461d      	mov	r5, r3
 8005544:	f04f 0600 	mov.w	r6, #0
 8005548:	196b      	adds	r3, r5, r5
 800554a:	eb46 0406 	adc.w	r4, r6, r6
 800554e:	461a      	mov	r2, r3
 8005550:	4623      	mov	r3, r4
 8005552:	f7fb faf5 	bl	8000b40 <__aeabi_uldivmod>
 8005556:	4603      	mov	r3, r0
 8005558:	460c      	mov	r4, r1
 800555a:	461a      	mov	r2, r3
 800555c:	4b6a      	ldr	r3, [pc, #424]	; (8005708 <UART_SetConfig+0x384>)
 800555e:	fba3 1302 	umull	r1, r3, r3, r2
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	2164      	movs	r1, #100	; 0x64
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	3332      	adds	r3, #50	; 0x32
 8005570:	4a65      	ldr	r2, [pc, #404]	; (8005708 <UART_SetConfig+0x384>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	f003 0207 	and.w	r2, r3, #7
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4442      	add	r2, r8
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	e26f      	b.n	8005a66 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005586:	f7ff fa87 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 800558a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	461d      	mov	r5, r3
 8005590:	f04f 0600 	mov.w	r6, #0
 8005594:	46a8      	mov	r8, r5
 8005596:	46b1      	mov	r9, r6
 8005598:	eb18 0308 	adds.w	r3, r8, r8
 800559c:	eb49 0409 	adc.w	r4, r9, r9
 80055a0:	4698      	mov	r8, r3
 80055a2:	46a1      	mov	r9, r4
 80055a4:	eb18 0805 	adds.w	r8, r8, r5
 80055a8:	eb49 0906 	adc.w	r9, r9, r6
 80055ac:	f04f 0100 	mov.w	r1, #0
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80055b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80055bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80055c0:	4688      	mov	r8, r1
 80055c2:	4691      	mov	r9, r2
 80055c4:	eb18 0005 	adds.w	r0, r8, r5
 80055c8:	eb49 0106 	adc.w	r1, r9, r6
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	461d      	mov	r5, r3
 80055d2:	f04f 0600 	mov.w	r6, #0
 80055d6:	196b      	adds	r3, r5, r5
 80055d8:	eb46 0406 	adc.w	r4, r6, r6
 80055dc:	461a      	mov	r2, r3
 80055de:	4623      	mov	r3, r4
 80055e0:	f7fb faae 	bl	8000b40 <__aeabi_uldivmod>
 80055e4:	4603      	mov	r3, r0
 80055e6:	460c      	mov	r4, r1
 80055e8:	461a      	mov	r2, r3
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <UART_SetConfig+0x384>)
 80055ec:	fba3 2302 	umull	r2, r3, r3, r2
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	461d      	mov	r5, r3
 80055fa:	f04f 0600 	mov.w	r6, #0
 80055fe:	46a9      	mov	r9, r5
 8005600:	46b2      	mov	sl, r6
 8005602:	eb19 0309 	adds.w	r3, r9, r9
 8005606:	eb4a 040a 	adc.w	r4, sl, sl
 800560a:	4699      	mov	r9, r3
 800560c:	46a2      	mov	sl, r4
 800560e:	eb19 0905 	adds.w	r9, r9, r5
 8005612:	eb4a 0a06 	adc.w	sl, sl, r6
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005622:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005626:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800562a:	4689      	mov	r9, r1
 800562c:	4692      	mov	sl, r2
 800562e:	eb19 0005 	adds.w	r0, r9, r5
 8005632:	eb4a 0106 	adc.w	r1, sl, r6
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	461d      	mov	r5, r3
 800563c:	f04f 0600 	mov.w	r6, #0
 8005640:	196b      	adds	r3, r5, r5
 8005642:	eb46 0406 	adc.w	r4, r6, r6
 8005646:	461a      	mov	r2, r3
 8005648:	4623      	mov	r3, r4
 800564a:	f7fb fa79 	bl	8000b40 <__aeabi_uldivmod>
 800564e:	4603      	mov	r3, r0
 8005650:	460c      	mov	r4, r1
 8005652:	461a      	mov	r2, r3
 8005654:	4b2c      	ldr	r3, [pc, #176]	; (8005708 <UART_SetConfig+0x384>)
 8005656:	fba3 1302 	umull	r1, r3, r3, r2
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2164      	movs	r1, #100	; 0x64
 800565e:	fb01 f303 	mul.w	r3, r1, r3
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	3332      	adds	r3, #50	; 0x32
 8005668:	4a27      	ldr	r2, [pc, #156]	; (8005708 <UART_SetConfig+0x384>)
 800566a:	fba2 2303 	umull	r2, r3, r2, r3
 800566e:	095b      	lsrs	r3, r3, #5
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005676:	4498      	add	r8, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	461d      	mov	r5, r3
 800567c:	f04f 0600 	mov.w	r6, #0
 8005680:	46a9      	mov	r9, r5
 8005682:	46b2      	mov	sl, r6
 8005684:	eb19 0309 	adds.w	r3, r9, r9
 8005688:	eb4a 040a 	adc.w	r4, sl, sl
 800568c:	4699      	mov	r9, r3
 800568e:	46a2      	mov	sl, r4
 8005690:	eb19 0905 	adds.w	r9, r9, r5
 8005694:	eb4a 0a06 	adc.w	sl, sl, r6
 8005698:	f04f 0100 	mov.w	r1, #0
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80056ac:	4689      	mov	r9, r1
 80056ae:	4692      	mov	sl, r2
 80056b0:	eb19 0005 	adds.w	r0, r9, r5
 80056b4:	eb4a 0106 	adc.w	r1, sl, r6
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	461d      	mov	r5, r3
 80056be:	f04f 0600 	mov.w	r6, #0
 80056c2:	196b      	adds	r3, r5, r5
 80056c4:	eb46 0406 	adc.w	r4, r6, r6
 80056c8:	461a      	mov	r2, r3
 80056ca:	4623      	mov	r3, r4
 80056cc:	f7fb fa38 	bl	8000b40 <__aeabi_uldivmod>
 80056d0:	4603      	mov	r3, r0
 80056d2:	460c      	mov	r4, r1
 80056d4:	461a      	mov	r2, r3
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <UART_SetConfig+0x384>)
 80056d8:	fba3 1302 	umull	r1, r3, r3, r2
 80056dc:	095b      	lsrs	r3, r3, #5
 80056de:	2164      	movs	r1, #100	; 0x64
 80056e0:	fb01 f303 	mul.w	r3, r1, r3
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	3332      	adds	r3, #50	; 0x32
 80056ea:	4a07      	ldr	r2, [pc, #28]	; (8005708 <UART_SetConfig+0x384>)
 80056ec:	fba2 2303 	umull	r2, r3, r2, r3
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	f003 0207 	and.w	r2, r3, #7
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4442      	add	r2, r8
 80056fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80056fe:	e1b2      	b.n	8005a66 <UART_SetConfig+0x6e2>
 8005700:	40011000 	.word	0x40011000
 8005704:	40011400 	.word	0x40011400
 8005708:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4ad7      	ldr	r2, [pc, #860]	; (8005a70 <UART_SetConfig+0x6ec>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d005      	beq.n	8005722 <UART_SetConfig+0x39e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4ad6      	ldr	r2, [pc, #856]	; (8005a74 <UART_SetConfig+0x6f0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	f040 80d1 	bne.w	80058c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005722:	f7ff f9cd 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 8005726:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	469a      	mov	sl, r3
 800572c:	f04f 0b00 	mov.w	fp, #0
 8005730:	46d0      	mov	r8, sl
 8005732:	46d9      	mov	r9, fp
 8005734:	eb18 0308 	adds.w	r3, r8, r8
 8005738:	eb49 0409 	adc.w	r4, r9, r9
 800573c:	4698      	mov	r8, r3
 800573e:	46a1      	mov	r9, r4
 8005740:	eb18 080a 	adds.w	r8, r8, sl
 8005744:	eb49 090b 	adc.w	r9, r9, fp
 8005748:	f04f 0100 	mov.w	r1, #0
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005754:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005758:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800575c:	4688      	mov	r8, r1
 800575e:	4691      	mov	r9, r2
 8005760:	eb1a 0508 	adds.w	r5, sl, r8
 8005764:	eb4b 0609 	adc.w	r6, fp, r9
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	4619      	mov	r1, r3
 800576e:	f04f 0200 	mov.w	r2, #0
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	f04f 0400 	mov.w	r4, #0
 800577a:	0094      	lsls	r4, r2, #2
 800577c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005780:	008b      	lsls	r3, r1, #2
 8005782:	461a      	mov	r2, r3
 8005784:	4623      	mov	r3, r4
 8005786:	4628      	mov	r0, r5
 8005788:	4631      	mov	r1, r6
 800578a:	f7fb f9d9 	bl	8000b40 <__aeabi_uldivmod>
 800578e:	4603      	mov	r3, r0
 8005790:	460c      	mov	r4, r1
 8005792:	461a      	mov	r2, r3
 8005794:	4bb8      	ldr	r3, [pc, #736]	; (8005a78 <UART_SetConfig+0x6f4>)
 8005796:	fba3 2302 	umull	r2, r3, r3, r2
 800579a:	095b      	lsrs	r3, r3, #5
 800579c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	469b      	mov	fp, r3
 80057a4:	f04f 0c00 	mov.w	ip, #0
 80057a8:	46d9      	mov	r9, fp
 80057aa:	46e2      	mov	sl, ip
 80057ac:	eb19 0309 	adds.w	r3, r9, r9
 80057b0:	eb4a 040a 	adc.w	r4, sl, sl
 80057b4:	4699      	mov	r9, r3
 80057b6:	46a2      	mov	sl, r4
 80057b8:	eb19 090b 	adds.w	r9, r9, fp
 80057bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057c0:	f04f 0100 	mov.w	r1, #0
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057d4:	4689      	mov	r9, r1
 80057d6:	4692      	mov	sl, r2
 80057d8:	eb1b 0509 	adds.w	r5, fp, r9
 80057dc:	eb4c 060a 	adc.w	r6, ip, sl
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4619      	mov	r1, r3
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	f04f 0400 	mov.w	r4, #0
 80057f2:	0094      	lsls	r4, r2, #2
 80057f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057f8:	008b      	lsls	r3, r1, #2
 80057fa:	461a      	mov	r2, r3
 80057fc:	4623      	mov	r3, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	4631      	mov	r1, r6
 8005802:	f7fb f99d 	bl	8000b40 <__aeabi_uldivmod>
 8005806:	4603      	mov	r3, r0
 8005808:	460c      	mov	r4, r1
 800580a:	461a      	mov	r2, r3
 800580c:	4b9a      	ldr	r3, [pc, #616]	; (8005a78 <UART_SetConfig+0x6f4>)
 800580e:	fba3 1302 	umull	r1, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	2164      	movs	r1, #100	; 0x64
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	3332      	adds	r3, #50	; 0x32
 8005820:	4a95      	ldr	r2, [pc, #596]	; (8005a78 <UART_SetConfig+0x6f4>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800582c:	4498      	add	r8, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	469b      	mov	fp, r3
 8005832:	f04f 0c00 	mov.w	ip, #0
 8005836:	46d9      	mov	r9, fp
 8005838:	46e2      	mov	sl, ip
 800583a:	eb19 0309 	adds.w	r3, r9, r9
 800583e:	eb4a 040a 	adc.w	r4, sl, sl
 8005842:	4699      	mov	r9, r3
 8005844:	46a2      	mov	sl, r4
 8005846:	eb19 090b 	adds.w	r9, r9, fp
 800584a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800584e:	f04f 0100 	mov.w	r1, #0
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800585a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800585e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005862:	4689      	mov	r9, r1
 8005864:	4692      	mov	sl, r2
 8005866:	eb1b 0509 	adds.w	r5, fp, r9
 800586a:	eb4c 060a 	adc.w	r6, ip, sl
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	4619      	mov	r1, r3
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	f04f 0400 	mov.w	r4, #0
 8005880:	0094      	lsls	r4, r2, #2
 8005882:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005886:	008b      	lsls	r3, r1, #2
 8005888:	461a      	mov	r2, r3
 800588a:	4623      	mov	r3, r4
 800588c:	4628      	mov	r0, r5
 800588e:	4631      	mov	r1, r6
 8005890:	f7fb f956 	bl	8000b40 <__aeabi_uldivmod>
 8005894:	4603      	mov	r3, r0
 8005896:	460c      	mov	r4, r1
 8005898:	461a      	mov	r2, r3
 800589a:	4b77      	ldr	r3, [pc, #476]	; (8005a78 <UART_SetConfig+0x6f4>)
 800589c:	fba3 1302 	umull	r1, r3, r3, r2
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	2164      	movs	r1, #100	; 0x64
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	3332      	adds	r3, #50	; 0x32
 80058ae:	4a72      	ldr	r2, [pc, #456]	; (8005a78 <UART_SetConfig+0x6f4>)
 80058b0:	fba2 2303 	umull	r2, r3, r2, r3
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4442      	add	r2, r8
 80058c0:	609a      	str	r2, [r3, #8]
 80058c2:	e0d0      	b.n	8005a66 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80058c4:	f7ff f8e8 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 80058c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	469a      	mov	sl, r3
 80058ce:	f04f 0b00 	mov.w	fp, #0
 80058d2:	46d0      	mov	r8, sl
 80058d4:	46d9      	mov	r9, fp
 80058d6:	eb18 0308 	adds.w	r3, r8, r8
 80058da:	eb49 0409 	adc.w	r4, r9, r9
 80058de:	4698      	mov	r8, r3
 80058e0:	46a1      	mov	r9, r4
 80058e2:	eb18 080a 	adds.w	r8, r8, sl
 80058e6:	eb49 090b 	adc.w	r9, r9, fp
 80058ea:	f04f 0100 	mov.w	r1, #0
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058fe:	4688      	mov	r8, r1
 8005900:	4691      	mov	r9, r2
 8005902:	eb1a 0508 	adds.w	r5, sl, r8
 8005906:	eb4b 0609 	adc.w	r6, fp, r9
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	4619      	mov	r1, r3
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	f04f 0400 	mov.w	r4, #0
 800591c:	0094      	lsls	r4, r2, #2
 800591e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005922:	008b      	lsls	r3, r1, #2
 8005924:	461a      	mov	r2, r3
 8005926:	4623      	mov	r3, r4
 8005928:	4628      	mov	r0, r5
 800592a:	4631      	mov	r1, r6
 800592c:	f7fb f908 	bl	8000b40 <__aeabi_uldivmod>
 8005930:	4603      	mov	r3, r0
 8005932:	460c      	mov	r4, r1
 8005934:	461a      	mov	r2, r3
 8005936:	4b50      	ldr	r3, [pc, #320]	; (8005a78 <UART_SetConfig+0x6f4>)
 8005938:	fba3 2302 	umull	r2, r3, r3, r2
 800593c:	095b      	lsrs	r3, r3, #5
 800593e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	469b      	mov	fp, r3
 8005946:	f04f 0c00 	mov.w	ip, #0
 800594a:	46d9      	mov	r9, fp
 800594c:	46e2      	mov	sl, ip
 800594e:	eb19 0309 	adds.w	r3, r9, r9
 8005952:	eb4a 040a 	adc.w	r4, sl, sl
 8005956:	4699      	mov	r9, r3
 8005958:	46a2      	mov	sl, r4
 800595a:	eb19 090b 	adds.w	r9, r9, fp
 800595e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005962:	f04f 0100 	mov.w	r1, #0
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800596e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005972:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005976:	4689      	mov	r9, r1
 8005978:	4692      	mov	sl, r2
 800597a:	eb1b 0509 	adds.w	r5, fp, r9
 800597e:	eb4c 060a 	adc.w	r6, ip, sl
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	4619      	mov	r1, r3
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	f04f 0400 	mov.w	r4, #0
 8005994:	0094      	lsls	r4, r2, #2
 8005996:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800599a:	008b      	lsls	r3, r1, #2
 800599c:	461a      	mov	r2, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	4628      	mov	r0, r5
 80059a2:	4631      	mov	r1, r6
 80059a4:	f7fb f8cc 	bl	8000b40 <__aeabi_uldivmod>
 80059a8:	4603      	mov	r3, r0
 80059aa:	460c      	mov	r4, r1
 80059ac:	461a      	mov	r2, r3
 80059ae:	4b32      	ldr	r3, [pc, #200]	; (8005a78 <UART_SetConfig+0x6f4>)
 80059b0:	fba3 1302 	umull	r1, r3, r3, r2
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	2164      	movs	r1, #100	; 0x64
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	3332      	adds	r3, #50	; 0x32
 80059c2:	4a2d      	ldr	r2, [pc, #180]	; (8005a78 <UART_SetConfig+0x6f4>)
 80059c4:	fba2 2303 	umull	r2, r3, r2, r3
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ce:	4498      	add	r8, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	469b      	mov	fp, r3
 80059d4:	f04f 0c00 	mov.w	ip, #0
 80059d8:	46d9      	mov	r9, fp
 80059da:	46e2      	mov	sl, ip
 80059dc:	eb19 0309 	adds.w	r3, r9, r9
 80059e0:	eb4a 040a 	adc.w	r4, sl, sl
 80059e4:	4699      	mov	r9, r3
 80059e6:	46a2      	mov	sl, r4
 80059e8:	eb19 090b 	adds.w	r9, r9, fp
 80059ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059f0:	f04f 0100 	mov.w	r1, #0
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a04:	4689      	mov	r9, r1
 8005a06:	4692      	mov	sl, r2
 8005a08:	eb1b 0509 	adds.w	r5, fp, r9
 8005a0c:	eb4c 060a 	adc.w	r6, ip, sl
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	4619      	mov	r1, r3
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	f04f 0300 	mov.w	r3, #0
 8005a1e:	f04f 0400 	mov.w	r4, #0
 8005a22:	0094      	lsls	r4, r2, #2
 8005a24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a28:	008b      	lsls	r3, r1, #2
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	4623      	mov	r3, r4
 8005a2e:	4628      	mov	r0, r5
 8005a30:	4631      	mov	r1, r6
 8005a32:	f7fb f885 	bl	8000b40 <__aeabi_uldivmod>
 8005a36:	4603      	mov	r3, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <UART_SetConfig+0x6f4>)
 8005a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	2164      	movs	r1, #100	; 0x64
 8005a46:	fb01 f303 	mul.w	r3, r1, r3
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	3332      	adds	r3, #50	; 0x32
 8005a50:	4a09      	ldr	r2, [pc, #36]	; (8005a78 <UART_SetConfig+0x6f4>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	f003 020f 	and.w	r2, r3, #15
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4442      	add	r2, r8
 8005a62:	609a      	str	r2, [r3, #8]
}
 8005a64:	e7ff      	b.n	8005a66 <UART_SetConfig+0x6e2>
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a70:	40011000 	.word	0x40011000
 8005a74:	40011400 	.word	0x40011400
 8005a78:	51eb851f 	.word	0x51eb851f

08005a7c <_ZdlPvj>:
 8005a7c:	f000 b800 	b.w	8005a80 <_ZdlPv>

08005a80 <_ZdlPv>:
 8005a80:	f000 bb16 	b.w	80060b0 <free>

08005a84 <atanf>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	ee10 5a10 	vmov	r5, s0
 8005a8a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005a8e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8005a92:	eef0 7a40 	vmov.f32	s15, s0
 8005a96:	db10      	blt.n	8005aba <atanf+0x36>
 8005a98:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005a9c:	dd04      	ble.n	8005aa8 <atanf+0x24>
 8005a9e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8005aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8005aa6:	bd38      	pop	{r3, r4, r5, pc}
 8005aa8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005be0 <atanf+0x15c>
 8005aac:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8005be4 <atanf+0x160>
 8005ab0:	2d00      	cmp	r5, #0
 8005ab2:	bfd8      	it	le
 8005ab4:	eef0 7a47 	vmovle.f32	s15, s14
 8005ab8:	e7f3      	b.n	8005aa2 <atanf+0x1e>
 8005aba:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <atanf+0x164>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	dc10      	bgt.n	8005ae2 <atanf+0x5e>
 8005ac0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005ac4:	da0a      	bge.n	8005adc <atanf+0x58>
 8005ac6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005bec <atanf+0x168>
 8005aca:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ada:	dce2      	bgt.n	8005aa2 <atanf+0x1e>
 8005adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ae0:	e013      	b.n	8005b0a <atanf+0x86>
 8005ae2:	f000 f8a3 	bl	8005c2c <fabsf>
 8005ae6:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <atanf+0x16c>)
 8005ae8:	429c      	cmp	r4, r3
 8005aea:	dc4f      	bgt.n	8005b8c <atanf+0x108>
 8005aec:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005af0:	429c      	cmp	r4, r3
 8005af2:	dc41      	bgt.n	8005b78 <atanf+0xf4>
 8005af4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005af8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005afc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005b00:	2300      	movs	r3, #0
 8005b02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005b06:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005b10:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005bf4 <atanf+0x170>
 8005b14:	eddf 5a38 	vldr	s11, [pc, #224]	; 8005bf8 <atanf+0x174>
 8005b18:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8005bfc <atanf+0x178>
 8005b1c:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005b20:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005b24:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005c00 <atanf+0x17c>
 8005b28:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005b2c:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005c04 <atanf+0x180>
 8005b30:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005b34:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005c08 <atanf+0x184>
 8005b38:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005b3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005c0c <atanf+0x188>
 8005b40:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005b44:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005c10 <atanf+0x18c>
 8005b48:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005b4c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005c14 <atanf+0x190>
 8005b50:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005b54:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8005c18 <atanf+0x194>
 8005b58:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005b5c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005c1c <atanf+0x198>
 8005b60:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005b64:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005b68:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005b6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b70:	d121      	bne.n	8005bb6 <atanf+0x132>
 8005b72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b76:	e794      	b.n	8005aa2 <atanf+0x1e>
 8005b78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005b7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005b80:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005b84:	2301      	movs	r3, #1
 8005b86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005b8a:	e7be      	b.n	8005b0a <atanf+0x86>
 8005b8c:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <atanf+0x19c>)
 8005b8e:	429c      	cmp	r4, r3
 8005b90:	dc0b      	bgt.n	8005baa <atanf+0x126>
 8005b92:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8005b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b9a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ba8:	e7af      	b.n	8005b0a <atanf+0x86>
 8005baa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005bae:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e7a9      	b.n	8005b0a <atanf+0x86>
 8005bb6:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <atanf+0x1a0>)
 8005bb8:	491b      	ldr	r1, [pc, #108]	; (8005c28 <atanf+0x1a4>)
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	440b      	add	r3, r1
 8005bc0:	edd3 6a00 	vldr	s13, [r3]
 8005bc4:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005bc8:	2d00      	cmp	r5, #0
 8005bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bce:	ed92 7a00 	vldr	s14, [r2]
 8005bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bd6:	bfb8      	it	lt
 8005bd8:	eef1 7a67 	vneglt.f32	s15, s15
 8005bdc:	e761      	b.n	8005aa2 <atanf+0x1e>
 8005bde:	bf00      	nop
 8005be0:	bfc90fdb 	.word	0xbfc90fdb
 8005be4:	3fc90fdb 	.word	0x3fc90fdb
 8005be8:	3edfffff 	.word	0x3edfffff
 8005bec:	7149f2ca 	.word	0x7149f2ca
 8005bf0:	3f97ffff 	.word	0x3f97ffff
 8005bf4:	3c8569d7 	.word	0x3c8569d7
 8005bf8:	3d4bda59 	.word	0x3d4bda59
 8005bfc:	bd6ef16b 	.word	0xbd6ef16b
 8005c00:	3d886b35 	.word	0x3d886b35
 8005c04:	3dba2e6e 	.word	0x3dba2e6e
 8005c08:	3e124925 	.word	0x3e124925
 8005c0c:	3eaaaaab 	.word	0x3eaaaaab
 8005c10:	bd15a221 	.word	0xbd15a221
 8005c14:	bd9d8795 	.word	0xbd9d8795
 8005c18:	bde38e38 	.word	0xbde38e38
 8005c1c:	be4ccccd 	.word	0xbe4ccccd
 8005c20:	401bffff 	.word	0x401bffff
 8005c24:	080061d0 	.word	0x080061d0
 8005c28:	080061e0 	.word	0x080061e0

08005c2c <fabsf>:
 8005c2c:	ee10 3a10 	vmov	r3, s0
 8005c30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c34:	ee00 3a10 	vmov	s0, r3
 8005c38:	4770      	bx	lr
	...

08005c3c <sqrt>:
 8005c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c40:	ed2d 8b02 	vpush	{d8}
 8005c44:	b08b      	sub	sp, #44	; 0x2c
 8005c46:	ec55 4b10 	vmov	r4, r5, d0
 8005c4a:	f000 f8a3 	bl	8005d94 <__ieee754_sqrt>
 8005c4e:	4b26      	ldr	r3, [pc, #152]	; (8005ce8 <sqrt+0xac>)
 8005c50:	eeb0 8a40 	vmov.f32	s16, s0
 8005c54:	eef0 8a60 	vmov.f32	s17, s1
 8005c58:	f993 6000 	ldrsb.w	r6, [r3]
 8005c5c:	1c73      	adds	r3, r6, #1
 8005c5e:	d02a      	beq.n	8005cb6 <sqrt+0x7a>
 8005c60:	4622      	mov	r2, r4
 8005c62:	462b      	mov	r3, r5
 8005c64:	4620      	mov	r0, r4
 8005c66:	4629      	mov	r1, r5
 8005c68:	f7fa ff04 	bl	8000a74 <__aeabi_dcmpun>
 8005c6c:	4607      	mov	r7, r0
 8005c6e:	bb10      	cbnz	r0, 8005cb6 <sqrt+0x7a>
 8005c70:	f04f 0800 	mov.w	r8, #0
 8005c74:	f04f 0900 	mov.w	r9, #0
 8005c78:	4642      	mov	r2, r8
 8005c7a:	464b      	mov	r3, r9
 8005c7c:	4620      	mov	r0, r4
 8005c7e:	4629      	mov	r1, r5
 8005c80:	f7fa fed0 	bl	8000a24 <__aeabi_dcmplt>
 8005c84:	b1b8      	cbz	r0, 8005cb6 <sqrt+0x7a>
 8005c86:	2301      	movs	r3, #1
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	4b18      	ldr	r3, [pc, #96]	; (8005cec <sqrt+0xb0>)
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	9708      	str	r7, [sp, #32]
 8005c90:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005c94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005c98:	b9b6      	cbnz	r6, 8005cc8 <sqrt+0x8c>
 8005c9a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005c9e:	4668      	mov	r0, sp
 8005ca0:	f000 f9d9 	bl	8006056 <matherr>
 8005ca4:	b1d0      	cbz	r0, 8005cdc <sqrt+0xa0>
 8005ca6:	9b08      	ldr	r3, [sp, #32]
 8005ca8:	b11b      	cbz	r3, 8005cb2 <sqrt+0x76>
 8005caa:	f000 f9d7 	bl	800605c <__errno>
 8005cae:	9b08      	ldr	r3, [sp, #32]
 8005cb0:	6003      	str	r3, [r0, #0]
 8005cb2:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005cb6:	eeb0 0a48 	vmov.f32	s0, s16
 8005cba:	eef0 0a68 	vmov.f32	s1, s17
 8005cbe:	b00b      	add	sp, #44	; 0x2c
 8005cc0:	ecbd 8b02 	vpop	{d8}
 8005cc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cc8:	4642      	mov	r2, r8
 8005cca:	464b      	mov	r3, r9
 8005ccc:	4640      	mov	r0, r8
 8005cce:	4649      	mov	r1, r9
 8005cd0:	f7fa fd60 	bl	8000794 <__aeabi_ddiv>
 8005cd4:	2e02      	cmp	r6, #2
 8005cd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005cda:	d1e0      	bne.n	8005c9e <sqrt+0x62>
 8005cdc:	f000 f9be 	bl	800605c <__errno>
 8005ce0:	2321      	movs	r3, #33	; 0x21
 8005ce2:	6003      	str	r3, [r0, #0]
 8005ce4:	e7df      	b.n	8005ca6 <sqrt+0x6a>
 8005ce6:	bf00      	nop
 8005ce8:	20000471 	.word	0x20000471
 8005cec:	080061f0 	.word	0x080061f0

08005cf0 <atan2f>:
 8005cf0:	f000 b900 	b.w	8005ef4 <__ieee754_atan2f>

08005cf4 <sqrtf>:
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	ed2d 8b02 	vpush	{d8}
 8005cfa:	b08a      	sub	sp, #40	; 0x28
 8005cfc:	eeb0 8a40 	vmov.f32	s16, s0
 8005d00:	f000 f9a6 	bl	8006050 <__ieee754_sqrtf>
 8005d04:	4b21      	ldr	r3, [pc, #132]	; (8005d8c <sqrtf+0x98>)
 8005d06:	f993 4000 	ldrsb.w	r4, [r3]
 8005d0a:	1c63      	adds	r3, r4, #1
 8005d0c:	d02c      	beq.n	8005d68 <sqrtf+0x74>
 8005d0e:	eeb4 8a48 	vcmp.f32	s16, s16
 8005d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d16:	d627      	bvs.n	8005d68 <sqrtf+0x74>
 8005d18:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d20:	d522      	bpl.n	8005d68 <sqrtf+0x74>
 8005d22:	2301      	movs	r3, #1
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	4b1a      	ldr	r3, [pc, #104]	; (8005d90 <sqrtf+0x9c>)
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	ee18 0a10 	vmov	r0, s16
 8005d2e:	2300      	movs	r3, #0
 8005d30:	9308      	str	r3, [sp, #32]
 8005d32:	f7fa fbad 	bl	8000490 <__aeabi_f2d>
 8005d36:	2200      	movs	r2, #0
 8005d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d40:	2300      	movs	r3, #0
 8005d42:	b9ac      	cbnz	r4, 8005d70 <sqrtf+0x7c>
 8005d44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d48:	4668      	mov	r0, sp
 8005d4a:	f000 f984 	bl	8006056 <matherr>
 8005d4e:	b1b8      	cbz	r0, 8005d80 <sqrtf+0x8c>
 8005d50:	9b08      	ldr	r3, [sp, #32]
 8005d52:	b11b      	cbz	r3, 8005d5c <sqrtf+0x68>
 8005d54:	f000 f982 	bl	800605c <__errno>
 8005d58:	9b08      	ldr	r3, [sp, #32]
 8005d5a:	6003      	str	r3, [r0, #0]
 8005d5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d60:	f7fa fe9e 	bl	8000aa0 <__aeabi_d2f>
 8005d64:	ee00 0a10 	vmov	s0, r0
 8005d68:	b00a      	add	sp, #40	; 0x28
 8005d6a:	ecbd 8b02 	vpop	{d8}
 8005d6e:	bd10      	pop	{r4, pc}
 8005d70:	4610      	mov	r0, r2
 8005d72:	4619      	mov	r1, r3
 8005d74:	f7fa fd0e 	bl	8000794 <__aeabi_ddiv>
 8005d78:	2c02      	cmp	r4, #2
 8005d7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d7e:	d1e3      	bne.n	8005d48 <sqrtf+0x54>
 8005d80:	f000 f96c 	bl	800605c <__errno>
 8005d84:	2321      	movs	r3, #33	; 0x21
 8005d86:	6003      	str	r3, [r0, #0]
 8005d88:	e7e2      	b.n	8005d50 <sqrtf+0x5c>
 8005d8a:	bf00      	nop
 8005d8c:	20000471 	.word	0x20000471
 8005d90:	080061f5 	.word	0x080061f5

08005d94 <__ieee754_sqrt>:
 8005d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d98:	4955      	ldr	r1, [pc, #340]	; (8005ef0 <__ieee754_sqrt+0x15c>)
 8005d9a:	ec55 4b10 	vmov	r4, r5, d0
 8005d9e:	43a9      	bics	r1, r5
 8005da0:	462b      	mov	r3, r5
 8005da2:	462a      	mov	r2, r5
 8005da4:	d112      	bne.n	8005dcc <__ieee754_sqrt+0x38>
 8005da6:	ee10 2a10 	vmov	r2, s0
 8005daa:	ee10 0a10 	vmov	r0, s0
 8005dae:	4629      	mov	r1, r5
 8005db0:	f7fa fbc6 	bl	8000540 <__aeabi_dmul>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4620      	mov	r0, r4
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f7fa fa0a 	bl	80001d4 <__adddf3>
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	460d      	mov	r5, r1
 8005dc4:	ec45 4b10 	vmov	d0, r4, r5
 8005dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dcc:	2d00      	cmp	r5, #0
 8005dce:	ee10 0a10 	vmov	r0, s0
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	dc0f      	bgt.n	8005df6 <__ieee754_sqrt+0x62>
 8005dd6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005dda:	4330      	orrs	r0, r6
 8005ddc:	d0f2      	beq.n	8005dc4 <__ieee754_sqrt+0x30>
 8005dde:	b155      	cbz	r5, 8005df6 <__ieee754_sqrt+0x62>
 8005de0:	ee10 2a10 	vmov	r2, s0
 8005de4:	4620      	mov	r0, r4
 8005de6:	4629      	mov	r1, r5
 8005de8:	f7fa f9f2 	bl	80001d0 <__aeabi_dsub>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	f7fa fcd0 	bl	8000794 <__aeabi_ddiv>
 8005df4:	e7e4      	b.n	8005dc0 <__ieee754_sqrt+0x2c>
 8005df6:	151b      	asrs	r3, r3, #20
 8005df8:	d073      	beq.n	8005ee2 <__ieee754_sqrt+0x14e>
 8005dfa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005dfe:	07dd      	lsls	r5, r3, #31
 8005e00:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005e04:	bf48      	it	mi
 8005e06:	0fc8      	lsrmi	r0, r1, #31
 8005e08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005e0c:	bf44      	itt	mi
 8005e0e:	0049      	lslmi	r1, r1, #1
 8005e10:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8005e14:	2500      	movs	r5, #0
 8005e16:	1058      	asrs	r0, r3, #1
 8005e18:	0fcb      	lsrs	r3, r1, #31
 8005e1a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005e1e:	0049      	lsls	r1, r1, #1
 8005e20:	2316      	movs	r3, #22
 8005e22:	462c      	mov	r4, r5
 8005e24:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005e28:	19a7      	adds	r7, r4, r6
 8005e2a:	4297      	cmp	r7, r2
 8005e2c:	bfde      	ittt	le
 8005e2e:	19bc      	addle	r4, r7, r6
 8005e30:	1bd2      	suble	r2, r2, r7
 8005e32:	19ad      	addle	r5, r5, r6
 8005e34:	0fcf      	lsrs	r7, r1, #31
 8005e36:	3b01      	subs	r3, #1
 8005e38:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005e3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005e40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e44:	d1f0      	bne.n	8005e28 <__ieee754_sqrt+0x94>
 8005e46:	f04f 0c20 	mov.w	ip, #32
 8005e4a:	469e      	mov	lr, r3
 8005e4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005e50:	42a2      	cmp	r2, r4
 8005e52:	eb06 070e 	add.w	r7, r6, lr
 8005e56:	dc02      	bgt.n	8005e5e <__ieee754_sqrt+0xca>
 8005e58:	d112      	bne.n	8005e80 <__ieee754_sqrt+0xec>
 8005e5a:	428f      	cmp	r7, r1
 8005e5c:	d810      	bhi.n	8005e80 <__ieee754_sqrt+0xec>
 8005e5e:	2f00      	cmp	r7, #0
 8005e60:	eb07 0e06 	add.w	lr, r7, r6
 8005e64:	da42      	bge.n	8005eec <__ieee754_sqrt+0x158>
 8005e66:	f1be 0f00 	cmp.w	lr, #0
 8005e6a:	db3f      	blt.n	8005eec <__ieee754_sqrt+0x158>
 8005e6c:	f104 0801 	add.w	r8, r4, #1
 8005e70:	1b12      	subs	r2, r2, r4
 8005e72:	428f      	cmp	r7, r1
 8005e74:	bf88      	it	hi
 8005e76:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8005e7a:	1bc9      	subs	r1, r1, r7
 8005e7c:	4433      	add	r3, r6
 8005e7e:	4644      	mov	r4, r8
 8005e80:	0052      	lsls	r2, r2, #1
 8005e82:	f1bc 0c01 	subs.w	ip, ip, #1
 8005e86:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005e8a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005e8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005e92:	d1dd      	bne.n	8005e50 <__ieee754_sqrt+0xbc>
 8005e94:	430a      	orrs	r2, r1
 8005e96:	d006      	beq.n	8005ea6 <__ieee754_sqrt+0x112>
 8005e98:	1c5c      	adds	r4, r3, #1
 8005e9a:	bf13      	iteet	ne
 8005e9c:	3301      	addne	r3, #1
 8005e9e:	3501      	addeq	r5, #1
 8005ea0:	4663      	moveq	r3, ip
 8005ea2:	f023 0301 	bicne.w	r3, r3, #1
 8005ea6:	106a      	asrs	r2, r5, #1
 8005ea8:	085b      	lsrs	r3, r3, #1
 8005eaa:	07e9      	lsls	r1, r5, #31
 8005eac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005eb0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005eb4:	bf48      	it	mi
 8005eb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005eba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005ebe:	461c      	mov	r4, r3
 8005ec0:	e780      	b.n	8005dc4 <__ieee754_sqrt+0x30>
 8005ec2:	0aca      	lsrs	r2, r1, #11
 8005ec4:	3815      	subs	r0, #21
 8005ec6:	0549      	lsls	r1, r1, #21
 8005ec8:	2a00      	cmp	r2, #0
 8005eca:	d0fa      	beq.n	8005ec2 <__ieee754_sqrt+0x12e>
 8005ecc:	02d6      	lsls	r6, r2, #11
 8005ece:	d50a      	bpl.n	8005ee6 <__ieee754_sqrt+0x152>
 8005ed0:	f1c3 0420 	rsb	r4, r3, #32
 8005ed4:	fa21 f404 	lsr.w	r4, r1, r4
 8005ed8:	1e5d      	subs	r5, r3, #1
 8005eda:	4099      	lsls	r1, r3
 8005edc:	4322      	orrs	r2, r4
 8005ede:	1b43      	subs	r3, r0, r5
 8005ee0:	e78b      	b.n	8005dfa <__ieee754_sqrt+0x66>
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	e7f0      	b.n	8005ec8 <__ieee754_sqrt+0x134>
 8005ee6:	0052      	lsls	r2, r2, #1
 8005ee8:	3301      	adds	r3, #1
 8005eea:	e7ef      	b.n	8005ecc <__ieee754_sqrt+0x138>
 8005eec:	46a0      	mov	r8, r4
 8005eee:	e7bf      	b.n	8005e70 <__ieee754_sqrt+0xdc>
 8005ef0:	7ff00000 	.word	0x7ff00000

08005ef4 <__ieee754_atan2f>:
 8005ef4:	ee10 2a90 	vmov	r2, s1
 8005ef8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8005efc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005f00:	b510      	push	{r4, lr}
 8005f02:	eef0 7a40 	vmov.f32	s15, s0
 8005f06:	dc06      	bgt.n	8005f16 <__ieee754_atan2f+0x22>
 8005f08:	ee10 0a10 	vmov	r0, s0
 8005f0c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8005f10:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005f14:	dd04      	ble.n	8005f20 <__ieee754_atan2f+0x2c>
 8005f16:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f1e:	bd10      	pop	{r4, pc}
 8005f20:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8005f24:	d103      	bne.n	8005f2e <__ieee754_atan2f+0x3a>
 8005f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f2a:	f7ff bdab 	b.w	8005a84 <atanf>
 8005f2e:	1794      	asrs	r4, r2, #30
 8005f30:	f004 0402 	and.w	r4, r4, #2
 8005f34:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005f38:	b943      	cbnz	r3, 8005f4c <__ieee754_atan2f+0x58>
 8005f3a:	2c02      	cmp	r4, #2
 8005f3c:	d06e      	beq.n	800601c <__ieee754_atan2f+0x128>
 8005f3e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006024 <__ieee754_atan2f+0x130>
 8005f42:	2c03      	cmp	r4, #3
 8005f44:	bf08      	it	eq
 8005f46:	eef0 7a47 	vmoveq.f32	s15, s14
 8005f4a:	e7e6      	b.n	8005f1a <__ieee754_atan2f+0x26>
 8005f4c:	b941      	cbnz	r1, 8005f60 <__ieee754_atan2f+0x6c>
 8005f4e:	eddf 7a36 	vldr	s15, [pc, #216]	; 8006028 <__ieee754_atan2f+0x134>
 8005f52:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800602c <__ieee754_atan2f+0x138>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	bfb8      	it	lt
 8005f5a:	eef0 7a47 	vmovlt.f32	s15, s14
 8005f5e:	e7dc      	b.n	8005f1a <__ieee754_atan2f+0x26>
 8005f60:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005f64:	d122      	bne.n	8005fac <__ieee754_atan2f+0xb8>
 8005f66:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005f6a:	d112      	bne.n	8005f92 <__ieee754_atan2f+0x9e>
 8005f6c:	2c02      	cmp	r4, #2
 8005f6e:	d00a      	beq.n	8005f86 <__ieee754_atan2f+0x92>
 8005f70:	2c03      	cmp	r4, #3
 8005f72:	d00b      	beq.n	8005f8c <__ieee754_atan2f+0x98>
 8005f74:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006030 <__ieee754_atan2f+0x13c>
 8005f78:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8006034 <__ieee754_atan2f+0x140>
 8005f7c:	2c01      	cmp	r4, #1
 8005f7e:	bf18      	it	ne
 8005f80:	eef0 7a47 	vmovne.f32	s15, s14
 8005f84:	e7c9      	b.n	8005f1a <__ieee754_atan2f+0x26>
 8005f86:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006038 <__ieee754_atan2f+0x144>
 8005f8a:	e7c6      	b.n	8005f1a <__ieee754_atan2f+0x26>
 8005f8c:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800603c <__ieee754_atan2f+0x148>
 8005f90:	e7c3      	b.n	8005f1a <__ieee754_atan2f+0x26>
 8005f92:	2c02      	cmp	r4, #2
 8005f94:	d042      	beq.n	800601c <__ieee754_atan2f+0x128>
 8005f96:	2c03      	cmp	r4, #3
 8005f98:	d005      	beq.n	8005fa6 <__ieee754_atan2f+0xb2>
 8005f9a:	2c01      	cmp	r4, #1
 8005f9c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8006040 <__ieee754_atan2f+0x14c>
 8005fa0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8006044 <__ieee754_atan2f+0x150>
 8005fa4:	e7eb      	b.n	8005f7e <__ieee754_atan2f+0x8a>
 8005fa6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006024 <__ieee754_atan2f+0x130>
 8005faa:	e7b6      	b.n	8005f1a <__ieee754_atan2f+0x26>
 8005fac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005fb0:	d0cd      	beq.n	8005f4e <__ieee754_atan2f+0x5a>
 8005fb2:	1a5b      	subs	r3, r3, r1
 8005fb4:	15db      	asrs	r3, r3, #23
 8005fb6:	2b3c      	cmp	r3, #60	; 0x3c
 8005fb8:	dc1a      	bgt.n	8005ff0 <__ieee754_atan2f+0xfc>
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	da01      	bge.n	8005fc2 <__ieee754_atan2f+0xce>
 8005fbe:	333c      	adds	r3, #60	; 0x3c
 8005fc0:	db19      	blt.n	8005ff6 <__ieee754_atan2f+0x102>
 8005fc2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8005fc6:	f7ff fe31 	bl	8005c2c <fabsf>
 8005fca:	f7ff fd5b 	bl	8005a84 <atanf>
 8005fce:	eef0 7a40 	vmov.f32	s15, s0
 8005fd2:	2c01      	cmp	r4, #1
 8005fd4:	d012      	beq.n	8005ffc <__ieee754_atan2f+0x108>
 8005fd6:	2c02      	cmp	r4, #2
 8005fd8:	d017      	beq.n	800600a <__ieee754_atan2f+0x116>
 8005fda:	2c00      	cmp	r4, #0
 8005fdc:	d09d      	beq.n	8005f1a <__ieee754_atan2f+0x26>
 8005fde:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006048 <__ieee754_atan2f+0x154>
 8005fe2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fe6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800604c <__ieee754_atan2f+0x158>
 8005fea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fee:	e794      	b.n	8005f1a <__ieee754_atan2f+0x26>
 8005ff0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006028 <__ieee754_atan2f+0x134>
 8005ff4:	e7ed      	b.n	8005fd2 <__ieee754_atan2f+0xde>
 8005ff6:	eddf 7a13 	vldr	s15, [pc, #76]	; 8006044 <__ieee754_atan2f+0x150>
 8005ffa:	e7ea      	b.n	8005fd2 <__ieee754_atan2f+0xde>
 8005ffc:	ee17 3a90 	vmov	r3, s15
 8006000:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006004:	ee07 3a90 	vmov	s15, r3
 8006008:	e787      	b.n	8005f1a <__ieee754_atan2f+0x26>
 800600a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006048 <__ieee754_atan2f+0x154>
 800600e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006012:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800604c <__ieee754_atan2f+0x158>
 8006016:	ee77 7a67 	vsub.f32	s15, s14, s15
 800601a:	e77e      	b.n	8005f1a <__ieee754_atan2f+0x26>
 800601c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800604c <__ieee754_atan2f+0x158>
 8006020:	e77b      	b.n	8005f1a <__ieee754_atan2f+0x26>
 8006022:	bf00      	nop
 8006024:	c0490fdb 	.word	0xc0490fdb
 8006028:	3fc90fdb 	.word	0x3fc90fdb
 800602c:	bfc90fdb 	.word	0xbfc90fdb
 8006030:	bf490fdb 	.word	0xbf490fdb
 8006034:	3f490fdb 	.word	0x3f490fdb
 8006038:	4016cbe4 	.word	0x4016cbe4
 800603c:	c016cbe4 	.word	0xc016cbe4
 8006040:	80000000 	.word	0x80000000
 8006044:	00000000 	.word	0x00000000
 8006048:	33bbbd2e 	.word	0x33bbbd2e
 800604c:	40490fdb 	.word	0x40490fdb

08006050 <__ieee754_sqrtf>:
 8006050:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006054:	4770      	bx	lr

08006056 <matherr>:
 8006056:	2000      	movs	r0, #0
 8006058:	4770      	bx	lr
	...

0800605c <__errno>:
 800605c:	4b01      	ldr	r3, [pc, #4]	; (8006064 <__errno+0x8>)
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000474 	.word	0x20000474

08006068 <__libc_init_array>:
 8006068:	b570      	push	{r4, r5, r6, lr}
 800606a:	4e0d      	ldr	r6, [pc, #52]	; (80060a0 <__libc_init_array+0x38>)
 800606c:	4c0d      	ldr	r4, [pc, #52]	; (80060a4 <__libc_init_array+0x3c>)
 800606e:	1ba4      	subs	r4, r4, r6
 8006070:	10a4      	asrs	r4, r4, #2
 8006072:	2500      	movs	r5, #0
 8006074:	42a5      	cmp	r5, r4
 8006076:	d109      	bne.n	800608c <__libc_init_array+0x24>
 8006078:	4e0b      	ldr	r6, [pc, #44]	; (80060a8 <__libc_init_array+0x40>)
 800607a:	4c0c      	ldr	r4, [pc, #48]	; (80060ac <__libc_init_array+0x44>)
 800607c:	f000 f878 	bl	8006170 <_init>
 8006080:	1ba4      	subs	r4, r4, r6
 8006082:	10a4      	asrs	r4, r4, #2
 8006084:	2500      	movs	r5, #0
 8006086:	42a5      	cmp	r5, r4
 8006088:	d105      	bne.n	8006096 <__libc_init_array+0x2e>
 800608a:	bd70      	pop	{r4, r5, r6, pc}
 800608c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006090:	4798      	blx	r3
 8006092:	3501      	adds	r5, #1
 8006094:	e7ee      	b.n	8006074 <__libc_init_array+0xc>
 8006096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800609a:	4798      	blx	r3
 800609c:	3501      	adds	r5, #1
 800609e:	e7f2      	b.n	8006086 <__libc_init_array+0x1e>
 80060a0:	08006204 	.word	0x08006204
 80060a4:	08006204 	.word	0x08006204
 80060a8:	08006204 	.word	0x08006204
 80060ac:	0800620c 	.word	0x0800620c

080060b0 <free>:
 80060b0:	4b02      	ldr	r3, [pc, #8]	; (80060bc <free+0xc>)
 80060b2:	4601      	mov	r1, r0
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	f000 b80b 	b.w	80060d0 <_free_r>
 80060ba:	bf00      	nop
 80060bc:	20000474 	.word	0x20000474

080060c0 <memset>:
 80060c0:	4402      	add	r2, r0
 80060c2:	4603      	mov	r3, r0
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d100      	bne.n	80060ca <memset+0xa>
 80060c8:	4770      	bx	lr
 80060ca:	f803 1b01 	strb.w	r1, [r3], #1
 80060ce:	e7f9      	b.n	80060c4 <memset+0x4>

080060d0 <_free_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4605      	mov	r5, r0
 80060d4:	2900      	cmp	r1, #0
 80060d6:	d045      	beq.n	8006164 <_free_r+0x94>
 80060d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060dc:	1f0c      	subs	r4, r1, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	bfb8      	it	lt
 80060e2:	18e4      	addlt	r4, r4, r3
 80060e4:	f000 f842 	bl	800616c <__malloc_lock>
 80060e8:	4a1f      	ldr	r2, [pc, #124]	; (8006168 <_free_r+0x98>)
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	4610      	mov	r0, r2
 80060ee:	b933      	cbnz	r3, 80060fe <_free_r+0x2e>
 80060f0:	6063      	str	r3, [r4, #4]
 80060f2:	6014      	str	r4, [r2, #0]
 80060f4:	4628      	mov	r0, r5
 80060f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060fa:	f000 b838 	b.w	800616e <__malloc_unlock>
 80060fe:	42a3      	cmp	r3, r4
 8006100:	d90c      	bls.n	800611c <_free_r+0x4c>
 8006102:	6821      	ldr	r1, [r4, #0]
 8006104:	1862      	adds	r2, r4, r1
 8006106:	4293      	cmp	r3, r2
 8006108:	bf04      	itt	eq
 800610a:	681a      	ldreq	r2, [r3, #0]
 800610c:	685b      	ldreq	r3, [r3, #4]
 800610e:	6063      	str	r3, [r4, #4]
 8006110:	bf04      	itt	eq
 8006112:	1852      	addeq	r2, r2, r1
 8006114:	6022      	streq	r2, [r4, #0]
 8006116:	6004      	str	r4, [r0, #0]
 8006118:	e7ec      	b.n	80060f4 <_free_r+0x24>
 800611a:	4613      	mov	r3, r2
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	b10a      	cbz	r2, 8006124 <_free_r+0x54>
 8006120:	42a2      	cmp	r2, r4
 8006122:	d9fa      	bls.n	800611a <_free_r+0x4a>
 8006124:	6819      	ldr	r1, [r3, #0]
 8006126:	1858      	adds	r0, r3, r1
 8006128:	42a0      	cmp	r0, r4
 800612a:	d10b      	bne.n	8006144 <_free_r+0x74>
 800612c:	6820      	ldr	r0, [r4, #0]
 800612e:	4401      	add	r1, r0
 8006130:	1858      	adds	r0, r3, r1
 8006132:	4282      	cmp	r2, r0
 8006134:	6019      	str	r1, [r3, #0]
 8006136:	d1dd      	bne.n	80060f4 <_free_r+0x24>
 8006138:	6810      	ldr	r0, [r2, #0]
 800613a:	6852      	ldr	r2, [r2, #4]
 800613c:	605a      	str	r2, [r3, #4]
 800613e:	4401      	add	r1, r0
 8006140:	6019      	str	r1, [r3, #0]
 8006142:	e7d7      	b.n	80060f4 <_free_r+0x24>
 8006144:	d902      	bls.n	800614c <_free_r+0x7c>
 8006146:	230c      	movs	r3, #12
 8006148:	602b      	str	r3, [r5, #0]
 800614a:	e7d3      	b.n	80060f4 <_free_r+0x24>
 800614c:	6820      	ldr	r0, [r4, #0]
 800614e:	1821      	adds	r1, r4, r0
 8006150:	428a      	cmp	r2, r1
 8006152:	bf04      	itt	eq
 8006154:	6811      	ldreq	r1, [r2, #0]
 8006156:	6852      	ldreq	r2, [r2, #4]
 8006158:	6062      	str	r2, [r4, #4]
 800615a:	bf04      	itt	eq
 800615c:	1809      	addeq	r1, r1, r0
 800615e:	6021      	streq	r1, [r4, #0]
 8006160:	605c      	str	r4, [r3, #4]
 8006162:	e7c7      	b.n	80060f4 <_free_r+0x24>
 8006164:	bd38      	pop	{r3, r4, r5, pc}
 8006166:	bf00      	nop
 8006168:	20001a3c 	.word	0x20001a3c

0800616c <__malloc_lock>:
 800616c:	4770      	bx	lr

0800616e <__malloc_unlock>:
 800616e:	4770      	bx	lr

08006170 <_init>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	bf00      	nop
 8006174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006176:	bc08      	pop	{r3}
 8006178:	469e      	mov	lr, r3
 800617a:	4770      	bx	lr

0800617c <_fini>:
 800617c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617e:	bf00      	nop
 8006180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006182:	bc08      	pop	{r3}
 8006184:	469e      	mov	lr, r3
 8006186:	4770      	bx	lr
